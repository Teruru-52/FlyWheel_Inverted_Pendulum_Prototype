
NUCLEO-F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007f00  08007f00  00017f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800835c  0800835c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800835c  0800835c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  08008540  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08008540  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ff7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  0003a203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0003ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e3d  00000000  00000000  0003ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015241  00000000  00000000  0005fa9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2f31  00000000  00000000  00074cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127c0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005564  00000000  00000000  00127c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee4 	.word	0x08007ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007ee4 	.word	0x08007ee4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 ff04 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f81a 	bl	8000c88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f000 fa10 	bl	8001078 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c58:	f000 f9da 	bl	8001010 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8000c5c:	f000 f882 	bl	8000d64 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 8000c60:	f000 f940 	bl	8000ee4 <_ZL12MX_TIM1_Initv>
//  MX_TIM2_Init();
  MX_SPI1_Init();
 8000c64:	f000 f8fc 	bl	8000e60 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000c68:	f000 f99e 	bl	8000fa8 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <main+0x38>)
 8000c6e:	f003 fe43 	bl	80048f8 <HAL_TIM_Base_Start_IT>
  mpu.MPU6500_Init();
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <main+0x3c>)
 8000c74:	f000 fabc 	bl	80011f0 <_ZN7MPU650012MPU6500_InitEv>
  mpu.MPU6500_OffsetCalc();
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <main+0x3c>)
 8000c7a:	f000 fb0d 	bl	8001298 <_ZN7MPU650018MPU6500_OffsetCalcEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <main+0x36>
 8000c80:	200002e0 	.word	0x200002e0
 8000c84:	200001f8 	.word	0x200001f8

08000c88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 fc32 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000cd0:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 ff36 	bl	8002b4c <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000cf0:	f000 fa22 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fe23 	bl	800395c <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000d26:	f000 fa07 	bl	8001138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000d2a:	f241 0381 	movw	r3, #4225	; 0x1081
 8000d2e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 f841 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000d56:	f000 f9ef 	bl	8001138 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3758      	adds	r7, #88	; 0x58
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000de2:	f000 fec3 	bl	8001b6c <HAL_ADC_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8000df6:	f000 f99f 	bl	8001138 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000e06:	f001 fb05 	bl	8002414 <HAL_ADCEx_MultiModeConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL12MX_ADC1_Initv+0xba>
  {
    Error_Handler();
 8000e1a:	f000 f98d 	bl	8001138 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e26:	2301      	movs	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <_ZL12MX_ADC1_Initv+0xf8>)
 8000e3c:	f001 f828 	bl	8001e90 <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_ZL12MX_ADC1_Initv+0xf0>
  {
    Error_Handler();
 8000e50:	f000 f972 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000022c 	.word	0x2000022c

08000e60 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <_ZL12MX_SPI1_Initv+0x80>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000eae:	2207      	movs	r2, #7
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <_ZL12MX_SPI1_Initv+0x7c>)
 8000ec0:	f003 f8a8 	bl	8004014 <HAL_SPI_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000ed4:	f000 f930 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000027c 	.word	0x2000027c
 8000ee0:	40013000 	.word	0x40013000

08000ee4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <_ZL12MX_TIM1_Initv+0xc0>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30;
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f0a:	221e      	movs	r2, #30
 8000f0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f16:	2263      	movs	r2, #99	; 0x63
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f2c:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f2e:	f003 fc8b 	bl	8004848 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000f42:	f000 f8f9 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f54:	f003 fd2c 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000f68:	f000 f8e6 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f7e:	f003 fef3 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bf14      	ite	ne
 8000f88:	2301      	movne	r3, #1
 8000f8a:	2300      	moveq	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000f92:	f000 f8d1 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002e0 	.word	0x200002e0
 8000fa4:	40012c00 	.word	0x40012c00

08000fa8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <_ZL19MX_USART1_UART_Initv+0x64>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fec:	f003 ff2a 	bl	8004e44 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001000:	f000 f89a 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000032c 	.word	0x2000032c
 800100c:	40013800 	.word	0x40013800

08001010 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 800101c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001054:	f003 fef6 	bl	8004e44 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001068:	f000 f866 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200003b0 	.word	0x200003b0
 8001074:	40004400 	.word	0x40004400

08001078 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 8001094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001098:	6153      	str	r3, [r2, #20]
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <_ZL12MX_GPIO_Initv+0xb8>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2118      	movs	r1, #24
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f001 fd1d 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2108      	movs	r1, #8
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <_ZL12MX_GPIO_Initv+0xbc>)
 80010e8:	f001 fd18 	bl	8002b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80010ec:	2318      	movs	r3, #24
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f001 fb97 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	2308      	movs	r3, #8
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <_ZL12MX_GPIO_Initv+0xbc>)
 8001122:	f001 fb89 	bl	8002838 <HAL_GPIO_Init>

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <_ZN7MPU65009read_byteEh>:
#include "mpu6500.hpp"
extern SPI_HandleTypeDef hspi1;

uint8_t MPU6500::read_byte(uint8_t reg) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	723b      	strb	r3, [r7, #8]
	tx_data[1] = 0x00;  // dummy
 800115a:	2300      	movs	r3, #0
 800115c:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2110      	movs	r1, #16
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f001 fcd9 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	2301      	movs	r3, #1
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2302      	movs	r3, #2
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <_ZN7MPU65009read_byteEh+0x50>)
 800117a:	f002 ffee 	bl	800415a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f001 fcc9 	bl	8002b1c <HAL_GPIO_WritePin>

	return rx_data[1];
 800118a:	7b7b      	ldrb	r3, [r7, #13]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000027c 	.word	0x2000027c

08001198 <_ZN7MPU650010write_byteEhh>:

void MPU6500::write_byte(uint8_t reg, uint8_t data) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	70bb      	strb	r3, [r7, #2]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg & 0x7F;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	723b      	strb	r3, [r7, #8]
//   tx_data[0] = reg | 0x00;
	tx_data[1] = data;  // write data
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CSピン立ち下げ
 80011b6:	2200      	movs	r2, #0
 80011b8:	2110      	movs	r1, #16
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 fcad 	bl	8002b1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	2301      	movs	r3, #1
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2302      	movs	r3, #2
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <_ZN7MPU650010write_byteEhh+0x54>)
 80011d2:	f002 ffc2 	bl	800415a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CSピン立ち上げ
 80011d6:	2201      	movs	r2, #1
 80011d8:	2110      	movs	r1, #16
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f001 fc9d 	bl	8002b1c <HAL_GPIO_WritePin>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000027c 	.word	0x2000027c

080011f0 <_ZN7MPU650012MPU6500_InitEv>:

void MPU6500::MPU6500_Init() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t who_am_i;

	HAL_Delay(100);             // wait start up
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f000 fc93 	bl	8001b24 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I); // read who am i
 80011fe:	2175      	movs	r1, #117	; 0x75
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff9f 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
	printf("who_am_i = 0x%x\r\n", who_am_i); // check who am i value
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	4820      	ldr	r0, [pc, #128]	; (8001290 <_ZN7MPU650012MPU6500_InitEv+0xa0>)
 8001210:	f004 fde8 	bl	8005de4 <iprintf>
	HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f000 fc85 	bl	8001b24 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I);
 800121a:	2175      	movs	r1, #117	; 0x75
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff91 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
	printf("who_am_i = 0x%x\r\n", who_am_i);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <_ZN7MPU650012MPU6500_InitEv+0xa0>)
 800122c:	f004 fdda 	bl	8005de4 <iprintf>
	HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f000 fc77 	bl	8001b24 <HAL_Delay>

	if (who_am_i != 0x70) {
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b70      	cmp	r3, #112	; 0x70
 800123a:	d002      	beq.n	8001242 <_ZN7MPU650012MPU6500_InitEv+0x52>
		printf("mpu6500 error");
 800123c:	4815      	ldr	r0, [pc, #84]	; (8001294 <_ZN7MPU650012MPU6500_InitEv+0xa4>)
 800123e:	f004 fdd1 	bl	8005de4 <iprintf>
	}

	HAL_Delay(50);
 8001242:	2032      	movs	r0, #50	; 0x32
 8001244:	f000 fc6e 	bl	8001b24 <HAL_Delay>
	write_byte(PWR_MGMT_1, 0x00); // set pwr_might (20MHz)
 8001248:	2200      	movs	r2, #0
 800124a:	216b      	movs	r1, #107	; 0x6b
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffa3 	bl	8001198 <_ZN7MPU650010write_byteEhh>
	HAL_Delay(50);
 8001252:	2032      	movs	r0, #50	; 0x32
 8001254:	f000 fc66 	bl	8001b24 <HAL_Delay>
	write_byte(CONFIG, 0x00); // set config (FSYNCはNC)
 8001258:	2200      	movs	r2, #0
 800125a:	211a      	movs	r1, #26
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff9b 	bl	8001198 <_ZN7MPU650010write_byteEhh>
	HAL_Delay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f000 fc5e 	bl	8001b24 <HAL_Delay>
	write_byte(GYRO_CONFIG, 0x18); // set gyro config (2000dps)
 8001268:	2218      	movs	r2, #24
 800126a:	211b      	movs	r1, #27
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff93 	bl	8001198 <_ZN7MPU650010write_byteEhh>
	HAL_Delay(50);
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f000 fc56 	bl	8001b24 <HAL_Delay>
	write_byte(ACCEL_CONFIG, 0x00); // set accel config (2g)
 8001278:	2200      	movs	r2, #0
 800127a:	211c      	movs	r1, #28
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff8b 	bl	8001198 <_ZN7MPU650010write_byteEhh>
	HAL_Delay(50);
 8001282:	2032      	movs	r0, #50	; 0x32
 8001284:	f000 fc4e 	bl	8001b24 <HAL_Delay>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	08007f00 	.word	0x08007f00
 8001294:	08007f14 	.word	0x08007f14

08001298 <_ZN7MPU650018MPU6500_OffsetCalcEv>:

void MPU6500::MPU6500_OffsetCalc() {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08d      	sub	sp, #52	; 0x34
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	offset_flag = false;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;
	float ax_sum = 0;
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ay_sum = 0;
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
	float az_sum = 0;
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
	float gx_sum = 0;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
	float gy_sum = 0;
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
	float gz_sum = 0;
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < 1000; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d6:	f280 8115 	bge.w	8001504 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x26c>
		// H:8bit shift, Link h and l
		ax_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_XOUT_H) << 8)
 80012da:	213b      	movs	r1, #59	; 0x3b
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff31 	bl	8001144 <_ZN7MPU65009read_byteEh>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(ACCEL_XOUT_L));
 80012ea:	213c      	movs	r1, #60	; 0x3c
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <_ZN7MPU65009read_byteEh>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4323      	orrs	r3, r4
 80012f8:	b29b      	uxth	r3, r3
		ax_raw = (int16_t)(
 80012fa:	827b      	strh	r3, [r7, #18]
		ay_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_YOUT_H) << 8)
 80012fc:	213d      	movs	r1, #61	; 0x3d
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff20 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001304:	4603      	mov	r3, r0
 8001306:	b29b      	uxth	r3, r3
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(ACCEL_YOUT_L));
 800130c:	213e      	movs	r1, #62	; 0x3e
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff18 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001314:	4603      	mov	r3, r0
 8001316:	b29b      	uxth	r3, r3
 8001318:	4323      	orrs	r3, r4
 800131a:	b29b      	uxth	r3, r3
		ay_raw = (int16_t)(
 800131c:	823b      	strh	r3, [r7, #16]
		az_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_ZOUT_H) << 8)
 800131e:	213f      	movs	r1, #63	; 0x3f
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff0f 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001326:	4603      	mov	r3, r0
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(ACCEL_ZOUT_L));
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff07 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001336:	4603      	mov	r3, r0
 8001338:	b29b      	uxth	r3, r3
 800133a:	4323      	orrs	r3, r4
 800133c:	b29b      	uxth	r3, r3
		az_raw = (int16_t)(
 800133e:	81fb      	strh	r3, [r7, #14]
		gx_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_XOUT_H) << 8)
 8001340:	2143      	movs	r1, #67	; 0x43
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fefe 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001348:	4603      	mov	r3, r0
 800134a:	b29b      	uxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(GYRO_XOUT_L));
 8001350:	2144      	movs	r1, #68	; 0x44
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fef6 	bl	8001144 <_ZN7MPU65009read_byteEh>
 8001358:	4603      	mov	r3, r0
 800135a:	b29b      	uxth	r3, r3
 800135c:	4323      	orrs	r3, r4
 800135e:	b29b      	uxth	r3, r3
		gx_raw = (int16_t)(
 8001360:	81bb      	strh	r3, [r7, #12]
		gy_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_YOUT_H) << 8)
 8001362:	2145      	movs	r1, #69	; 0x45
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff feed 	bl	8001144 <_ZN7MPU65009read_byteEh>
 800136a:	4603      	mov	r3, r0
 800136c:	b29b      	uxth	r3, r3
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(GYRO_YOUT_L));
 8001372:	2146      	movs	r1, #70	; 0x46
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fee5 	bl	8001144 <_ZN7MPU65009read_byteEh>
 800137a:	4603      	mov	r3, r0
 800137c:	b29b      	uxth	r3, r3
 800137e:	4323      	orrs	r3, r4
 8001380:	b29b      	uxth	r3, r3
		gy_raw = (int16_t)(
 8001382:	817b      	strh	r3, [r7, #10]
		gz_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_ZOUT_H) << 8)
 8001384:	2147      	movs	r1, #71	; 0x47
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fedc 	bl	8001144 <_ZN7MPU65009read_byteEh>
 800138c:	4603      	mov	r3, r0
 800138e:	b29b      	uxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b29c      	uxth	r4, r3
						| (uint16_t) read_byte(GYRO_ZOUT_L));
 8001394:	2148      	movs	r1, #72	; 0x48
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fed4 	bl	8001144 <_ZN7MPU65009read_byteEh>
 800139c:	4603      	mov	r3, r0
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4323      	orrs	r3, r4
 80013a2:	b29b      	uxth	r3, r3
		gz_raw = (int16_t)(
 80013a4:	813b      	strh	r3, [r7, #8]

		ax = (float) (ax_raw / ACCEL_FACTOR);
 80013a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8ba 	bl	8000524 <__aeabi_i2d>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b74      	ldr	r3, [pc, #464]	; (8001588 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 80013b6:	f7ff fa49 	bl	800084c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbf1 	bl	8000ba8 <__aeabi_d2f>
 80013c6:	4602      	mov	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
		ay = (float) (ay_raw / ACCEL_FACTOR);
 80013cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8a7 	bl	8000524 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 80013dc:	f7ff fa36 	bl	800084c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbde 	bl	8000ba8 <__aeabi_d2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
		az = (float) (az_raw / ACCEL_FACTOR);
 80013f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f894 	bl	8000524 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b61      	ldr	r3, [pc, #388]	; (8001588 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 8001402:	f7ff fa23 	bl	800084c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbcb 	bl	8000ba8 <__aeabi_d2f>
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
		gx = (float) (gx_raw / GYRO_FACTOR); // dps to deg/sec
 8001418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f881 	bl	8000524 <__aeabi_i2d>
 8001422:	a357      	add	r3, pc, #348	; (adr r3, 8001580 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2e8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff fa10 	bl	800084c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fbb8 	bl	8000ba8 <__aeabi_d2f>
 8001438:	4602      	mov	r2, r0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60da      	str	r2, [r3, #12]
		gy = (float) (gy_raw / GYRO_FACTOR);
 800143e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f86e 	bl	8000524 <__aeabi_i2d>
 8001448:	a34d      	add	r3, pc, #308	; (adr r3, 8001580 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2e8>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f9fd 	bl	800084c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fba5 	bl	8000ba8 <__aeabi_d2f>
 800145e:	4602      	mov	r2, r0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	611a      	str	r2, [r3, #16]
		gz = (float) (gz_raw / GYRO_FACTOR);
 8001464:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f85b 	bl	8000524 <__aeabi_i2d>
 800146e:	a344      	add	r3, pc, #272	; (adr r3, 8001580 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2e8>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f9ea 	bl	800084c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb92 	bl	8000ba8 <__aeabi_d2f>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	615a      	str	r2, [r3, #20]

		ax_sum += ax;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay_sum += ay;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az_sum += az;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		gx_sum += gx;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	edc7 7a08 	vstr	s15, [r7, #32]
		gy_sum += gy;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a07 	vstr	s15, [r7, #28]
		gz_sum += gz;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	edc7 7a06 	vstr	s15, [r7, #24]
		HAL_Delay(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f000 fb14 	bl	8001b24 <HAL_Delay>
	for (int i = 0; i < 1000; i++) {
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e6e5      	b.n	80012d0 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x38>
	}
	ax_offset = ax_sum / 1000.0;
 8001504:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001508:	eddf 6a20 	vldr	s13, [pc, #128]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 800150c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	edc3 7a06 	vstr	s15, [r3, #24]
	ay_offset = ay_sum / 1000.0;
 8001516:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800151a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a07 	vstr	s15, [r3, #28]
	az_offset = az_sum / 1000.0;
 8001528:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800152c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 8001530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edc3 7a08 	vstr	s15, [r3, #32]
	gx_offset = gx_sum / 1000.0;
 800153a:	ed97 7a08 	vldr	s14, [r7, #32]
 800153e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 8001542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	gy_offset = gy_sum / 1000.0;
 800154c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001550:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	gz_offset = gz_sum / 1000.0;
 800155e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001562:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800158c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f4>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	offset_flag = true;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001578:	bf00      	nop
 800157a:	3734      	adds	r7, #52	; 0x34
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	66666666 	.word	0x66666666
 8001584:	40306666 	.word	0x40306666
 8001588:	40d00000 	.word	0x40d00000
 800158c:	447a0000 	.word	0x447a0000

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6193      	str	r3, [r2, #24]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f8:	d124      	bne.n	8001644 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_ADC_MspInit+0x74>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_ADC_MspInit+0x74>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_ADC_MspInit+0x74>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_ADC_MspInit+0x74>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_ADC_MspInit+0x74>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_ADC_MspInit+0x74>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800162a:	2303      	movs	r3, #3
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162e:	2303      	movs	r3, #3
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f001 f8fa 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_SPI_MspInit+0x7c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d128      	bne.n	80016c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 8001678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_SPI_MspInit+0x80>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016a2:	23e0      	movs	r3, #224	; 0xe0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b2:	2305      	movs	r3, #5
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f001 f8ba 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x38>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10b      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_TIM_Base_MspInit+0x3c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_UART_MspInit+0xe0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12a      	bne.n	800178c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001766:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001778:	2307      	movs	r3, #7
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f001 f857 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178a:	e02e      	b.n	80017ea <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_UART_MspInit+0xe8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d129      	bne.n	80017ea <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_UART_MspInit+0xe4>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80017c6:	f248 0304 	movw	r3, #32772	; 0x8004
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d8:	2307      	movs	r3, #7
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f001 f827 	bl	8002838 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40004400 	.word	0x40004400

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184c:	f000 f94a 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
	return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_kill>:

int _kill(int pid, int sig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186e:	f003 fe1d 	bl	80054ac <__errno>
 8001872:	4603      	mov	r3, r0
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
	return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe7 	bl	8001864 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0x12>

08001898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00a      	b.n	80018c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018aa:	f3af 8000 	nop.w
 80018ae:	4601      	mov	r1, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	60ba      	str	r2, [r7, #8]
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf0      	blt.n	80018aa <_read+0x12>
	}

return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e009      	b.n	80018f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf1      	blt.n	80018e4 <_write+0x12>
	}
	return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_close>:

int _close(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001932:	605a      	str	r2, [r3, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_isatty>:

int _isatty(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f003 fd82 	bl	80054ac <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20003000 	.word	0x20003000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	20000434 	.word	0x20000434
 80019dc:	20000458 	.word	0x20000458

080019e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490e      	ldr	r1, [pc, #56]	; (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0b      	ldr	r4, [pc, #44]	; (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff ffd7 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 fd41 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a36:	f7ff f907 	bl	8000c48 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a3c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a48:	08008364 	.word	0x08008364
  ldr r2, =_sbss
 8001a4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a50:	20000454 	.word	0x20000454

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_Init+0x28>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_Init+0x28>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 feb1 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fd8c 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 febb 	bl	800281e <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 fe91 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000440 	.word	0x20000440

08001b0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000440 	.word	0x20000440

08001b24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e172      	b.n	8001e72 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d176      	bne.n	8001c8c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d152      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fd09 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13b      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fce3 	bl	80025a0 <ADC_Disable>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12f      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
 8001bec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12b      	bne.n	8001c4c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfc:	f023 0302 	bic.w	r3, r3, #2
 8001c00:	f043 0202 	orr.w	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c16:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c26:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_ADC_Init+0x310>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <HAL_ADC_Init+0x314>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c68:	d110      	bne.n	8001c8c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f023 0312 	bic.w	r3, r3, #18
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 80df 	bne.w	8001e58 <HAL_ADC_Init+0x2ec>
 8001c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80da 	bne.w	8001e58 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80d2 	bne.w	8001e58 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cbc:	f043 0202 	orr.w	r2, r3, #2
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_ADC_Init+0x318>)
 8001cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d102      	bne.n	8001cd8 <HAL_ADC_Init+0x16c>
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_ADC_Init+0x31c>)
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_Init+0x172>
 8001cd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cdc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d108      	bne.n	8001cfe <HAL_ADC_Init+0x192>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x192>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_Init+0x194>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11c      	bne.n	8001d3e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Init+0x1ba>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_Init+0x1bc>
 8001d26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7e5b      	ldrb	r3, [r3, #25]
 8001d42:	035b      	lsls	r3, r3, #13
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d48:	2a01      	cmp	r2, #1
 8001d4a:	d002      	beq.n	8001d52 <HAL_ADC_Init+0x1e6>
 8001d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_Init+0x1e8>
 8001d52:	2200      	movs	r2, #0
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d64:	4313      	orrs	r3, r2
 8001d66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11b      	bne.n	8001daa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	045a      	lsls	r2, r3, #17
 8001d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d8c:	e00d      	b.n	8001daa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d96:	f043 0220 	orr.w	r2, r3, #32
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d007      	beq.n	8001dc2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d114      	bne.n	8001dfa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dde:	f023 0302 	bic.w	r3, r3, #2
 8001de2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
 8001de8:	039a      	lsls	r2, r3, #14
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4313      	orrs	r3, r2
 8001df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001df6:	4313      	orrs	r3, r2
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_ADC_Init+0x320>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10c      	bne.n	8001e30 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f023 010f 	bic.w	r1, r3, #15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2e:	e007      	b.n	8001e40 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 020f 	bic.w	r2, r2, #15
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
 8001e56:	e00a      	b.n	8001e6e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f023 0312 	bic.w	r3, r3, #18
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3768      	adds	r7, #104	; 0x68
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	50000300 	.word	0x50000300
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	fff0c007 	.word	0xfff0c007

08001e90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b09b      	sub	sp, #108	; 0x6c
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x22>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e2a5      	b.n	80023fe <HAL_ADC_ConfigChannel+0x56e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 8289 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d81c      	bhi.n	8001f0c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	231f      	movs	r3, #31
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4019      	ands	r1, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0a:	e063      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d81e      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3b1e      	subs	r3, #30
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4019      	ands	r1, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f50:	e040      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b0e      	cmp	r3, #14
 8001f58:	d81e      	bhi.n	8001f98 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	3b3c      	subs	r3, #60	; 0x3c
 8001f6e:	221f      	movs	r2, #31
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4019      	ands	r1, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	3b3c      	subs	r3, #60	; 0x3c
 8001f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
 8001f96:	e01d      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	3b5a      	subs	r3, #90	; 0x5a
 8001fac:	221f      	movs	r2, #31
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4019      	ands	r1, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	3b5a      	subs	r3, #90	; 0x5a
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80e5 	bne.w	80021ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d91c      	bls.n	8002026 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6898      	ldr	r0, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	3b1e      	subs	r3, #30
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	e019      	b.n	800205a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6959      	ldr	r1, [r3, #20]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4019      	ands	r1, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6898      	ldr	r0, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	3b01      	subs	r3, #1
 8002078:	2b03      	cmp	r3, #3
 800207a:	d84f      	bhi.n	800211c <HAL_ADC_ConfigChannel+0x28c>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <HAL_ADC_ConfigChannel+0x1f4>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	08002095 	.word	0x08002095
 8002088:	080020b7 	.word	0x080020b7
 800208c:	080020d9 	.word	0x080020d9
 8002090:	080020fb 	.word	0x080020fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800209a:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_ADC_ConfigChannel+0x484>)
 800209c:	4013      	ands	r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	0691      	lsls	r1, r2, #26
 80020a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020a6:	430a      	orrs	r2, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020b4:	e07e      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020bc:	4b95      	ldr	r3, [pc, #596]	; (8002314 <HAL_ADC_ConfigChannel+0x484>)
 80020be:	4013      	ands	r3, r2
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	0691      	lsls	r1, r2, #26
 80020c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c8:	430a      	orrs	r2, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020d4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020d6:	e06d      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <HAL_ADC_ConfigChannel+0x484>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	0691      	lsls	r1, r2, #26
 80020e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020ea:	430a      	orrs	r2, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020f6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020f8:	e05c      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002100:	4b84      	ldr	r3, [pc, #528]	; (8002314 <HAL_ADC_ConfigChannel+0x484>)
 8002102:	4013      	ands	r3, r2
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	0691      	lsls	r1, r2, #26
 800210a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800210c:	430a      	orrs	r2, r1
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002118:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800211a:	e04b      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	069b      	lsls	r3, r3, #26
 800212c:	429a      	cmp	r2, r3
 800212e:	d107      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800213e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	069b      	lsls	r3, r3, #26
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002162:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	069b      	lsls	r3, r3, #26
 8002174:	429a      	cmp	r2, r3
 8002176:	d107      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002186:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	429a      	cmp	r2, r3
 800219a:	d10a      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021ac:	e001      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80021b2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x344>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x344>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x346>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 810b 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d00f      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002202:	e049      	b.n	8002298 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b09      	cmp	r3, #9
 8002224:	d91c      	bls.n	8002260 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6999      	ldr	r1, [r3, #24]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	3b1b      	subs	r3, #27
 8002238:	2207      	movs	r2, #7
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	4019      	ands	r1, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6898      	ldr	r0, [r3, #8]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	3b1b      	subs	r3, #27
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	619a      	str	r2, [r3, #24]
 800225e:	e01b      	b.n	8002298 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6959      	ldr	r1, [r3, #20]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	2207      	movs	r2, #7
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	4019      	ands	r1, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6898      	ldr	r0, [r3, #8]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_ADC_ConfigChannel+0x488>)
 800229a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d105      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022b4:	2b11      	cmp	r3, #17
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	f040 8092 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 808b 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d102      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x45c>
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_ADC_ConfigChannel+0x48c>)
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e002      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x462>
 80022ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10f      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x490>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x490>
 800230e:	2301      	movs	r3, #1
 8002310:	e007      	b.n	8002322 <HAL_ADC_ConfigChannel+0x492>
 8002312:	bf00      	nop
 8002314:	83fff000 	.word	0x83fff000
 8002318:	50000300 	.word	0x50000300
 800231c:	50000100 	.word	0x50000100
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d150      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002326:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x4b8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x4b8>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_ADC_ConfigChannel+0x4ba>
 8002348:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13c      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b10      	cmp	r3, #16
 8002354:	d11d      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x502>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235e:	d118      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_ADC_ConfigChannel+0x57c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <HAL_ADC_ConfigChannel+0x580>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002382:	e002      	b.n	800238a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3b01      	subs	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002390:	e02e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b11      	cmp	r3, #17
 8002398:	d10b      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x522>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023b0:	e01e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b12      	cmp	r3, #18
 80023b8:	d11a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023c6:	e013      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023da:	e00a      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023ee:	e000      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023fe:	4618      	mov	r0, r3
 8002400:	376c      	adds	r7, #108	; 0x6c
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000
 8002410:	431bde83 	.word	0x431bde83

08002414 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002414:	b480      	push	{r7}
 8002416:	b099      	sub	sp, #100	; 0x64
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d102      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800242e:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	e002      	b.n	800243a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002438:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0a2      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800244e:	2302      	movs	r3, #2
 8002450:	e09b      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d17f      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d179      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002476:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d040      	beq.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002492:	035b      	lsls	r3, r3, #13
 8002494:	430b      	orrs	r3, r1
 8002496:	431a      	orrs	r2, r3
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d108      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d15c      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80024de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d14b      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024ec:	f023 030f 	bic.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	6811      	ldr	r1, [r2, #0]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6892      	ldr	r2, [r2, #8]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002500:	e03c      	b.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800250c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d123      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002550:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d112      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800255e:	f023 030f 	bic.w	r3, r3, #15
 8002562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002564:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002566:	e009      	b.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800257a:	e000      	b.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800257c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800258a:	4618      	mov	r0, r3
 800258c:	3764      	adds	r7, #100	; 0x64
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	50000100 	.word	0x50000100
 800259c:	50000300 	.word	0x50000300

080025a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <ADC_Disable+0x2c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <ADC_Disable+0x2c>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <ADC_Disable+0x2e>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d047      	beq.n	8002662 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030d 	and.w	r3, r3, #13
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10f      	bne.n	8002600 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2203      	movs	r2, #3
 80025f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa88 	bl	8001b0c <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025fe:	e029      	b.n	8002654 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0210 	orr.w	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e023      	b.n	8002664 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261c:	f7ff fa76 	bl	8001b0c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d914      	bls.n	8002654 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10d      	bne.n	8002654 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e007      	b.n	8002664 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d0dc      	beq.n	800261c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff47 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff5c 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffb0 	bl	800278c <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	e14e      	b.n	8002ae6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8140 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d005      	beq.n	8002878 <HAL_GPIO_Init+0x40>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d130      	bne.n	80028da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ae:	2201      	movs	r2, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0201 	and.w	r2, r3, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d017      	beq.n	8002916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d123      	bne.n	800296a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	220f      	movs	r2, #15
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 809a 	beq.w	8002ae0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x2cc>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029c4:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <HAL_GPIO_Init+0x2d0>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	220f      	movs	r2, #15
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1e0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2d4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_GPIO_Init+0x2d8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1d8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_GPIO_Init+0x2dc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1d4>
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1e2>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aea9 	bne.w	8002848 <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f000 bef4 	b.w	800394e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 816a 	beq.w	8002e4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b76:	4bb3      	ldr	r3, [pc, #716]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b82:	4bb0      	ldr	r3, [pc, #704]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d159      	bne.n	8002c42 <HAL_RCC_OscConfig+0xf6>
 8002b8e:	4bad      	ldr	r3, [pc, #692]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d152      	bne.n	8002c42 <HAL_RCC_OscConfig+0xf6>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0x82>
 8002bc8:	4b9e      	ldr	r3, [pc, #632]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0xae>
 8002bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bf6:	4b93      	ldr	r3, [pc, #588]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f002 021f 	and.w	r2, r2, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 810c 	beq.w	8002e48 <HAL_RCC_OscConfig+0x2fc>
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8106 	bne.w	8002e48 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f000 be86 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x110>
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7c      	ldr	r2, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e030      	b.n	8002cbe <HAL_RCC_OscConfig+0x172>
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x134>
 8002c66:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a76      	ldr	r2, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b74      	ldr	r3, [pc, #464]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01e      	b.n	8002cbe <HAL_RCC_OscConfig+0x172>
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x15a>
 8002c8c:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6c      	ldr	r2, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a69      	ldr	r2, [pc, #420]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x172>
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a66      	ldr	r2, [pc, #408]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b64      	ldr	r3, [pc, #400]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	495d      	ldr	r1, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d059      	beq.n	8002d90 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ff16 	bl	8001b0c <HAL_GetTick>
 8002ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce6:	f7fe ff11 	bl	8001b0c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f000 be29 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d10:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x1e2>
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x20e>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d6e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ab      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x19a>
 8002d8e:	e05c      	b.n	8002e4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe febc 	bl	8001b0c <HAL_GetTick>
 8002d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9a:	f7fe feb7 	bl	8001b0c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d902      	bls.n	8002db0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f000 bdcf 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002dc4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_OscConfig+0x296>
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x2c2>
 8002de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dfe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0x2f8>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e1a:	fa92 f2a2 	rbit	r2, r2
 8002e1e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e22:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f002 021f 	and.w	r2, r2, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ab      	bne.n	8002d9a <HAL_RCC_OscConfig+0x24e>
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_OscConfig+0x2fe>
 8002e44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 816f 	beq.w	8003138 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e5a:	4bd0      	ldr	r3, [pc, #832]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e66:	4bcd      	ldr	r3, [pc, #820]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d16c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x400>
 8002e72:	4bca      	ldr	r3, [pc, #808]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d166      	bne.n	8002f4c <HAL_RCC_OscConfig+0x400>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0x362>
 8002ea8:	4bbc      	ldr	r3, [pc, #752]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e013      	b.n	8002ed6 <HAL_RCC_OscConfig+0x38a>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ed2:	4bb2      	ldr	r3, [pc, #712]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002edc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ee8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f042 0220 	orr.w	r2, r2, #32
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f002 021f 	and.w	r2, r2, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3cc>
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f000 bd1b 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4ba0      	ldr	r3, [pc, #640]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	21f8      	movs	r1, #248	; 0xf8
 8002f28:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f30:	fa91 f1a1 	rbit	r1, r1
 8002f34:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f38:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f3c:	fab1 f181 	clz	r1, r1
 8002f40:	b2c9      	uxtb	r1, r1
 8002f42:	408b      	lsls	r3, r1
 8002f44:	4995      	ldr	r1, [pc, #596]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e0f5      	b.n	8003138 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8085 	beq.w	8003062 <HAL_RCC_OscConfig+0x516>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fdc2 	bl	8001b0c <HAL_GetTick>
 8002f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fdbd 	bl	8001b0c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	f000 bcd5 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x488>
 8002fce:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e013      	b.n	8002ffc <HAL_RCC_OscConfig+0x4b0>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ff8:	4b68      	ldr	r3, [pc, #416]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003002:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003006:	fa92 f2a2 	rbit	r2, r2
 800300a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800300e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0af      	beq.n	8002f8e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b5b      	ldr	r3, [pc, #364]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	21f8      	movs	r1, #248	; 0xf8
 800303e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003046:	fa91 f1a1 	rbit	r1, r1
 800304a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800304e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003052:	fab1 f181 	clz	r1, r1
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	408b      	lsls	r3, r1
 800305a:	4950      	ldr	r1, [pc, #320]	; (800319c <HAL_RCC_OscConfig+0x650>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e06a      	b.n	8003138 <HAL_RCC_OscConfig+0x5ec>
 8003062:	2301      	movs	r3, #1
 8003064:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2300      	movs	r3, #0
 800308c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fd3d 	bl	8001b0c <HAL_GetTick>
 8003092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fd38 	bl	8001b0c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d902      	bls.n	80030ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	f000 bc50 	b.w	800394e <HAL_RCC_OscConfig+0xe02>
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_RCC_OscConfig+0x592>
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <HAL_RCC_OscConfig+0x650>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	e013      	b.n	8003106 <HAL_RCC_OscConfig+0x5ba>
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x650>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2202      	movs	r2, #2
 8003108:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800310c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003110:	fa92 f2a2 	rbit	r2, r2
 8003114:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003118:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800311c:	fab2 f282 	clz	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f042 0220 	orr.w	r2, r2, #32
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1af      	bne.n	8003098 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80da 	beq.w	80032fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d069      	beq.n	8003226 <HAL_RCC_OscConfig+0x6da>
 8003152:	2301      	movs	r3, #1
 8003154:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x654>)
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	461a      	mov	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fcc6 	bl	8001b0c <HAL_GetTick>
 8003180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003184:	e00e      	b.n	80031a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fcc1 	bl	8001b0c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d906      	bls.n	80031a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e3d9      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	10908120 	.word	0x10908120
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031ba:	2202      	movs	r2, #2
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80031d2:	2202      	movs	r2, #2
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80031e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4ba5      	ldr	r3, [pc, #660]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80031e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031ee:	2102      	movs	r1, #2
 80031f0:	6019      	str	r1, [r3, #0]
 80031f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f1a3 	rbit	r1, r3
 80031fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003200:	6019      	str	r1, [r3, #0]
  return result;
 8003202:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0b0      	beq.n	8003186 <HAL_RCC_OscConfig+0x63a>
 8003224:	e06a      	b.n	80032fc <HAL_RCC_OscConfig+0x7b0>
 8003226:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800323c:	601a      	str	r2, [r3, #0]
  return result;
 800323e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003242:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x934>)
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	2300      	movs	r3, #0
 8003256:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7fe fc58 	bl	8001b0c <HAL_GetTick>
 800325c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	e009      	b.n	8003276 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003262:	f7fe fc53 	bl	8001b0c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e36b      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 8003276:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800327a:	2202      	movs	r2, #2
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003292:	2202      	movs	r2, #2
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80032c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032c6:	2102      	movs	r1, #2
 80032c8:	6019      	str	r1, [r3, #0]
 80032ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f1a3 	rbit	r1, r3
 80032d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032d8:	6019      	str	r1, [r3, #0]
  return result;
 80032da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1b2      	bne.n	8003262 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8158 	beq.w	80035bc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b5a      	ldr	r3, [pc, #360]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a56      	ldr	r2, [pc, #344]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b54      	ldr	r3, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x930>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_OscConfig+0x938>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d11a      	bne.n	8003386 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x938>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x938>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335c:	f7fe fbd6 	bl	8001b0c <HAL_GetTick>
 8003360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e009      	b.n	800337a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fbd1 	bl	8001b0c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2e9      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337a:	4b42      	ldr	r3, [pc, #264]	; (8003484 <HAL_RCC_OscConfig+0x938>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ef      	beq.n	8003366 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x852>
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a39      	ldr	r2, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	e02f      	b.n	80033fe <HAL_RCC_OscConfig+0x8b2>
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x876>
 80033a8:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a33      	ldr	r2, [pc, #204]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a30      	ldr	r2, [pc, #192]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	e01d      	b.n	80033fe <HAL_RCC_OscConfig+0x8b2>
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x89a>
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x8b2>
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a24      	ldr	r2, [pc, #144]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_RCC_OscConfig+0x930>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d06b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe fb80 	bl	8001b0c <HAL_GetTick>
 800340c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	e00b      	b.n	800342a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fe fb7b 	bl	8001b0c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e291      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 800342a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003446:	2202      	movs	r2, #2
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003458:	601a      	str	r2, [r3, #0]
  return result;
 800345a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800345e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d109      	bne.n	8003488 <HAL_RCC_OscConfig+0x93c>
 8003474:	4b01      	ldr	r3, [pc, #4]	; (800347c <HAL_RCC_OscConfig+0x930>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x958>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	10908120 	.word	0x10908120
 8003484:	40007000 	.word	0x40007000
 8003488:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800348c:	2202      	movs	r2, #2
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	4bbb      	ldr	r3, [pc, #748]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034a8:	2102      	movs	r1, #2
 80034aa:	6011      	str	r1, [r2, #0]
 80034ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	fa92 f1a2 	rbit	r1, r2
 80034b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034ba:	6011      	str	r1, [r2, #0]
  return result;
 80034bc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d099      	beq.n	8003412 <HAL_RCC_OscConfig+0x8c6>
 80034de:	e063      	b.n	80035a8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fb14 	bl	8001b0c <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e8:	e00b      	b.n	8003502 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fb0f 	bl	8001b0c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e225      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 8003502:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003506:	2202      	movs	r2, #2
 8003508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	fa93 f2a3 	rbit	r2, r3
 8003514:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800351e:	2202      	movs	r2, #2
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003530:	601a      	str	r2, [r3, #0]
  return result;
 8003532:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0xa06>
 800354c:	4b90      	ldr	r3, [pc, #576]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	e00d      	b.n	800356e <HAL_RCC_OscConfig+0xa22>
 8003552:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003556:	2202      	movs	r2, #2
 8003558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003572:	2102      	movs	r1, #2
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	fa92 f1a2 	rbit	r1, r2
 8003580:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003584:	6011      	str	r1, [r2, #0]
  return result;
 8003586:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f002 021f 	and.w	r2, r2, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1a0      	bne.n	80034ea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b77      	ldr	r3, [pc, #476]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	4a76      	ldr	r2, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 81c2 	beq.w	800394c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b71      	ldr	r3, [pc, #452]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	f000 819c 	beq.w	800390e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	f040 8114 	bne.w	800380a <HAL_RCC_OscConfig+0xcbe>
 80035e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800360c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe fa78 	bl	8001b0c <HAL_GetTick>
 800361c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003620:	e009      	b.n	8003636 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fa73 	bl	8001b0c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e18b      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 8003636:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800364e:	601a      	str	r2, [r3, #0]
  return result;
 8003650:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_RCC_OscConfig+0xb24>
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	e01b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb5c>
 8003670:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800368e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	fa92 f1a2 	rbit	r1, r2
 80036bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036c0:	6011      	str	r1, [r2, #0]
  return result;
 80036c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d19e      	bne.n	8003622 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036f2:	1d3b      	adds	r3, r7, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	4925      	ldr	r1, [pc, #148]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
 8003700:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003718:	601a      	str	r2, [r3, #0]
  return result;
 800371a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800371e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800372a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	461a      	mov	r2, r3
 8003732:	2301      	movs	r3, #1
 8003734:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe f9e9 	bl	8001b0c <HAL_GetTick>
 800373a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800373e:	e009      	b.n	8003754 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe f9e4 	bl	8001b0c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0fc      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 8003754:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800376c:	601a      	str	r2, [r3, #0]
  return result;
 800376e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003772:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0xc48>
 8003788:	4b01      	ldr	r3, [pc, #4]	; (8003790 <HAL_RCC_OscConfig+0xc44>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e01e      	b.n	80037cc <HAL_RCC_OscConfig+0xc80>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	4b63      	ldr	r3, [pc, #396]	; (8003958 <HAL_RCC_OscConfig+0xe0c>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fa92 f1a2 	rbit	r1, r2
 80037e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037e4:	6011      	str	r1, [r2, #0]
  return result;
 80037e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	fab2 f282 	clz	r2, r2
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f042 0220 	orr.w	r2, r2, #32
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f002 021f 	and.w	r2, r2, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d09b      	beq.n	8003740 <HAL_RCC_OscConfig+0xbf4>
 8003808:	e0a0      	b.n	800394c <HAL_RCC_OscConfig+0xe00>
 800380a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800380e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003822:	601a      	str	r2, [r3, #0]
  return result;
 8003824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe f964 	bl	8001b0c <HAL_GetTick>
 8003844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003848:	e009      	b.n	800385e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe f95f 	bl	8001b0c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e077      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
 800385e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	601a      	str	r2, [r3, #0]
  return result;
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_RCC_OscConfig+0xd4c>
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <HAL_RCC_OscConfig+0xe0c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e01b      	b.n	80038d0 <HAL_RCC_OscConfig+0xd84>
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f107 0320 	add.w	r3, r7, #32
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f107 0318 	add.w	r3, r7, #24
 80038b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f107 0318 	add.w	r3, r7, #24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fa93 f2a3 	rbit	r2, r3
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <HAL_RCC_OscConfig+0xe0c>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f107 0210 	add.w	r2, r7, #16
 80038d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038d8:	6011      	str	r1, [r2, #0]
 80038da:	f107 0210 	add.w	r2, r7, #16
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	fa92 f1a2 	rbit	r1, r2
 80038e4:	f107 020c 	add.w	r2, r7, #12
 80038e8:	6011      	str	r1, [r2, #0]
  return result;
 80038ea:	f107 020c 	add.w	r2, r7, #12
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	fab2 f282 	clz	r2, r2
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f042 0220 	orr.w	r2, r2, #32
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f002 021f 	and.w	r2, r2, #31
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d19e      	bne.n	800384a <HAL_RCC_OscConfig+0xcfe>
 800390c:	e01e      	b.n	800394c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e018      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCC_OscConfig+0xe0c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003924:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	429a      	cmp	r2, r3
 8003934:	d108      	bne.n	8003948 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003936:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800393a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b09e      	sub	sp, #120	; 0x78
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e162      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b90      	ldr	r3, [pc, #576]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b8d      	ldr	r3, [pc, #564]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	498b      	ldr	r1, [pc, #556]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b89      	ldr	r3, [pc, #548]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e14a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	497f      	ldr	r1, [pc, #508]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80dc 	beq.w	8003b88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d13c      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xf6>
 80039d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xa6>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	e00f      	b.n	8003a22 <HAL_RCC_ClockConfig+0xc6>
 8003a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
 8003a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1e:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2a:	fa92 f2a2 	rbit	r2, r2
 8003a2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a32:	fab2 f282 	clz	r2, r2
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f002 021f 	and.w	r2, r2, #31
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f202 	lsl.w	r2, r1, r2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d17b      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0f3      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d13c      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x178>
 8003a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x128>
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
 8003a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aac:	fa92 f2a2 	rbit	r2, r2
 8003ab0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d13a      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b2      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_ClockConfig+0x1a0>
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e00d      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1bc>
 8003afc:	2302      	movs	r3, #2
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	2302      	movs	r3, #2
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2202      	movs	r2, #2
 8003b1a:	61ba      	str	r2, [r7, #24]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	fa92 f2a2 	rbit	r2, r2
 8003b22:	617a      	str	r2, [r7, #20]
  return result;
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	fab2 f282 	clz	r2, r2
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e079      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	491a      	ldr	r1, [pc, #104]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fd ffd8 	bl	8001b0c <HAL_GetTick>
 8003b5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fd ffd4 	bl	8001b0c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e061      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d214      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 0207 	bic.w	r2, r3, #7
 8003b9e:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e040      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
 8003bb8:	40022000 	.word	0x40022000
 8003bbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	491a      	ldr	r1, [pc, #104]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4912      	ldr	r1, [pc, #72]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bfe:	f000 f829 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	22f0      	movs	r2, #240	; 0xf0
 8003c0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	fa92 f2a2 	rbit	r2, r2
 8003c16:	60fa      	str	r2, [r7, #12]
  return result;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	fab2 f282 	clz	r2, r2
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	40d3      	lsrs	r3, r2
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_ClockConfig+0x2ec>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_RCC_ClockConfig+0x2f0>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_ClockConfig+0x2f4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd ff26 	bl	8001a84 <HAL_InitTick>
  
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3778      	adds	r7, #120	; 0x78
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08007f40 	.word	0x08007f40
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	20000004 	.word	0x20000004

08003c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b08b      	sub	sp, #44	; 0x2c
 8003c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d002      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x30>
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x36>
 8003c82:	e03c      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c86:	623b      	str	r3, [r7, #32]
      break;
 8003c88:	e03c      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	607a      	str	r2, [r7, #4]
  return result;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	fab2 f282 	clz	r2, r2
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	40d3      	lsrs	r3, r2
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	40d3      	lsrs	r3, r2
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e004      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	623b      	str	r3, [r7, #32]
      break;
 8003cfc:	e002      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d00:	623b      	str	r3, [r7, #32]
      break;
 8003d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	372c      	adds	r7, #44	; 0x2c
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	08007f58 	.word	0x08007f58
 8003d20:	08007f68 	.word	0x08007f68
 8003d24:	003d0900 	.word	0x003d0900

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000000 	.word	0x20000000

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d46:	f7ff ffef 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	603a      	str	r2, [r7, #0]
  return result;
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	40d3      	lsrs	r3, r2
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08007f50 	.word	0x08007f50

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d8a:	f7ff ffcd 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	fa92 f2a2 	rbit	r2, r2
 8003da4:	603a      	str	r2, [r7, #0]
  return result;
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	fab2 f282 	clz	r2, r2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	40d3      	lsrs	r3, r2
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08007f50 	.word	0x08007f50

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b092      	sub	sp, #72	; 0x48
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80cd 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dec:	4b86      	ldr	r3, [pc, #536]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b83      	ldr	r3, [pc, #524]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a82      	ldr	r2, [pc, #520]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
 8003e04:	4b80      	ldr	r3, [pc, #512]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b7d      	ldr	r3, [pc, #500]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b7a      	ldr	r3, [pc, #488]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fe6d 	bl	8001b0c <HAL_GetTick>
 8003e32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fd fe69 	bl	8001b0c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0db      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b70      	ldr	r3, [pc, #448]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e54:	4b6c      	ldr	r3, [pc, #432]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d07d      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d076      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b5e      	ldr	r3, [pc, #376]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b55      	ldr	r3, [pc, #340]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec4:	4a50      	ldr	r2, [pc, #320]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d045      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fe1a 	bl	8001b0c <HAL_GetTick>
 8003ed8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd fe16 	bl	8001b0c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e086      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	2302      	movs	r3, #2
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	61fb      	str	r3, [r7, #28]
  return result;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f20:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	e007      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	4b35      	ldr	r3, [pc, #212]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2202      	movs	r2, #2
 8003f38:	613a      	str	r2, [r7, #16]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	fa92 f2a2 	rbit	r2, r2
 8003f40:	60fa      	str	r2, [r7, #12]
  return result;
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	fab2 f282 	clz	r2, r2
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	f002 021f 	and.w	r2, r2, #31
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0bd      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4926      	ldr	r1, [pc, #152]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f84:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	491a      	ldr	r1, [pc, #104]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f023 0210 	bic.w	r2, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4912      	ldr	r1, [pc, #72]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	490b      	ldr	r1, [pc, #44]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4903      	ldr	r1, [pc, #12]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3748      	adds	r7, #72	; 0x48
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	40007000 	.word	0x40007000
 8004010:	10908100 	.word	0x10908100

08004014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e095      	b.n	8004152 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004036:	d009      	beq.n	800404c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
 800403e:	e005      	b.n	800404c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd faf2 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800408c:	d902      	bls.n	8004094 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e002      	b.n	800409a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004098:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040a2:	d007      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	f003 0204 	and.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004130:	ea42 0103 	orr.w	r1, r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	; 0x28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004168:	2301      	movs	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x26>
 800417c:	2302      	movs	r3, #2
 800417e:	e1fb      	b.n	8004578 <HAL_SPI_TransmitReceive+0x41e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004188:	f7fd fcc0 	bl	8001b0c <HAL_GetTick>
 800418c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004194:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041a4:	7efb      	ldrb	r3, [r7, #27]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d00e      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x6e>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x66>
 80041ba:	7efb      	ldrb	r3, [r7, #27]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d003      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041c6:	e1cd      	b.n	8004564 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_SPI_TransmitReceive+0x80>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_TransmitReceive+0x80>
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80041e0:	e1c0      	b.n	8004564 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	887a      	ldrh	r2, [r7, #2]
 8004206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	887a      	ldrh	r2, [r7, #2]
 800420e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	887a      	ldrh	r2, [r7, #2]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004238:	d802      	bhi.n	8004240 <HAL_SPI_TransmitReceive+0xe6>
 800423a:	8a3b      	ldrh	r3, [r7, #16]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d908      	bls.n	8004252 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	e007      	b.n	8004262 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d007      	beq.n	8004280 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004288:	d97c      	bls.n	8004384 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x13e>
 8004292:	8a7b      	ldrh	r3, [r7, #18]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d169      	bne.n	800436c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	1c9a      	adds	r2, r3, #2
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042bc:	e056      	b.n	800436c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d11b      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x1aa>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x1aa>
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d113      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d11c      	bne.n	800434c <HAL_SPI_TransmitReceive+0x1f2>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	b292      	uxth	r2, r2
 800432a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004348:	2301      	movs	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800434c:	f7fd fbde 	bl	8001b0c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004358:	429a      	cmp	r2, r3
 800435a:	d807      	bhi.n	800436c <HAL_SPI_TransmitReceive+0x212>
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d003      	beq.n	800436c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800436a:	e0fb      	b.n	8004564 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1a3      	bne.n	80042be <HAL_SPI_TransmitReceive+0x164>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d19d      	bne.n	80042be <HAL_SPI_TransmitReceive+0x164>
 8004382:	e0df      	b.n	8004544 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x23a>
 800438c:	8a7b      	ldrh	r3, [r7, #18]
 800438e:	2b01      	cmp	r3, #1
 8004390:	f040 80cb 	bne.w	800452a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d912      	bls.n	80043c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b02      	subs	r3, #2
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c2:	e0b2      	b.n	800452a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ea:	e09e      	b.n	800452a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d134      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x30a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02f      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x30a>
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12c      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d912      	bls.n	800443a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b02      	subs	r3, #2
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004438:	e012      	b.n	8004460 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d148      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x3aa>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d042      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d923      	bls.n	80044d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	b292      	uxth	r2, r2
 8004496:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b02      	subs	r3, #2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d81f      	bhi.n	8004500 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	e016      	b.n	8004500 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f103 020c 	add.w	r2, r3, #12
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004500:	2301      	movs	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004504:	f7fd fb02 	bl	8001b0c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004510:	429a      	cmp	r2, r3
 8004512:	d803      	bhi.n	800451c <HAL_SPI_TransmitReceive+0x3c2>
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d102      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x3c8>
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004528:	e01c      	b.n	8004564 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f af5b 	bne.w	80043ec <HAL_SPI_TransmitReceive+0x292>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	f47f af54 	bne.w	80043ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f937 	bl	80047bc <SPI_EndRxTxTransaction>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
 8004560:	e000      	b.n	8004564 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004578:	4618      	mov	r0, r3
 800457a:	3728      	adds	r7, #40	; 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004590:	f7fd fabc 	bl	8001b0c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045a0:	f7fd fab4 	bl	8001b0c <HAL_GetTick>
 80045a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	0d1b      	lsrs	r3, r3, #20
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	e054      	b.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d050      	beq.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045c0:	f7fd faa4 	bl	8001b0c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d902      	bls.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13d      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ee:	d111      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f8:	d004      	beq.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d107      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461c:	d10f      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800463c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e017      	b.n	8004682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3b01      	subs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d19b      	bne.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046a2:	f7fd fa33 	bl	8001b0c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	4413      	add	r3, r2
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046b2:	f7fd fa2b 	bl	8001b0c <HAL_GetTick>
 80046b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046c0:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00da      	lsls	r2, r3, #3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	0d1b      	lsrs	r3, r3, #20
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046d8:	e060      	b.n	800479c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046e0:	d107      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d050      	beq.n	800479c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046fa:	f7fd fa07 	bl	8001b0c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	429a      	cmp	r2, r3
 8004708:	d902      	bls.n	8004710 <SPI_WaitFifoStateUntilTimeout+0x80>
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d13d      	bne.n	800478c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004728:	d111      	bne.n	800474e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d004      	beq.n	800473e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d107      	bne.n	800474e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	d10f      	bne.n	8004778 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004776:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e010      	b.n	80047ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	3b01      	subs	r3, #1
 800479a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d196      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3728      	adds	r7, #40	; 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000000 	.word	0x20000000

080047bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ff5b 	bl	8004690 <SPI_WaitFifoStateUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e027      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fec0 	bl	8004580 <SPI_WaitFlagStateUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e014      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff34 	bl	8004690 <SPI_WaitFifoStateUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e000      	b.n	8004840 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e049      	b.n	80048ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc ff30 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 f95c 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e040      	b.n	8004992 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_TIM_Base_Start_IT+0xa8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x58>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d009      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x58>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <HAL_TIM_Base_Start_IT+0xac>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x58>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d115      	bne.n	800497c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <HAL_TIM_Base_Start_IT+0xb4>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d015      	beq.n	800498e <HAL_TIM_Base_Start_IT+0x96>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d011      	beq.n	800498e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	e008      	b.n	800498e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e000      	b.n	8004990 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b6      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x18a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a08:	d03e      	beq.n	8004a88 <HAL_TIM_ConfigClockSource+0xd8>
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	f200 8087 	bhi.w	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a16:	f000 8086 	beq.w	8004b26 <HAL_TIM_ConfigClockSource+0x176>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d87f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d01a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0xaa>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d87b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d050      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x11e>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d877      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d03c      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xfe>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d873      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d058      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x13e>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d86f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d064      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15e>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d86b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d060      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15e>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d867      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05c      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15e>
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d05a      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x15e>
 8004a58:	e062      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6899      	ldr	r1, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f000 f95d 	bl	8004d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	609a      	str	r2, [r3, #8]
      break;
 8004a86:	e04f      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6899      	ldr	r1, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f000 f946 	bl	8004d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aaa:	609a      	str	r2, [r3, #8]
      break;
 8004aac:	e03c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f8ba 	bl	8004c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2150      	movs	r1, #80	; 0x50
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f913 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e02c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 f8d9 	bl	8004c92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2160      	movs	r1, #96	; 0x60
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f903 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e01c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 f89a 	bl	8004c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2140      	movs	r1, #64	; 0x40
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f8f3 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e00c      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 f8ea 	bl	8004cf2 <TIM_ITRx_SetConfig>
      break;
 8004b1e:	e003      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e000      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x28>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x28>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	; (8004c24 <TIM_Base_SetConfig+0xe0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <TIM_Base_SetConfig+0xe0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x6a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <TIM_Base_SetConfig+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <TIM_Base_SetConfig+0xe4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <TIM_Base_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0xc0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <TIM_Base_SetConfig+0xec>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800

08004c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 030a 	bic.w	r3, r3, #10
 8004c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0210 	bic.w	r2, r3, #16
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f043 0307 	orr.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e054      	b.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de8:	d009      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40014000 	.word	0x40014000

08004e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e040      	b.n	8004ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fc54 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f82c 	bl	8004ee0 <UART_SetConfig>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e022      	b.n	8004ed8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f956 	bl	800514c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f9dd 	bl	8005290 <UART_CheckIdleState>
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b8a      	ldr	r3, [pc, #552]	; (8005134 <UART_SetConfig+0x254>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a78      	ldr	r2, [pc, #480]	; (8005138 <UART_SetConfig+0x258>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d120      	bne.n	8004f9e <UART_SetConfig+0xbe>
 8004f5c:	4b77      	ldr	r3, [pc, #476]	; (800513c <UART_SetConfig+0x25c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d817      	bhi.n	8004f98 <UART_SetConfig+0xb8>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0x90>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f93 	.word	0x08004f93
 8004f7c:	08004f87 	.word	0x08004f87
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e01d      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e01a      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e017      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e014      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e011      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a67      	ldr	r2, [pc, #412]	; (8005140 <UART_SetConfig+0x260>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d102      	bne.n	8004fae <UART_SetConfig+0xce>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a64      	ldr	r2, [pc, #400]	; (8005144 <UART_SetConfig+0x264>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d102      	bne.n	8004fbe <UART_SetConfig+0xde>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e001      	b.n	8004fc2 <UART_SetConfig+0xe2>
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d15b      	bne.n	8005084 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004fcc:	7ffb      	ldrb	r3, [r7, #31]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d827      	bhi.n	8005022 <UART_SetConfig+0x142>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0xf8>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	08005023 	.word	0x08005023
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005023 	.word	0x08005023
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe fea0 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005000:	61b8      	str	r0, [r7, #24]
        break;
 8005002:	e013      	b.n	800502c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7fe febe 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8005008:	61b8      	str	r0, [r7, #24]
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <UART_SetConfig+0x268>)
 800500e:	61bb      	str	r3, [r7, #24]
        break;
 8005010:	e00c      	b.n	800502c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fe fe1f 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8005016:	61b8      	str	r0, [r7, #24]
        break;
 8005018:	e008      	b.n	800502c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	61bb      	str	r3, [r7, #24]
        break;
 8005020:	e004      	b.n	800502c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	77bb      	strb	r3, [r7, #30]
        break;
 800502a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d074      	beq.n	800511c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	005a      	lsls	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b0f      	cmp	r3, #15
 800504e:	d916      	bls.n	800507e <UART_SetConfig+0x19e>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d212      	bcs.n	800507e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	b29b      	uxth	r3, r3
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	b29a      	uxth	r2, r3
 800506e:	89fb      	ldrh	r3, [r7, #14]
 8005070:	4313      	orrs	r3, r2
 8005072:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	89fa      	ldrh	r2, [r7, #14]
 800507a:	60da      	str	r2, [r3, #12]
 800507c:	e04e      	b.n	800511c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	77bb      	strb	r3, [r7, #30]
 8005082:	e04b      	b.n	800511c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005084:	7ffb      	ldrb	r3, [r7, #31]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d827      	bhi.n	80050da <UART_SetConfig+0x1fa>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x1b0>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050db 	.word	0x080050db
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050d3 	.word	0x080050d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fe fe44 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 80050b8:	61b8      	str	r0, [r7, #24]
        break;
 80050ba:	e013      	b.n	80050e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050bc:	f7fe fe62 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 80050c0:	61b8      	str	r0, [r7, #24]
        break;
 80050c2:	e00f      	b.n	80050e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <UART_SetConfig+0x268>)
 80050c6:	61bb      	str	r3, [r7, #24]
        break;
 80050c8:	e00c      	b.n	80050e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fe fdc3 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 80050ce:	61b8      	str	r0, [r7, #24]
        break;
 80050d0:	e008      	b.n	80050e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	61bb      	str	r3, [r7, #24]
        break;
 80050d8:	e004      	b.n	80050e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	77bb      	strb	r3, [r7, #30]
        break;
 80050e2:	bf00      	nop
    }

    if (pclk != 0U)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	085a      	lsrs	r2, r3, #1
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b0f      	cmp	r3, #15
 8005104:	d908      	bls.n	8005118 <UART_SetConfig+0x238>
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	d204      	bcs.n	8005118 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	e001      	b.n	800511c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005128:	7fbb      	ldrb	r3, [r7, #30]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	efff69f3 	.word	0xefff69f3
 8005138:	40013800 	.word	0x40013800
 800513c:	40021000 	.word	0x40021000
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	007a1200 	.word	0x007a1200

0800514c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01a      	beq.n	8005262 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524a:	d10a      	bne.n	8005262 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a0:	f7fc fc34 	bl	8001b0c <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d10e      	bne.n	80052d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f82d 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e023      	b.n	800531a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d10e      	bne.n	80052fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f817 	bl	8005322 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00d      	b.n	800531a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b09c      	sub	sp, #112	; 0x70
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005332:	e0a5      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	f000 80a1 	beq.w	8005480 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fc fbe5 	bl	8001b0c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <UART_WaitOnFlagUntilTimeout+0x32>
 800534e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005350:	2b00      	cmp	r3, #0
 8005352:	d13e      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005368:	667b      	str	r3, [r7, #100]	; 0x64
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005374:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e067      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d04f      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ee:	d147      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800540e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	613b      	str	r3, [r7, #16]
   return(result);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	66bb      	str	r3, [r7, #104]	; 0x68
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800544c:	623a      	str	r2, [r7, #32]
 800544e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	69f9      	ldr	r1, [r7, #28]
 8005452:	6a3a      	ldr	r2, [r7, #32]
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	61bb      	str	r3, [r7, #24]
   return(result);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e010      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	429a      	cmp	r2, r3
 800549c:	f43f af4a 	beq.w	8005334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3770      	adds	r7, #112	; 0x70
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <__errno>:
 80054ac:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <__errno+0x8>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000000c 	.word	0x2000000c

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f002 fd0a 	bl	8007ee4 <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	0800835c 	.word	0x0800835c
 80054f4:	0800835c 	.word	0x0800835c
 80054f8:	0800835c 	.word	0x0800835c
 80054fc:	08008360 	.word	0x08008360

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <__cvt>:
 8005510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	ec55 4b10 	vmov	r4, r5, d0
 8005518:	2d00      	cmp	r5, #0
 800551a:	460e      	mov	r6, r1
 800551c:	4619      	mov	r1, r3
 800551e:	462b      	mov	r3, r5
 8005520:	bfbb      	ittet	lt
 8005522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005526:	461d      	movlt	r5, r3
 8005528:	2300      	movge	r3, #0
 800552a:	232d      	movlt	r3, #45	; 0x2d
 800552c:	700b      	strb	r3, [r1, #0]
 800552e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005534:	4691      	mov	r9, r2
 8005536:	f023 0820 	bic.w	r8, r3, #32
 800553a:	bfbc      	itt	lt
 800553c:	4622      	movlt	r2, r4
 800553e:	4614      	movlt	r4, r2
 8005540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005544:	d005      	beq.n	8005552 <__cvt+0x42>
 8005546:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800554a:	d100      	bne.n	800554e <__cvt+0x3e>
 800554c:	3601      	adds	r6, #1
 800554e:	2102      	movs	r1, #2
 8005550:	e000      	b.n	8005554 <__cvt+0x44>
 8005552:	2103      	movs	r1, #3
 8005554:	ab03      	add	r3, sp, #12
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	ab02      	add	r3, sp, #8
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	ec45 4b10 	vmov	d0, r4, r5
 8005560:	4653      	mov	r3, sl
 8005562:	4632      	mov	r2, r6
 8005564:	f000 fce4 	bl	8005f30 <_dtoa_r>
 8005568:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800556c:	4607      	mov	r7, r0
 800556e:	d102      	bne.n	8005576 <__cvt+0x66>
 8005570:	f019 0f01 	tst.w	r9, #1
 8005574:	d022      	beq.n	80055bc <__cvt+0xac>
 8005576:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800557a:	eb07 0906 	add.w	r9, r7, r6
 800557e:	d110      	bne.n	80055a2 <__cvt+0x92>
 8005580:	783b      	ldrb	r3, [r7, #0]
 8005582:	2b30      	cmp	r3, #48	; 0x30
 8005584:	d10a      	bne.n	800559c <__cvt+0x8c>
 8005586:	2200      	movs	r2, #0
 8005588:	2300      	movs	r3, #0
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	f7fb fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005592:	b918      	cbnz	r0, 800559c <__cvt+0x8c>
 8005594:	f1c6 0601 	rsb	r6, r6, #1
 8005598:	f8ca 6000 	str.w	r6, [sl]
 800559c:	f8da 3000 	ldr.w	r3, [sl]
 80055a0:	4499      	add	r9, r3
 80055a2:	2200      	movs	r2, #0
 80055a4:	2300      	movs	r3, #0
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fb fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ae:	b108      	cbz	r0, 80055b4 <__cvt+0xa4>
 80055b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80055b4:	2230      	movs	r2, #48	; 0x30
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	454b      	cmp	r3, r9
 80055ba:	d307      	bcc.n	80055cc <__cvt+0xbc>
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055c0:	1bdb      	subs	r3, r3, r7
 80055c2:	4638      	mov	r0, r7
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	b004      	add	sp, #16
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	9103      	str	r1, [sp, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e7f0      	b.n	80055b6 <__cvt+0xa6>

080055d4 <__exponent>:
 80055d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d6:	4603      	mov	r3, r0
 80055d8:	2900      	cmp	r1, #0
 80055da:	bfb8      	it	lt
 80055dc:	4249      	neglt	r1, r1
 80055de:	f803 2b02 	strb.w	r2, [r3], #2
 80055e2:	bfb4      	ite	lt
 80055e4:	222d      	movlt	r2, #45	; 0x2d
 80055e6:	222b      	movge	r2, #43	; 0x2b
 80055e8:	2909      	cmp	r1, #9
 80055ea:	7042      	strb	r2, [r0, #1]
 80055ec:	dd2a      	ble.n	8005644 <__exponent+0x70>
 80055ee:	f10d 0407 	add.w	r4, sp, #7
 80055f2:	46a4      	mov	ip, r4
 80055f4:	270a      	movs	r7, #10
 80055f6:	46a6      	mov	lr, r4
 80055f8:	460a      	mov	r2, r1
 80055fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80055fe:	fb07 1516 	mls	r5, r7, r6, r1
 8005602:	3530      	adds	r5, #48	; 0x30
 8005604:	2a63      	cmp	r2, #99	; 0x63
 8005606:	f104 34ff 	add.w	r4, r4, #4294967295
 800560a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800560e:	4631      	mov	r1, r6
 8005610:	dcf1      	bgt.n	80055f6 <__exponent+0x22>
 8005612:	3130      	adds	r1, #48	; 0x30
 8005614:	f1ae 0502 	sub.w	r5, lr, #2
 8005618:	f804 1c01 	strb.w	r1, [r4, #-1]
 800561c:	1c44      	adds	r4, r0, #1
 800561e:	4629      	mov	r1, r5
 8005620:	4561      	cmp	r1, ip
 8005622:	d30a      	bcc.n	800563a <__exponent+0x66>
 8005624:	f10d 0209 	add.w	r2, sp, #9
 8005628:	eba2 020e 	sub.w	r2, r2, lr
 800562c:	4565      	cmp	r5, ip
 800562e:	bf88      	it	hi
 8005630:	2200      	movhi	r2, #0
 8005632:	4413      	add	r3, r2
 8005634:	1a18      	subs	r0, r3, r0
 8005636:	b003      	add	sp, #12
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800563e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005642:	e7ed      	b.n	8005620 <__exponent+0x4c>
 8005644:	2330      	movs	r3, #48	; 0x30
 8005646:	3130      	adds	r1, #48	; 0x30
 8005648:	7083      	strb	r3, [r0, #2]
 800564a:	70c1      	strb	r1, [r0, #3]
 800564c:	1d03      	adds	r3, r0, #4
 800564e:	e7f1      	b.n	8005634 <__exponent+0x60>

08005650 <_printf_float>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	ed2d 8b02 	vpush	{d8}
 8005658:	b08d      	sub	sp, #52	; 0x34
 800565a:	460c      	mov	r4, r1
 800565c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005660:	4616      	mov	r6, r2
 8005662:	461f      	mov	r7, r3
 8005664:	4605      	mov	r5, r0
 8005666:	f001 fb45 	bl	8006cf4 <_localeconv_r>
 800566a:	f8d0 a000 	ldr.w	sl, [r0]
 800566e:	4650      	mov	r0, sl
 8005670:	f7fa fdae 	bl	80001d0 <strlen>
 8005674:	2300      	movs	r3, #0
 8005676:	930a      	str	r3, [sp, #40]	; 0x28
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f8d8 3000 	ldr.w	r3, [r8]
 8005680:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005684:	3307      	adds	r3, #7
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	f103 0208 	add.w	r2, r3, #8
 800568e:	f8c8 2000 	str.w	r2, [r8]
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800569a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800569e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80056a8:	ee08 0a10 	vmov	s16, r0
 80056ac:	4b9f      	ldr	r3, [pc, #636]	; (800592c <_printf_float+0x2dc>)
 80056ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295
 80056b6:	f7fb fa39 	bl	8000b2c <__aeabi_dcmpun>
 80056ba:	bb88      	cbnz	r0, 8005720 <_printf_float+0xd0>
 80056bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056c0:	4b9a      	ldr	r3, [pc, #616]	; (800592c <_printf_float+0x2dc>)
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	f7fb fa13 	bl	8000af0 <__aeabi_dcmple>
 80056ca:	bb48      	cbnz	r0, 8005720 <_printf_float+0xd0>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fb fa02 	bl	8000adc <__aeabi_dcmplt>
 80056d8:	b110      	cbz	r0, 80056e0 <_printf_float+0x90>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e0:	4b93      	ldr	r3, [pc, #588]	; (8005930 <_printf_float+0x2e0>)
 80056e2:	4894      	ldr	r0, [pc, #592]	; (8005934 <_printf_float+0x2e4>)
 80056e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056e8:	bf94      	ite	ls
 80056ea:	4698      	movls	r8, r3
 80056ec:	4680      	movhi	r8, r0
 80056ee:	2303      	movs	r3, #3
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	f023 0204 	bic.w	r2, r3, #4
 80056f8:	6022      	str	r2, [r4, #0]
 80056fa:	f04f 0900 	mov.w	r9, #0
 80056fe:	9700      	str	r7, [sp, #0]
 8005700:	4633      	mov	r3, r6
 8005702:	aa0b      	add	r2, sp, #44	; 0x2c
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f9d8 	bl	8005abc <_printf_common>
 800570c:	3001      	adds	r0, #1
 800570e:	f040 8090 	bne.w	8005832 <_printf_float+0x1e2>
 8005712:	f04f 30ff 	mov.w	r0, #4294967295
 8005716:	b00d      	add	sp, #52	; 0x34
 8005718:	ecbd 8b02 	vpop	{d8}
 800571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	4640      	mov	r0, r8
 8005726:	4649      	mov	r1, r9
 8005728:	f7fb fa00 	bl	8000b2c <__aeabi_dcmpun>
 800572c:	b140      	cbz	r0, 8005740 <_printf_float+0xf0>
 800572e:	464b      	mov	r3, r9
 8005730:	2b00      	cmp	r3, #0
 8005732:	bfbc      	itt	lt
 8005734:	232d      	movlt	r3, #45	; 0x2d
 8005736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800573a:	487f      	ldr	r0, [pc, #508]	; (8005938 <_printf_float+0x2e8>)
 800573c:	4b7f      	ldr	r3, [pc, #508]	; (800593c <_printf_float+0x2ec>)
 800573e:	e7d1      	b.n	80056e4 <_printf_float+0x94>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005746:	9206      	str	r2, [sp, #24]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	d13f      	bne.n	80057cc <_printf_float+0x17c>
 800574c:	2306      	movs	r3, #6
 800574e:	6063      	str	r3, [r4, #4]
 8005750:	9b05      	ldr	r3, [sp, #20]
 8005752:	6861      	ldr	r1, [r4, #4]
 8005754:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005758:	2300      	movs	r3, #0
 800575a:	9303      	str	r3, [sp, #12]
 800575c:	ab0a      	add	r3, sp, #40	; 0x28
 800575e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005762:	ab09      	add	r3, sp, #36	; 0x24
 8005764:	ec49 8b10 	vmov	d0, r8, r9
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6022      	str	r2, [r4, #0]
 800576c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005770:	4628      	mov	r0, r5
 8005772:	f7ff fecd 	bl	8005510 <__cvt>
 8005776:	9b06      	ldr	r3, [sp, #24]
 8005778:	9909      	ldr	r1, [sp, #36]	; 0x24
 800577a:	2b47      	cmp	r3, #71	; 0x47
 800577c:	4680      	mov	r8, r0
 800577e:	d108      	bne.n	8005792 <_printf_float+0x142>
 8005780:	1cc8      	adds	r0, r1, #3
 8005782:	db02      	blt.n	800578a <_printf_float+0x13a>
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	4299      	cmp	r1, r3
 8005788:	dd41      	ble.n	800580e <_printf_float+0x1be>
 800578a:	f1ab 0b02 	sub.w	fp, fp, #2
 800578e:	fa5f fb8b 	uxtb.w	fp, fp
 8005792:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005796:	d820      	bhi.n	80057da <_printf_float+0x18a>
 8005798:	3901      	subs	r1, #1
 800579a:	465a      	mov	r2, fp
 800579c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057a0:	9109      	str	r1, [sp, #36]	; 0x24
 80057a2:	f7ff ff17 	bl	80055d4 <__exponent>
 80057a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a8:	1813      	adds	r3, r2, r0
 80057aa:	2a01      	cmp	r2, #1
 80057ac:	4681      	mov	r9, r0
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	dc02      	bgt.n	80057b8 <_printf_float+0x168>
 80057b2:	6822      	ldr	r2, [r4, #0]
 80057b4:	07d2      	lsls	r2, r2, #31
 80057b6:	d501      	bpl.n	80057bc <_printf_float+0x16c>
 80057b8:	3301      	adds	r3, #1
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d09c      	beq.n	80056fe <_printf_float+0xae>
 80057c4:	232d      	movs	r3, #45	; 0x2d
 80057c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ca:	e798      	b.n	80056fe <_printf_float+0xae>
 80057cc:	9a06      	ldr	r2, [sp, #24]
 80057ce:	2a47      	cmp	r2, #71	; 0x47
 80057d0:	d1be      	bne.n	8005750 <_printf_float+0x100>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1bc      	bne.n	8005750 <_printf_float+0x100>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e7b9      	b.n	800574e <_printf_float+0xfe>
 80057da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057de:	d118      	bne.n	8005812 <_printf_float+0x1c2>
 80057e0:	2900      	cmp	r1, #0
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	dd0b      	ble.n	80057fe <_printf_float+0x1ae>
 80057e6:	6121      	str	r1, [r4, #16]
 80057e8:	b913      	cbnz	r3, 80057f0 <_printf_float+0x1a0>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	07d0      	lsls	r0, r2, #31
 80057ee:	d502      	bpl.n	80057f6 <_printf_float+0x1a6>
 80057f0:	3301      	adds	r3, #1
 80057f2:	440b      	add	r3, r1
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80057f8:	f04f 0900 	mov.w	r9, #0
 80057fc:	e7de      	b.n	80057bc <_printf_float+0x16c>
 80057fe:	b913      	cbnz	r3, 8005806 <_printf_float+0x1b6>
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	07d2      	lsls	r2, r2, #31
 8005804:	d501      	bpl.n	800580a <_printf_float+0x1ba>
 8005806:	3302      	adds	r3, #2
 8005808:	e7f4      	b.n	80057f4 <_printf_float+0x1a4>
 800580a:	2301      	movs	r3, #1
 800580c:	e7f2      	b.n	80057f4 <_printf_float+0x1a4>
 800580e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005814:	4299      	cmp	r1, r3
 8005816:	db05      	blt.n	8005824 <_printf_float+0x1d4>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	6121      	str	r1, [r4, #16]
 800581c:	07d8      	lsls	r0, r3, #31
 800581e:	d5ea      	bpl.n	80057f6 <_printf_float+0x1a6>
 8005820:	1c4b      	adds	r3, r1, #1
 8005822:	e7e7      	b.n	80057f4 <_printf_float+0x1a4>
 8005824:	2900      	cmp	r1, #0
 8005826:	bfd4      	ite	le
 8005828:	f1c1 0202 	rsble	r2, r1, #2
 800582c:	2201      	movgt	r2, #1
 800582e:	4413      	add	r3, r2
 8005830:	e7e0      	b.n	80057f4 <_printf_float+0x1a4>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	055a      	lsls	r2, r3, #21
 8005836:	d407      	bmi.n	8005848 <_printf_float+0x1f8>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	4642      	mov	r2, r8
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	47b8      	blx	r7
 8005842:	3001      	adds	r0, #1
 8005844:	d12c      	bne.n	80058a0 <_printf_float+0x250>
 8005846:	e764      	b.n	8005712 <_printf_float+0xc2>
 8005848:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800584c:	f240 80e0 	bls.w	8005a10 <_printf_float+0x3c0>
 8005850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005854:	2200      	movs	r2, #0
 8005856:	2300      	movs	r3, #0
 8005858:	f7fb f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800585c:	2800      	cmp	r0, #0
 800585e:	d034      	beq.n	80058ca <_printf_float+0x27a>
 8005860:	4a37      	ldr	r2, [pc, #220]	; (8005940 <_printf_float+0x2f0>)
 8005862:	2301      	movs	r3, #1
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	f43f af51 	beq.w	8005712 <_printf_float+0xc2>
 8005870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005874:	429a      	cmp	r2, r3
 8005876:	db02      	blt.n	800587e <_printf_float+0x22e>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07d8      	lsls	r0, r3, #31
 800587c:	d510      	bpl.n	80058a0 <_printf_float+0x250>
 800587e:	ee18 3a10 	vmov	r3, s16
 8005882:	4652      	mov	r2, sl
 8005884:	4631      	mov	r1, r6
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	f43f af41 	beq.w	8005712 <_printf_float+0xc2>
 8005890:	f04f 0800 	mov.w	r8, #0
 8005894:	f104 091a 	add.w	r9, r4, #26
 8005898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589a:	3b01      	subs	r3, #1
 800589c:	4543      	cmp	r3, r8
 800589e:	dc09      	bgt.n	80058b4 <_printf_float+0x264>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	079b      	lsls	r3, r3, #30
 80058a4:	f100 8105 	bmi.w	8005ab2 <_printf_float+0x462>
 80058a8:	68e0      	ldr	r0, [r4, #12]
 80058aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ac:	4298      	cmp	r0, r3
 80058ae:	bfb8      	it	lt
 80058b0:	4618      	movlt	r0, r3
 80058b2:	e730      	b.n	8005716 <_printf_float+0xc6>
 80058b4:	2301      	movs	r3, #1
 80058b6:	464a      	mov	r2, r9
 80058b8:	4631      	mov	r1, r6
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b8      	blx	r7
 80058be:	3001      	adds	r0, #1
 80058c0:	f43f af27 	beq.w	8005712 <_printf_float+0xc2>
 80058c4:	f108 0801 	add.w	r8, r8, #1
 80058c8:	e7e6      	b.n	8005898 <_printf_float+0x248>
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc39      	bgt.n	8005944 <_printf_float+0x2f4>
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <_printf_float+0x2f0>)
 80058d2:	2301      	movs	r3, #1
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f af19 	beq.w	8005712 <_printf_float+0xc2>
 80058e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d102      	bne.n	80058ee <_printf_float+0x29e>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	07d9      	lsls	r1, r3, #31
 80058ec:	d5d8      	bpl.n	80058a0 <_printf_float+0x250>
 80058ee:	ee18 3a10 	vmov	r3, s16
 80058f2:	4652      	mov	r2, sl
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f af09 	beq.w	8005712 <_printf_float+0xc2>
 8005900:	f04f 0900 	mov.w	r9, #0
 8005904:	f104 0a1a 	add.w	sl, r4, #26
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	425b      	negs	r3, r3
 800590c:	454b      	cmp	r3, r9
 800590e:	dc01      	bgt.n	8005914 <_printf_float+0x2c4>
 8005910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005912:	e792      	b.n	800583a <_printf_float+0x1ea>
 8005914:	2301      	movs	r3, #1
 8005916:	4652      	mov	r2, sl
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f aef7 	beq.w	8005712 <_printf_float+0xc2>
 8005924:	f109 0901 	add.w	r9, r9, #1
 8005928:	e7ee      	b.n	8005908 <_printf_float+0x2b8>
 800592a:	bf00      	nop
 800592c:	7fefffff 	.word	0x7fefffff
 8005930:	08007f7c 	.word	0x08007f7c
 8005934:	08007f80 	.word	0x08007f80
 8005938:	08007f88 	.word	0x08007f88
 800593c:	08007f84 	.word	0x08007f84
 8005940:	08007f8c 	.word	0x08007f8c
 8005944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005948:	429a      	cmp	r2, r3
 800594a:	bfa8      	it	ge
 800594c:	461a      	movge	r2, r3
 800594e:	2a00      	cmp	r2, #0
 8005950:	4691      	mov	r9, r2
 8005952:	dc37      	bgt.n	80059c4 <_printf_float+0x374>
 8005954:	f04f 0b00 	mov.w	fp, #0
 8005958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800595c:	f104 021a 	add.w	r2, r4, #26
 8005960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	eba3 0309 	sub.w	r3, r3, r9
 8005968:	455b      	cmp	r3, fp
 800596a:	dc33      	bgt.n	80059d4 <_printf_float+0x384>
 800596c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005970:	429a      	cmp	r2, r3
 8005972:	db3b      	blt.n	80059ec <_printf_float+0x39c>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	07da      	lsls	r2, r3, #31
 8005978:	d438      	bmi.n	80059ec <_printf_float+0x39c>
 800597a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800597c:	9b05      	ldr	r3, [sp, #20]
 800597e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	eba2 0901 	sub.w	r9, r2, r1
 8005986:	4599      	cmp	r9, r3
 8005988:	bfa8      	it	ge
 800598a:	4699      	movge	r9, r3
 800598c:	f1b9 0f00 	cmp.w	r9, #0
 8005990:	dc35      	bgt.n	80059fe <_printf_float+0x3ae>
 8005992:	f04f 0800 	mov.w	r8, #0
 8005996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800599a:	f104 0a1a 	add.w	sl, r4, #26
 800599e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	eba3 0309 	sub.w	r3, r3, r9
 80059a8:	4543      	cmp	r3, r8
 80059aa:	f77f af79 	ble.w	80058a0 <_printf_float+0x250>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4652      	mov	r2, sl
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f aeaa 	beq.w	8005712 <_printf_float+0xc2>
 80059be:	f108 0801 	add.w	r8, r8, #1
 80059c2:	e7ec      	b.n	800599e <_printf_float+0x34e>
 80059c4:	4613      	mov	r3, r2
 80059c6:	4631      	mov	r1, r6
 80059c8:	4642      	mov	r2, r8
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	3001      	adds	r0, #1
 80059d0:	d1c0      	bne.n	8005954 <_printf_float+0x304>
 80059d2:	e69e      	b.n	8005712 <_printf_float+0xc2>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	9205      	str	r2, [sp, #20]
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f ae97 	beq.w	8005712 <_printf_float+0xc2>
 80059e4:	9a05      	ldr	r2, [sp, #20]
 80059e6:	f10b 0b01 	add.w	fp, fp, #1
 80059ea:	e7b9      	b.n	8005960 <_printf_float+0x310>
 80059ec:	ee18 3a10 	vmov	r3, s16
 80059f0:	4652      	mov	r2, sl
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	d1be      	bne.n	800597a <_printf_float+0x32a>
 80059fc:	e689      	b.n	8005712 <_printf_float+0xc2>
 80059fe:	9a05      	ldr	r2, [sp, #20]
 8005a00:	464b      	mov	r3, r9
 8005a02:	4442      	add	r2, r8
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b8      	blx	r7
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d1c1      	bne.n	8005992 <_printf_float+0x342>
 8005a0e:	e680      	b.n	8005712 <_printf_float+0xc2>
 8005a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a12:	2a01      	cmp	r2, #1
 8005a14:	dc01      	bgt.n	8005a1a <_printf_float+0x3ca>
 8005a16:	07db      	lsls	r3, r3, #31
 8005a18:	d538      	bpl.n	8005a8c <_printf_float+0x43c>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f ae74 	beq.w	8005712 <_printf_float+0xc2>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f ae6b 	beq.w	8005712 <_printf_float+0xc2>
 8005a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a40:	2200      	movs	r2, #0
 8005a42:	2300      	movs	r3, #0
 8005a44:	f7fb f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a48:	b9d8      	cbnz	r0, 8005a82 <_printf_float+0x432>
 8005a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4c:	f108 0201 	add.w	r2, r8, #1
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4631      	mov	r1, r6
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b8      	blx	r7
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d10e      	bne.n	8005a7a <_printf_float+0x42a>
 8005a5c:	e659      	b.n	8005712 <_printf_float+0xc2>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4652      	mov	r2, sl
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f43f ae52 	beq.w	8005712 <_printf_float+0xc2>
 8005a6e:	f108 0801 	add.w	r8, r8, #1
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4543      	cmp	r3, r8
 8005a78:	dcf1      	bgt.n	8005a5e <_printf_float+0x40e>
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a80:	e6dc      	b.n	800583c <_printf_float+0x1ec>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	f104 0a1a 	add.w	sl, r4, #26
 8005a8a:	e7f2      	b.n	8005a72 <_printf_float+0x422>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4642      	mov	r2, r8
 8005a90:	e7df      	b.n	8005a52 <_printf_float+0x402>
 8005a92:	2301      	movs	r3, #1
 8005a94:	464a      	mov	r2, r9
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f ae38 	beq.w	8005712 <_printf_float+0xc2>
 8005aa2:	f108 0801 	add.w	r8, r8, #1
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aaa:	1a5b      	subs	r3, r3, r1
 8005aac:	4543      	cmp	r3, r8
 8005aae:	dcf0      	bgt.n	8005a92 <_printf_float+0x442>
 8005ab0:	e6fa      	b.n	80058a8 <_printf_float+0x258>
 8005ab2:	f04f 0800 	mov.w	r8, #0
 8005ab6:	f104 0919 	add.w	r9, r4, #25
 8005aba:	e7f4      	b.n	8005aa6 <_printf_float+0x456>

08005abc <_printf_common>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	688a      	ldr	r2, [r1, #8]
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bfb8      	it	lt
 8005ad0:	4613      	movlt	r3, r2
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad8:	4607      	mov	r7, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b10a      	cbz	r2, 8005ae2 <_printf_common+0x26>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	0699      	lsls	r1, r3, #26
 8005ae6:	bf42      	ittt	mi
 8005ae8:	6833      	ldrmi	r3, [r6, #0]
 8005aea:	3302      	addmi	r3, #2
 8005aec:	6033      	strmi	r3, [r6, #0]
 8005aee:	6825      	ldr	r5, [r4, #0]
 8005af0:	f015 0506 	ands.w	r5, r5, #6
 8005af4:	d106      	bne.n	8005b04 <_printf_common+0x48>
 8005af6:	f104 0a19 	add.w	sl, r4, #25
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	6832      	ldr	r2, [r6, #0]
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dc26      	bgt.n	8005b52 <_printf_common+0x96>
 8005b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b08:	1e13      	subs	r3, r2, #0
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	bf18      	it	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	0692      	lsls	r2, r2, #26
 8005b12:	d42b      	bmi.n	8005b6c <_printf_common+0xb0>
 8005b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c0      	blx	r8
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d01e      	beq.n	8005b60 <_printf_common+0xa4>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	68e5      	ldr	r5, [r4, #12]
 8005b26:	6832      	ldr	r2, [r6, #0]
 8005b28:	f003 0306 	and.w	r3, r3, #6
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	bf08      	it	eq
 8005b30:	1aad      	subeq	r5, r5, r2
 8005b32:	68a3      	ldr	r3, [r4, #8]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	bf0c      	ite	eq
 8005b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b3c:	2500      	movne	r5, #0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bfc4      	itt	gt
 8005b42:	1a9b      	subgt	r3, r3, r2
 8005b44:	18ed      	addgt	r5, r5, r3
 8005b46:	2600      	movs	r6, #0
 8005b48:	341a      	adds	r4, #26
 8005b4a:	42b5      	cmp	r5, r6
 8005b4c:	d11a      	bne.n	8005b84 <_printf_common+0xc8>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e008      	b.n	8005b64 <_printf_common+0xa8>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4652      	mov	r2, sl
 8005b56:	4649      	mov	r1, r9
 8005b58:	4638      	mov	r0, r7
 8005b5a:	47c0      	blx	r8
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d103      	bne.n	8005b68 <_printf_common+0xac>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	3501      	adds	r5, #1
 8005b6a:	e7c6      	b.n	8005afa <_printf_common+0x3e>
 8005b6c:	18e1      	adds	r1, r4, r3
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	2030      	movs	r0, #48	; 0x30
 8005b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b76:	4422      	add	r2, r4
 8005b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b80:	3302      	adds	r3, #2
 8005b82:	e7c7      	b.n	8005b14 <_printf_common+0x58>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4622      	mov	r2, r4
 8005b88:	4649      	mov	r1, r9
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	47c0      	blx	r8
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d0e6      	beq.n	8005b60 <_printf_common+0xa4>
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7d9      	b.n	8005b4a <_printf_common+0x8e>
	...

08005b98 <_printf_i>:
 8005b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	4691      	mov	r9, r2
 8005ba0:	7e27      	ldrb	r7, [r4, #24]
 8005ba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ba4:	2f78      	cmp	r7, #120	; 0x78
 8005ba6:	4680      	mov	r8, r0
 8005ba8:	469a      	mov	sl, r3
 8005baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bae:	d807      	bhi.n	8005bc0 <_printf_i+0x28>
 8005bb0:	2f62      	cmp	r7, #98	; 0x62
 8005bb2:	d80a      	bhi.n	8005bca <_printf_i+0x32>
 8005bb4:	2f00      	cmp	r7, #0
 8005bb6:	f000 80d8 	beq.w	8005d6a <_printf_i+0x1d2>
 8005bba:	2f58      	cmp	r7, #88	; 0x58
 8005bbc:	f000 80a3 	beq.w	8005d06 <_printf_i+0x16e>
 8005bc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc8:	e03a      	b.n	8005c40 <_printf_i+0xa8>
 8005bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bce:	2b15      	cmp	r3, #21
 8005bd0:	d8f6      	bhi.n	8005bc0 <_printf_i+0x28>
 8005bd2:	a001      	add	r0, pc, #4	; (adr r0, 8005bd8 <_printf_i+0x40>)
 8005bd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bd8:	08005c31 	.word	0x08005c31
 8005bdc:	08005c45 	.word	0x08005c45
 8005be0:	08005bc1 	.word	0x08005bc1
 8005be4:	08005bc1 	.word	0x08005bc1
 8005be8:	08005bc1 	.word	0x08005bc1
 8005bec:	08005bc1 	.word	0x08005bc1
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005bc1 	.word	0x08005bc1
 8005bf8:	08005bc1 	.word	0x08005bc1
 8005bfc:	08005bc1 	.word	0x08005bc1
 8005c00:	08005bc1 	.word	0x08005bc1
 8005c04:	08005d51 	.word	0x08005d51
 8005c08:	08005c75 	.word	0x08005c75
 8005c0c:	08005d33 	.word	0x08005d33
 8005c10:	08005bc1 	.word	0x08005bc1
 8005c14:	08005bc1 	.word	0x08005bc1
 8005c18:	08005d73 	.word	0x08005d73
 8005c1c:	08005bc1 	.word	0x08005bc1
 8005c20:	08005c75 	.word	0x08005c75
 8005c24:	08005bc1 	.word	0x08005bc1
 8005c28:	08005bc1 	.word	0x08005bc1
 8005c2c:	08005d3b 	.word	0x08005d3b
 8005c30:	680b      	ldr	r3, [r1, #0]
 8005c32:	1d1a      	adds	r2, r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	600a      	str	r2, [r1, #0]
 8005c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0a3      	b.n	8005d8c <_printf_i+0x1f4>
 8005c44:	6825      	ldr	r5, [r4, #0]
 8005c46:	6808      	ldr	r0, [r1, #0]
 8005c48:	062e      	lsls	r6, r5, #24
 8005c4a:	f100 0304 	add.w	r3, r0, #4
 8005c4e:	d50a      	bpl.n	8005c66 <_printf_i+0xce>
 8005c50:	6805      	ldr	r5, [r0, #0]
 8005c52:	600b      	str	r3, [r1, #0]
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	da03      	bge.n	8005c60 <_printf_i+0xc8>
 8005c58:	232d      	movs	r3, #45	; 0x2d
 8005c5a:	426d      	negs	r5, r5
 8005c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c60:	485e      	ldr	r0, [pc, #376]	; (8005ddc <_printf_i+0x244>)
 8005c62:	230a      	movs	r3, #10
 8005c64:	e019      	b.n	8005c9a <_printf_i+0x102>
 8005c66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c6a:	6805      	ldr	r5, [r0, #0]
 8005c6c:	600b      	str	r3, [r1, #0]
 8005c6e:	bf18      	it	ne
 8005c70:	b22d      	sxthne	r5, r5
 8005c72:	e7ef      	b.n	8005c54 <_printf_i+0xbc>
 8005c74:	680b      	ldr	r3, [r1, #0]
 8005c76:	6825      	ldr	r5, [r4, #0]
 8005c78:	1d18      	adds	r0, r3, #4
 8005c7a:	6008      	str	r0, [r1, #0]
 8005c7c:	0628      	lsls	r0, r5, #24
 8005c7e:	d501      	bpl.n	8005c84 <_printf_i+0xec>
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	e002      	b.n	8005c8a <_printf_i+0xf2>
 8005c84:	0669      	lsls	r1, r5, #25
 8005c86:	d5fb      	bpl.n	8005c80 <_printf_i+0xe8>
 8005c88:	881d      	ldrh	r5, [r3, #0]
 8005c8a:	4854      	ldr	r0, [pc, #336]	; (8005ddc <_printf_i+0x244>)
 8005c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c8e:	bf0c      	ite	eq
 8005c90:	2308      	moveq	r3, #8
 8005c92:	230a      	movne	r3, #10
 8005c94:	2100      	movs	r1, #0
 8005c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c9a:	6866      	ldr	r6, [r4, #4]
 8005c9c:	60a6      	str	r6, [r4, #8]
 8005c9e:	2e00      	cmp	r6, #0
 8005ca0:	bfa2      	ittt	ge
 8005ca2:	6821      	ldrge	r1, [r4, #0]
 8005ca4:	f021 0104 	bicge.w	r1, r1, #4
 8005ca8:	6021      	strge	r1, [r4, #0]
 8005caa:	b90d      	cbnz	r5, 8005cb0 <_printf_i+0x118>
 8005cac:	2e00      	cmp	r6, #0
 8005cae:	d04d      	beq.n	8005d4c <_printf_i+0x1b4>
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8005cba:	5dc7      	ldrb	r7, [r0, r7]
 8005cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cc0:	462f      	mov	r7, r5
 8005cc2:	42bb      	cmp	r3, r7
 8005cc4:	460d      	mov	r5, r1
 8005cc6:	d9f4      	bls.n	8005cb2 <_printf_i+0x11a>
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10b      	bne.n	8005ce4 <_printf_i+0x14c>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07df      	lsls	r7, r3, #31
 8005cd0:	d508      	bpl.n	8005ce4 <_printf_i+0x14c>
 8005cd2:	6923      	ldr	r3, [r4, #16]
 8005cd4:	6861      	ldr	r1, [r4, #4]
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	bfde      	ittt	le
 8005cda:	2330      	movle	r3, #48	; 0x30
 8005cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ce4:	1b92      	subs	r2, r2, r6
 8005ce6:	6122      	str	r2, [r4, #16]
 8005ce8:	f8cd a000 	str.w	sl, [sp]
 8005cec:	464b      	mov	r3, r9
 8005cee:	aa03      	add	r2, sp, #12
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f7ff fee2 	bl	8005abc <_printf_common>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d14c      	bne.n	8005d96 <_printf_i+0x1fe>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	b004      	add	sp, #16
 8005d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d06:	4835      	ldr	r0, [pc, #212]	; (8005ddc <_printf_i+0x244>)
 8005d08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	680e      	ldr	r6, [r1, #0]
 8005d10:	061f      	lsls	r7, r3, #24
 8005d12:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d16:	600e      	str	r6, [r1, #0]
 8005d18:	d514      	bpl.n	8005d44 <_printf_i+0x1ac>
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	bf44      	itt	mi
 8005d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d22:	6023      	strmi	r3, [r4, #0]
 8005d24:	b91d      	cbnz	r5, 8005d2e <_printf_i+0x196>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	f023 0320 	bic.w	r3, r3, #32
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	2310      	movs	r3, #16
 8005d30:	e7b0      	b.n	8005c94 <_printf_i+0xfc>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f043 0320 	orr.w	r3, r3, #32
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	2378      	movs	r3, #120	; 0x78
 8005d3c:	4828      	ldr	r0, [pc, #160]	; (8005de0 <_printf_i+0x248>)
 8005d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d42:	e7e3      	b.n	8005d0c <_printf_i+0x174>
 8005d44:	065e      	lsls	r6, r3, #25
 8005d46:	bf48      	it	mi
 8005d48:	b2ad      	uxthmi	r5, r5
 8005d4a:	e7e6      	b.n	8005d1a <_printf_i+0x182>
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	e7bb      	b.n	8005cc8 <_printf_i+0x130>
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	6826      	ldr	r6, [r4, #0]
 8005d54:	6960      	ldr	r0, [r4, #20]
 8005d56:	1d1d      	adds	r5, r3, #4
 8005d58:	600d      	str	r5, [r1, #0]
 8005d5a:	0635      	lsls	r5, r6, #24
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0x1cc>
 8005d60:	6018      	str	r0, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <_printf_i+0x1d2>
 8005d64:	0671      	lsls	r1, r6, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0x1c8>
 8005d68:	8018      	strh	r0, [r3, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	4616      	mov	r6, r2
 8005d70:	e7ba      	b.n	8005ce8 <_printf_i+0x150>
 8005d72:	680b      	ldr	r3, [r1, #0]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	600a      	str	r2, [r1, #0]
 8005d78:	681e      	ldr	r6, [r3, #0]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7fa fa2e 	bl	80001e0 <memchr>
 8005d84:	b108      	cbz	r0, 8005d8a <_printf_i+0x1f2>
 8005d86:	1b80      	subs	r0, r0, r6
 8005d88:	6060      	str	r0, [r4, #4]
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	e7a8      	b.n	8005ce8 <_printf_i+0x150>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d0ab      	beq.n	8005cfc <_printf_i+0x164>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	079b      	lsls	r3, r3, #30
 8005da8:	d413      	bmi.n	8005dd2 <_printf_i+0x23a>
 8005daa:	68e0      	ldr	r0, [r4, #12]
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	4298      	cmp	r0, r3
 8005db0:	bfb8      	it	lt
 8005db2:	4618      	movlt	r0, r3
 8005db4:	e7a4      	b.n	8005d00 <_printf_i+0x168>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4632      	mov	r2, r6
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d09b      	beq.n	8005cfc <_printf_i+0x164>
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	9903      	ldr	r1, [sp, #12]
 8005dca:	1a5b      	subs	r3, r3, r1
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dcf2      	bgt.n	8005db6 <_printf_i+0x21e>
 8005dd0:	e7eb      	b.n	8005daa <_printf_i+0x212>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	f104 0619 	add.w	r6, r4, #25
 8005dd8:	e7f5      	b.n	8005dc6 <_printf_i+0x22e>
 8005dda:	bf00      	nop
 8005ddc:	08007f8e 	.word	0x08007f8e
 8005de0:	08007f9f 	.word	0x08007f9f

08005de4 <iprintf>:
 8005de4:	b40f      	push	{r0, r1, r2, r3}
 8005de6:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <iprintf+0x2c>)
 8005de8:	b513      	push	{r0, r1, r4, lr}
 8005dea:	681c      	ldr	r4, [r3, #0]
 8005dec:	b124      	cbz	r4, 8005df8 <iprintf+0x14>
 8005dee:	69a3      	ldr	r3, [r4, #24]
 8005df0:	b913      	cbnz	r3, 8005df8 <iprintf+0x14>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fee0 	bl	8006bb8 <__sinit>
 8005df8:	ab05      	add	r3, sp, #20
 8005dfa:	9a04      	ldr	r2, [sp, #16]
 8005dfc:	68a1      	ldr	r1, [r4, #8]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 fbf7 	bl	80075f4 <_vfiprintf_r>
 8005e06:	b002      	add	sp, #8
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr
 8005e10:	2000000c 	.word	0x2000000c

08005e14 <quorem>:
 8005e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	6903      	ldr	r3, [r0, #16]
 8005e1a:	690c      	ldr	r4, [r1, #16]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	4607      	mov	r7, r0
 8005e20:	f2c0 8081 	blt.w	8005f26 <quorem+0x112>
 8005e24:	3c01      	subs	r4, #1
 8005e26:	f101 0814 	add.w	r8, r1, #20
 8005e2a:	f100 0514 	add.w	r5, r0, #20
 8005e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e4c:	d331      	bcc.n	8005eb2 <quorem+0x9e>
 8005e4e:	f04f 0e00 	mov.w	lr, #0
 8005e52:	4640      	mov	r0, r8
 8005e54:	46ac      	mov	ip, r5
 8005e56:	46f2      	mov	sl, lr
 8005e58:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e5c:	b293      	uxth	r3, r2
 8005e5e:	fb06 e303 	mla	r3, r6, r3, lr
 8005e62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	ebaa 0303 	sub.w	r3, sl, r3
 8005e6c:	0c12      	lsrs	r2, r2, #16
 8005e6e:	f8dc a000 	ldr.w	sl, [ip]
 8005e72:	fb06 e202 	mla	r2, r6, r2, lr
 8005e76:	fa13 f38a 	uxtah	r3, r3, sl
 8005e7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e7e:	fa1f fa82 	uxth.w	sl, r2
 8005e82:	f8dc 2000 	ldr.w	r2, [ip]
 8005e86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005e8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e94:	4581      	cmp	r9, r0
 8005e96:	f84c 3b04 	str.w	r3, [ip], #4
 8005e9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e9e:	d2db      	bcs.n	8005e58 <quorem+0x44>
 8005ea0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ea4:	b92b      	cbnz	r3, 8005eb2 <quorem+0x9e>
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	3b04      	subs	r3, #4
 8005eaa:	429d      	cmp	r5, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	d32e      	bcc.n	8005f0e <quorem+0xfa>
 8005eb0:	613c      	str	r4, [r7, #16]
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f001 f9ba 	bl	800722c <__mcmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	db24      	blt.n	8005f06 <quorem+0xf2>
 8005ebc:	3601      	adds	r6, #1
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f04f 0c00 	mov.w	ip, #0
 8005ec4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ec8:	f8d0 e000 	ldr.w	lr, [r0]
 8005ecc:	b293      	uxth	r3, r2
 8005ece:	ebac 0303 	sub.w	r3, ip, r3
 8005ed2:	0c12      	lsrs	r2, r2, #16
 8005ed4:	fa13 f38e 	uxtah	r3, r3, lr
 8005ed8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee6:	45c1      	cmp	r9, r8
 8005ee8:	f840 3b04 	str.w	r3, [r0], #4
 8005eec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ef0:	d2e8      	bcs.n	8005ec4 <quorem+0xb0>
 8005ef2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005efa:	b922      	cbnz	r2, 8005f06 <quorem+0xf2>
 8005efc:	3b04      	subs	r3, #4
 8005efe:	429d      	cmp	r5, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	d30a      	bcc.n	8005f1a <quorem+0x106>
 8005f04:	613c      	str	r4, [r7, #16]
 8005f06:	4630      	mov	r0, r6
 8005f08:	b003      	add	sp, #12
 8005f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d1cc      	bne.n	8005eb0 <quorem+0x9c>
 8005f16:	3c01      	subs	r4, #1
 8005f18:	e7c7      	b.n	8005eaa <quorem+0x96>
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	3b04      	subs	r3, #4
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	d1f0      	bne.n	8005f04 <quorem+0xf0>
 8005f22:	3c01      	subs	r4, #1
 8005f24:	e7eb      	b.n	8005efe <quorem+0xea>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7ee      	b.n	8005f08 <quorem+0xf4>
 8005f2a:	0000      	movs	r0, r0
 8005f2c:	0000      	movs	r0, r0
	...

08005f30 <_dtoa_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	ed2d 8b02 	vpush	{d8}
 8005f38:	ec57 6b10 	vmov	r6, r7, d0
 8005f3c:	b095      	sub	sp, #84	; 0x54
 8005f3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f44:	9105      	str	r1, [sp, #20]
 8005f46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f50:	b975      	cbnz	r5, 8005f70 <_dtoa_r+0x40>
 8005f52:	2010      	movs	r0, #16
 8005f54:	f000 fed6 	bl	8006d04 <malloc>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f5c:	b920      	cbnz	r0, 8005f68 <_dtoa_r+0x38>
 8005f5e:	4bb2      	ldr	r3, [pc, #712]	; (8006228 <_dtoa_r+0x2f8>)
 8005f60:	21ea      	movs	r1, #234	; 0xea
 8005f62:	48b2      	ldr	r0, [pc, #712]	; (800622c <_dtoa_r+0x2fc>)
 8005f64:	f001 fd9c 	bl	8007aa0 <__assert_func>
 8005f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f6c:	6005      	str	r5, [r0, #0]
 8005f6e:	60c5      	str	r5, [r0, #12]
 8005f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	b151      	cbz	r1, 8005f8c <_dtoa_r+0x5c>
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	604a      	str	r2, [r1, #4]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4093      	lsls	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 ff15 	bl	8006db0 <_Bfree>
 8005f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	1e3b      	subs	r3, r7, #0
 8005f8e:	bfb9      	ittee	lt
 8005f90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	9303      	strlt	r3, [sp, #12]
 8005f96:	2300      	movge	r3, #0
 8005f98:	f8c8 3000 	strge.w	r3, [r8]
 8005f9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005fa0:	4ba3      	ldr	r3, [pc, #652]	; (8006230 <_dtoa_r+0x300>)
 8005fa2:	bfbc      	itt	lt
 8005fa4:	2201      	movlt	r2, #1
 8005fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8005faa:	ea33 0309 	bics.w	r3, r3, r9
 8005fae:	d11b      	bne.n	8005fe8 <_dtoa_r+0xb8>
 8005fb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fbc:	4333      	orrs	r3, r6
 8005fbe:	f000 857a 	beq.w	8006ab6 <_dtoa_r+0xb86>
 8005fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc4:	b963      	cbnz	r3, 8005fe0 <_dtoa_r+0xb0>
 8005fc6:	4b9b      	ldr	r3, [pc, #620]	; (8006234 <_dtoa_r+0x304>)
 8005fc8:	e024      	b.n	8006014 <_dtoa_r+0xe4>
 8005fca:	4b9b      	ldr	r3, [pc, #620]	; (8006238 <_dtoa_r+0x308>)
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	9800      	ldr	r0, [sp, #0]
 8005fd6:	b015      	add	sp, #84	; 0x54
 8005fd8:	ecbd 8b02 	vpop	{d8}
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	4b94      	ldr	r3, [pc, #592]	; (8006234 <_dtoa_r+0x304>)
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	3303      	adds	r3, #3
 8005fe6:	e7f3      	b.n	8005fd0 <_dtoa_r+0xa0>
 8005fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	ec51 0b17 	vmov	r0, r1, d7
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ff8:	f7fa fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	b158      	cbz	r0, 8006018 <_dtoa_r+0xe8>
 8006000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006002:	2301      	movs	r3, #1
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8551 	beq.w	8006ab0 <_dtoa_r+0xb80>
 800600e:	488b      	ldr	r0, [pc, #556]	; (800623c <_dtoa_r+0x30c>)
 8006010:	6018      	str	r0, [r3, #0]
 8006012:	1e43      	subs	r3, r0, #1
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	e7dd      	b.n	8005fd4 <_dtoa_r+0xa4>
 8006018:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800601c:	aa12      	add	r2, sp, #72	; 0x48
 800601e:	a913      	add	r1, sp, #76	; 0x4c
 8006020:	4620      	mov	r0, r4
 8006022:	f001 f9a7 	bl	8007374 <__d2b>
 8006026:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800602a:	4683      	mov	fp, r0
 800602c:	2d00      	cmp	r5, #0
 800602e:	d07c      	beq.n	800612a <_dtoa_r+0x1fa>
 8006030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006032:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800603a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800603e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800604a:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <_dtoa_r+0x310>)
 800604c:	2200      	movs	r2, #0
 800604e:	4630      	mov	r0, r6
 8006050:	4639      	mov	r1, r7
 8006052:	f7fa f919 	bl	8000288 <__aeabi_dsub>
 8006056:	a36e      	add	r3, pc, #440	; (adr r3, 8006210 <_dtoa_r+0x2e0>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f7fa facc 	bl	80005f8 <__aeabi_dmul>
 8006060:	a36d      	add	r3, pc, #436	; (adr r3, 8006218 <_dtoa_r+0x2e8>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa f911 	bl	800028c <__adddf3>
 800606a:	4606      	mov	r6, r0
 800606c:	4628      	mov	r0, r5
 800606e:	460f      	mov	r7, r1
 8006070:	f7fa fa58 	bl	8000524 <__aeabi_i2d>
 8006074:	a36a      	add	r3, pc, #424	; (adr r3, 8006220 <_dtoa_r+0x2f0>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa fabd 	bl	80005f8 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa f901 	bl	800028c <__adddf3>
 800608a:	4606      	mov	r6, r0
 800608c:	460f      	mov	r7, r1
 800608e:	f7fa fd63 	bl	8000b58 <__aeabi_d2iz>
 8006092:	2200      	movs	r2, #0
 8006094:	4682      	mov	sl, r0
 8006096:	2300      	movs	r3, #0
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa fd1e 	bl	8000adc <__aeabi_dcmplt>
 80060a0:	b148      	cbz	r0, 80060b6 <_dtoa_r+0x186>
 80060a2:	4650      	mov	r0, sl
 80060a4:	f7fa fa3e 	bl	8000524 <__aeabi_i2d>
 80060a8:	4632      	mov	r2, r6
 80060aa:	463b      	mov	r3, r7
 80060ac:	f7fa fd0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80060b0:	b908      	cbnz	r0, 80060b6 <_dtoa_r+0x186>
 80060b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060b6:	f1ba 0f16 	cmp.w	sl, #22
 80060ba:	d854      	bhi.n	8006166 <_dtoa_r+0x236>
 80060bc:	4b61      	ldr	r3, [pc, #388]	; (8006244 <_dtoa_r+0x314>)
 80060be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060ca:	f7fa fd07 	bl	8000adc <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d04b      	beq.n	800616a <_dtoa_r+0x23a>
 80060d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060d6:	2300      	movs	r3, #0
 80060d8:	930e      	str	r3, [sp, #56]	; 0x38
 80060da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060dc:	1b5d      	subs	r5, r3, r5
 80060de:	1e6b      	subs	r3, r5, #1
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	bf43      	ittte	mi
 80060e4:	2300      	movmi	r3, #0
 80060e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80060ea:	9304      	strmi	r3, [sp, #16]
 80060ec:	f04f 0800 	movpl.w	r8, #0
 80060f0:	f1ba 0f00 	cmp.w	sl, #0
 80060f4:	db3b      	blt.n	800616e <_dtoa_r+0x23e>
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80060fc:	4453      	add	r3, sl
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	2300      	movs	r3, #0
 8006102:	9306      	str	r3, [sp, #24]
 8006104:	9b05      	ldr	r3, [sp, #20]
 8006106:	2b09      	cmp	r3, #9
 8006108:	d869      	bhi.n	80061de <_dtoa_r+0x2ae>
 800610a:	2b05      	cmp	r3, #5
 800610c:	bfc4      	itt	gt
 800610e:	3b04      	subgt	r3, #4
 8006110:	9305      	strgt	r3, [sp, #20]
 8006112:	9b05      	ldr	r3, [sp, #20]
 8006114:	f1a3 0302 	sub.w	r3, r3, #2
 8006118:	bfcc      	ite	gt
 800611a:	2500      	movgt	r5, #0
 800611c:	2501      	movle	r5, #1
 800611e:	2b03      	cmp	r3, #3
 8006120:	d869      	bhi.n	80061f6 <_dtoa_r+0x2c6>
 8006122:	e8df f003 	tbb	[pc, r3]
 8006126:	4e2c      	.short	0x4e2c
 8006128:	5a4c      	.short	0x5a4c
 800612a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800612e:	441d      	add	r5, r3
 8006130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006134:	2b20      	cmp	r3, #32
 8006136:	bfc1      	itttt	gt
 8006138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800613c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006140:	fa09 f303 	lslgt.w	r3, r9, r3
 8006144:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006148:	bfda      	itte	le
 800614a:	f1c3 0320 	rsble	r3, r3, #32
 800614e:	fa06 f003 	lslle.w	r0, r6, r3
 8006152:	4318      	orrgt	r0, r3
 8006154:	f7fa f9d6 	bl	8000504 <__aeabi_ui2d>
 8006158:	2301      	movs	r3, #1
 800615a:	4606      	mov	r6, r0
 800615c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006160:	3d01      	subs	r5, #1
 8006162:	9310      	str	r3, [sp, #64]	; 0x40
 8006164:	e771      	b.n	800604a <_dtoa_r+0x11a>
 8006166:	2301      	movs	r3, #1
 8006168:	e7b6      	b.n	80060d8 <_dtoa_r+0x1a8>
 800616a:	900e      	str	r0, [sp, #56]	; 0x38
 800616c:	e7b5      	b.n	80060da <_dtoa_r+0x1aa>
 800616e:	f1ca 0300 	rsb	r3, sl, #0
 8006172:	9306      	str	r3, [sp, #24]
 8006174:	2300      	movs	r3, #0
 8006176:	eba8 080a 	sub.w	r8, r8, sl
 800617a:	930d      	str	r3, [sp, #52]	; 0x34
 800617c:	e7c2      	b.n	8006104 <_dtoa_r+0x1d4>
 800617e:	2300      	movs	r3, #0
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006184:	2b00      	cmp	r3, #0
 8006186:	dc39      	bgt.n	80061fc <_dtoa_r+0x2cc>
 8006188:	f04f 0901 	mov.w	r9, #1
 800618c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006190:	464b      	mov	r3, r9
 8006192:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006198:	2200      	movs	r2, #0
 800619a:	6042      	str	r2, [r0, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	f102 0614 	add.w	r6, r2, #20
 80061a2:	429e      	cmp	r6, r3
 80061a4:	6841      	ldr	r1, [r0, #4]
 80061a6:	d92f      	bls.n	8006208 <_dtoa_r+0x2d8>
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fdc1 	bl	8006d30 <_Balloc>
 80061ae:	9000      	str	r0, [sp, #0]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d14b      	bne.n	800624c <_dtoa_r+0x31c>
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <_dtoa_r+0x318>)
 80061b6:	4602      	mov	r2, r0
 80061b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061bc:	e6d1      	b.n	8005f62 <_dtoa_r+0x32>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7de      	b.n	8006180 <_dtoa_r+0x250>
 80061c2:	2300      	movs	r3, #0
 80061c4:	9308      	str	r3, [sp, #32]
 80061c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c8:	eb0a 0903 	add.w	r9, sl, r3
 80061cc:	f109 0301 	add.w	r3, r9, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	bfb8      	it	lt
 80061d6:	2301      	movlt	r3, #1
 80061d8:	e7dd      	b.n	8006196 <_dtoa_r+0x266>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f2      	b.n	80061c4 <_dtoa_r+0x294>
 80061de:	2501      	movs	r5, #1
 80061e0:	2300      	movs	r3, #0
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	9508      	str	r5, [sp, #32]
 80061e6:	f04f 39ff 	mov.w	r9, #4294967295
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80061f0:	2312      	movs	r3, #18
 80061f2:	9209      	str	r2, [sp, #36]	; 0x24
 80061f4:	e7cf      	b.n	8006196 <_dtoa_r+0x266>
 80061f6:	2301      	movs	r3, #1
 80061f8:	9308      	str	r3, [sp, #32]
 80061fa:	e7f4      	b.n	80061e6 <_dtoa_r+0x2b6>
 80061fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006200:	f8cd 9004 	str.w	r9, [sp, #4]
 8006204:	464b      	mov	r3, r9
 8006206:	e7c6      	b.n	8006196 <_dtoa_r+0x266>
 8006208:	3101      	adds	r1, #1
 800620a:	6041      	str	r1, [r0, #4]
 800620c:	0052      	lsls	r2, r2, #1
 800620e:	e7c6      	b.n	800619e <_dtoa_r+0x26e>
 8006210:	636f4361 	.word	0x636f4361
 8006214:	3fd287a7 	.word	0x3fd287a7
 8006218:	8b60c8b3 	.word	0x8b60c8b3
 800621c:	3fc68a28 	.word	0x3fc68a28
 8006220:	509f79fb 	.word	0x509f79fb
 8006224:	3fd34413 	.word	0x3fd34413
 8006228:	08007fbd 	.word	0x08007fbd
 800622c:	08007fd4 	.word	0x08007fd4
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	08007fb9 	.word	0x08007fb9
 8006238:	08007fb0 	.word	0x08007fb0
 800623c:	08007f8d 	.word	0x08007f8d
 8006240:	3ff80000 	.word	0x3ff80000
 8006244:	08008130 	.word	0x08008130
 8006248:	08008033 	.word	0x08008033
 800624c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624e:	9a00      	ldr	r2, [sp, #0]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	2b0e      	cmp	r3, #14
 8006256:	f200 80ad 	bhi.w	80063b4 <_dtoa_r+0x484>
 800625a:	2d00      	cmp	r5, #0
 800625c:	f000 80aa 	beq.w	80063b4 <_dtoa_r+0x484>
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	dd36      	ble.n	80062d4 <_dtoa_r+0x3a4>
 8006266:	4ac3      	ldr	r2, [pc, #780]	; (8006574 <_dtoa_r+0x644>)
 8006268:	f00a 030f 	and.w	r3, sl, #15
 800626c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006270:	ed93 7b00 	vldr	d7, [r3]
 8006274:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006278:	ea4f 172a 	mov.w	r7, sl, asr #4
 800627c:	eeb0 8a47 	vmov.f32	s16, s14
 8006280:	eef0 8a67 	vmov.f32	s17, s15
 8006284:	d016      	beq.n	80062b4 <_dtoa_r+0x384>
 8006286:	4bbc      	ldr	r3, [pc, #752]	; (8006578 <_dtoa_r+0x648>)
 8006288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800628c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006290:	f7fa fadc 	bl	800084c <__aeabi_ddiv>
 8006294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006298:	f007 070f 	and.w	r7, r7, #15
 800629c:	2503      	movs	r5, #3
 800629e:	4eb6      	ldr	r6, [pc, #728]	; (8006578 <_dtoa_r+0x648>)
 80062a0:	b957      	cbnz	r7, 80062b8 <_dtoa_r+0x388>
 80062a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a6:	ec53 2b18 	vmov	r2, r3, d8
 80062aa:	f7fa facf 	bl	800084c <__aeabi_ddiv>
 80062ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b2:	e029      	b.n	8006308 <_dtoa_r+0x3d8>
 80062b4:	2502      	movs	r5, #2
 80062b6:	e7f2      	b.n	800629e <_dtoa_r+0x36e>
 80062b8:	07f9      	lsls	r1, r7, #31
 80062ba:	d508      	bpl.n	80062ce <_dtoa_r+0x39e>
 80062bc:	ec51 0b18 	vmov	r0, r1, d8
 80062c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	ec41 0b18 	vmov	d8, r0, r1
 80062cc:	3501      	adds	r5, #1
 80062ce:	107f      	asrs	r7, r7, #1
 80062d0:	3608      	adds	r6, #8
 80062d2:	e7e5      	b.n	80062a0 <_dtoa_r+0x370>
 80062d4:	f000 80a6 	beq.w	8006424 <_dtoa_r+0x4f4>
 80062d8:	f1ca 0600 	rsb	r6, sl, #0
 80062dc:	4ba5      	ldr	r3, [pc, #660]	; (8006574 <_dtoa_r+0x644>)
 80062de:	4fa6      	ldr	r7, [pc, #664]	; (8006578 <_dtoa_r+0x648>)
 80062e0:	f006 020f 	and.w	r2, r6, #15
 80062e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062f0:	f7fa f982 	bl	80005f8 <__aeabi_dmul>
 80062f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f8:	1136      	asrs	r6, r6, #4
 80062fa:	2300      	movs	r3, #0
 80062fc:	2502      	movs	r5, #2
 80062fe:	2e00      	cmp	r6, #0
 8006300:	f040 8085 	bne.w	800640e <_dtoa_r+0x4de>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1d2      	bne.n	80062ae <_dtoa_r+0x37e>
 8006308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 808c 	beq.w	8006428 <_dtoa_r+0x4f8>
 8006310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006314:	4b99      	ldr	r3, [pc, #612]	; (800657c <_dtoa_r+0x64c>)
 8006316:	2200      	movs	r2, #0
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbde 	bl	8000adc <__aeabi_dcmplt>
 8006320:	2800      	cmp	r0, #0
 8006322:	f000 8081 	beq.w	8006428 <_dtoa_r+0x4f8>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d07d      	beq.n	8006428 <_dtoa_r+0x4f8>
 800632c:	f1b9 0f00 	cmp.w	r9, #0
 8006330:	dd3c      	ble.n	80063ac <_dtoa_r+0x47c>
 8006332:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	2200      	movs	r2, #0
 800633a:	4b91      	ldr	r3, [pc, #580]	; (8006580 <_dtoa_r+0x650>)
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7fa f95a 	bl	80005f8 <__aeabi_dmul>
 8006344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006348:	3501      	adds	r5, #1
 800634a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800634e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006352:	4628      	mov	r0, r5
 8006354:	f7fa f8e6 	bl	8000524 <__aeabi_i2d>
 8006358:	4632      	mov	r2, r6
 800635a:	463b      	mov	r3, r7
 800635c:	f7fa f94c 	bl	80005f8 <__aeabi_dmul>
 8006360:	4b88      	ldr	r3, [pc, #544]	; (8006584 <_dtoa_r+0x654>)
 8006362:	2200      	movs	r2, #0
 8006364:	f7f9 ff92 	bl	800028c <__adddf3>
 8006368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800636c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d15c      	bne.n	8006432 <_dtoa_r+0x502>
 8006378:	4b83      	ldr	r3, [pc, #524]	; (8006588 <_dtoa_r+0x658>)
 800637a:	2200      	movs	r2, #0
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7f9 ff82 	bl	8000288 <__aeabi_dsub>
 8006384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006388:	4606      	mov	r6, r0
 800638a:	460f      	mov	r7, r1
 800638c:	f7fa fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 8006390:	2800      	cmp	r0, #0
 8006392:	f040 8296 	bne.w	80068c2 <_dtoa_r+0x992>
 8006396:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800639a:	4630      	mov	r0, r6
 800639c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a0:	4639      	mov	r1, r7
 80063a2:	f7fa fb9b 	bl	8000adc <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f040 8288 	bne.w	80068bc <_dtoa_r+0x98c>
 80063ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f2c0 8158 	blt.w	800666c <_dtoa_r+0x73c>
 80063bc:	f1ba 0f0e 	cmp.w	sl, #14
 80063c0:	f300 8154 	bgt.w	800666c <_dtoa_r+0x73c>
 80063c4:	4b6b      	ldr	r3, [pc, #428]	; (8006574 <_dtoa_r+0x644>)
 80063c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f280 80e3 	bge.w	800659c <_dtoa_r+0x66c>
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f300 80df 	bgt.w	800659c <_dtoa_r+0x66c>
 80063de:	f040 826d 	bne.w	80068bc <_dtoa_r+0x98c>
 80063e2:	4b69      	ldr	r3, [pc, #420]	; (8006588 <_dtoa_r+0x658>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	4640      	mov	r0, r8
 80063e8:	4649      	mov	r1, r9
 80063ea:	f7fa f905 	bl	80005f8 <__aeabi_dmul>
 80063ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f2:	f7fa fb87 	bl	8000b04 <__aeabi_dcmpge>
 80063f6:	9e01      	ldr	r6, [sp, #4]
 80063f8:	4637      	mov	r7, r6
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f040 8243 	bne.w	8006886 <_dtoa_r+0x956>
 8006400:	9d00      	ldr	r5, [sp, #0]
 8006402:	2331      	movs	r3, #49	; 0x31
 8006404:	f805 3b01 	strb.w	r3, [r5], #1
 8006408:	f10a 0a01 	add.w	sl, sl, #1
 800640c:	e23f      	b.n	800688e <_dtoa_r+0x95e>
 800640e:	07f2      	lsls	r2, r6, #31
 8006410:	d505      	bpl.n	800641e <_dtoa_r+0x4ee>
 8006412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_dmul>
 800641a:	3501      	adds	r5, #1
 800641c:	2301      	movs	r3, #1
 800641e:	1076      	asrs	r6, r6, #1
 8006420:	3708      	adds	r7, #8
 8006422:	e76c      	b.n	80062fe <_dtoa_r+0x3ce>
 8006424:	2502      	movs	r5, #2
 8006426:	e76f      	b.n	8006308 <_dtoa_r+0x3d8>
 8006428:	9b01      	ldr	r3, [sp, #4]
 800642a:	f8cd a01c 	str.w	sl, [sp, #28]
 800642e:	930c      	str	r3, [sp, #48]	; 0x30
 8006430:	e78d      	b.n	800634e <_dtoa_r+0x41e>
 8006432:	9900      	ldr	r1, [sp, #0]
 8006434:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006438:	4b4e      	ldr	r3, [pc, #312]	; (8006574 <_dtoa_r+0x644>)
 800643a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800643e:	4401      	add	r1, r0
 8006440:	9102      	str	r1, [sp, #8]
 8006442:	9908      	ldr	r1, [sp, #32]
 8006444:	eeb0 8a47 	vmov.f32	s16, s14
 8006448:	eef0 8a67 	vmov.f32	s17, s15
 800644c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006454:	2900      	cmp	r1, #0
 8006456:	d045      	beq.n	80064e4 <_dtoa_r+0x5b4>
 8006458:	494c      	ldr	r1, [pc, #304]	; (800658c <_dtoa_r+0x65c>)
 800645a:	2000      	movs	r0, #0
 800645c:	f7fa f9f6 	bl	800084c <__aeabi_ddiv>
 8006460:	ec53 2b18 	vmov	r2, r3, d8
 8006464:	f7f9 ff10 	bl	8000288 <__aeabi_dsub>
 8006468:	9d00      	ldr	r5, [sp, #0]
 800646a:	ec41 0b18 	vmov	d8, r0, r1
 800646e:	4639      	mov	r1, r7
 8006470:	4630      	mov	r0, r6
 8006472:	f7fa fb71 	bl	8000b58 <__aeabi_d2iz>
 8006476:	900c      	str	r0, [sp, #48]	; 0x30
 8006478:	f7fa f854 	bl	8000524 <__aeabi_i2d>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7f9 ff00 	bl	8000288 <__aeabi_dsub>
 8006488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800648a:	3330      	adds	r3, #48	; 0x30
 800648c:	f805 3b01 	strb.w	r3, [r5], #1
 8006490:	ec53 2b18 	vmov	r2, r3, d8
 8006494:	4606      	mov	r6, r0
 8006496:	460f      	mov	r7, r1
 8006498:	f7fa fb20 	bl	8000adc <__aeabi_dcmplt>
 800649c:	2800      	cmp	r0, #0
 800649e:	d165      	bne.n	800656c <_dtoa_r+0x63c>
 80064a0:	4632      	mov	r2, r6
 80064a2:	463b      	mov	r3, r7
 80064a4:	4935      	ldr	r1, [pc, #212]	; (800657c <_dtoa_r+0x64c>)
 80064a6:	2000      	movs	r0, #0
 80064a8:	f7f9 feee 	bl	8000288 <__aeabi_dsub>
 80064ac:	ec53 2b18 	vmov	r2, r3, d8
 80064b0:	f7fa fb14 	bl	8000adc <__aeabi_dcmplt>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f040 80b9 	bne.w	800662c <_dtoa_r+0x6fc>
 80064ba:	9b02      	ldr	r3, [sp, #8]
 80064bc:	429d      	cmp	r5, r3
 80064be:	f43f af75 	beq.w	80063ac <_dtoa_r+0x47c>
 80064c2:	4b2f      	ldr	r3, [pc, #188]	; (8006580 <_dtoa_r+0x650>)
 80064c4:	ec51 0b18 	vmov	r0, r1, d8
 80064c8:	2200      	movs	r2, #0
 80064ca:	f7fa f895 	bl	80005f8 <__aeabi_dmul>
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <_dtoa_r+0x650>)
 80064d0:	ec41 0b18 	vmov	d8, r0, r1
 80064d4:	2200      	movs	r2, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7fa f88d 	bl	80005f8 <__aeabi_dmul>
 80064de:	4606      	mov	r6, r0
 80064e0:	460f      	mov	r7, r1
 80064e2:	e7c4      	b.n	800646e <_dtoa_r+0x53e>
 80064e4:	ec51 0b17 	vmov	r0, r1, d7
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	9d00      	ldr	r5, [sp, #0]
 80064f0:	930c      	str	r3, [sp, #48]	; 0x30
 80064f2:	ec41 0b18 	vmov	d8, r0, r1
 80064f6:	4639      	mov	r1, r7
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7fa fb2d 	bl	8000b58 <__aeabi_d2iz>
 80064fe:	9011      	str	r0, [sp, #68]	; 0x44
 8006500:	f7fa f810 	bl	8000524 <__aeabi_i2d>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006512:	3330      	adds	r3, #48	; 0x30
 8006514:	f805 3b01 	strb.w	r3, [r5], #1
 8006518:	9b02      	ldr	r3, [sp, #8]
 800651a:	429d      	cmp	r5, r3
 800651c:	4606      	mov	r6, r0
 800651e:	460f      	mov	r7, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	d134      	bne.n	8006590 <_dtoa_r+0x660>
 8006526:	4b19      	ldr	r3, [pc, #100]	; (800658c <_dtoa_r+0x65c>)
 8006528:	ec51 0b18 	vmov	r0, r1, d8
 800652c:	f7f9 feae 	bl	800028c <__adddf3>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7fa faee 	bl	8000b18 <__aeabi_dcmpgt>
 800653c:	2800      	cmp	r0, #0
 800653e:	d175      	bne.n	800662c <_dtoa_r+0x6fc>
 8006540:	ec53 2b18 	vmov	r2, r3, d8
 8006544:	4911      	ldr	r1, [pc, #68]	; (800658c <_dtoa_r+0x65c>)
 8006546:	2000      	movs	r0, #0
 8006548:	f7f9 fe9e 	bl	8000288 <__aeabi_dsub>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa fac2 	bl	8000adc <__aeabi_dcmplt>
 8006558:	2800      	cmp	r0, #0
 800655a:	f43f af27 	beq.w	80063ac <_dtoa_r+0x47c>
 800655e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006560:	1e6b      	subs	r3, r5, #1
 8006562:	930c      	str	r3, [sp, #48]	; 0x30
 8006564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006568:	2b30      	cmp	r3, #48	; 0x30
 800656a:	d0f8      	beq.n	800655e <_dtoa_r+0x62e>
 800656c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006570:	e04a      	b.n	8006608 <_dtoa_r+0x6d8>
 8006572:	bf00      	nop
 8006574:	08008130 	.word	0x08008130
 8006578:	08008108 	.word	0x08008108
 800657c:	3ff00000 	.word	0x3ff00000
 8006580:	40240000 	.word	0x40240000
 8006584:	401c0000 	.word	0x401c0000
 8006588:	40140000 	.word	0x40140000
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	4baf      	ldr	r3, [pc, #700]	; (8006850 <_dtoa_r+0x920>)
 8006592:	f7fa f831 	bl	80005f8 <__aeabi_dmul>
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	e7ac      	b.n	80064f6 <_dtoa_r+0x5c6>
 800659c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065a0:	9d00      	ldr	r5, [sp, #0]
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7fa f94f 	bl	800084c <__aeabi_ddiv>
 80065ae:	f7fa fad3 	bl	8000b58 <__aeabi_d2iz>
 80065b2:	9002      	str	r0, [sp, #8]
 80065b4:	f7f9 ffb6 	bl	8000524 <__aeabi_i2d>
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7f9 fe5e 	bl	8000288 <__aeabi_dsub>
 80065cc:	9e02      	ldr	r6, [sp, #8]
 80065ce:	9f01      	ldr	r7, [sp, #4]
 80065d0:	3630      	adds	r6, #48	; 0x30
 80065d2:	f805 6b01 	strb.w	r6, [r5], #1
 80065d6:	9e00      	ldr	r6, [sp, #0]
 80065d8:	1bae      	subs	r6, r5, r6
 80065da:	42b7      	cmp	r7, r6
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	d137      	bne.n	8006652 <_dtoa_r+0x722>
 80065e2:	f7f9 fe53 	bl	800028c <__adddf3>
 80065e6:	4642      	mov	r2, r8
 80065e8:	464b      	mov	r3, r9
 80065ea:	4606      	mov	r6, r0
 80065ec:	460f      	mov	r7, r1
 80065ee:	f7fa fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80065f2:	b9c8      	cbnz	r0, 8006628 <_dtoa_r+0x6f8>
 80065f4:	4642      	mov	r2, r8
 80065f6:	464b      	mov	r3, r9
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006600:	b110      	cbz	r0, 8006608 <_dtoa_r+0x6d8>
 8006602:	9b02      	ldr	r3, [sp, #8]
 8006604:	07d9      	lsls	r1, r3, #31
 8006606:	d40f      	bmi.n	8006628 <_dtoa_r+0x6f8>
 8006608:	4620      	mov	r0, r4
 800660a:	4659      	mov	r1, fp
 800660c:	f000 fbd0 	bl	8006db0 <_Bfree>
 8006610:	2300      	movs	r3, #0
 8006612:	702b      	strb	r3, [r5, #0]
 8006614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006616:	f10a 0001 	add.w	r0, sl, #1
 800661a:	6018      	str	r0, [r3, #0]
 800661c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800661e:	2b00      	cmp	r3, #0
 8006620:	f43f acd8 	beq.w	8005fd4 <_dtoa_r+0xa4>
 8006624:	601d      	str	r5, [r3, #0]
 8006626:	e4d5      	b.n	8005fd4 <_dtoa_r+0xa4>
 8006628:	f8cd a01c 	str.w	sl, [sp, #28]
 800662c:	462b      	mov	r3, r5
 800662e:	461d      	mov	r5, r3
 8006630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006634:	2a39      	cmp	r2, #57	; 0x39
 8006636:	d108      	bne.n	800664a <_dtoa_r+0x71a>
 8006638:	9a00      	ldr	r2, [sp, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d1f7      	bne.n	800662e <_dtoa_r+0x6fe>
 800663e:	9a07      	ldr	r2, [sp, #28]
 8006640:	9900      	ldr	r1, [sp, #0]
 8006642:	3201      	adds	r2, #1
 8006644:	9207      	str	r2, [sp, #28]
 8006646:	2230      	movs	r2, #48	; 0x30
 8006648:	700a      	strb	r2, [r1, #0]
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	3201      	adds	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	e78c      	b.n	800656c <_dtoa_r+0x63c>
 8006652:	4b7f      	ldr	r3, [pc, #508]	; (8006850 <_dtoa_r+0x920>)
 8006654:	2200      	movs	r2, #0
 8006656:	f7f9 ffcf 	bl	80005f8 <__aeabi_dmul>
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	f7fa fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006666:	2800      	cmp	r0, #0
 8006668:	d09b      	beq.n	80065a2 <_dtoa_r+0x672>
 800666a:	e7cd      	b.n	8006608 <_dtoa_r+0x6d8>
 800666c:	9a08      	ldr	r2, [sp, #32]
 800666e:	2a00      	cmp	r2, #0
 8006670:	f000 80c4 	beq.w	80067fc <_dtoa_r+0x8cc>
 8006674:	9a05      	ldr	r2, [sp, #20]
 8006676:	2a01      	cmp	r2, #1
 8006678:	f300 80a8 	bgt.w	80067cc <_dtoa_r+0x89c>
 800667c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800667e:	2a00      	cmp	r2, #0
 8006680:	f000 80a0 	beq.w	80067c4 <_dtoa_r+0x894>
 8006684:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006688:	9e06      	ldr	r6, [sp, #24]
 800668a:	4645      	mov	r5, r8
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	2101      	movs	r1, #1
 8006690:	441a      	add	r2, r3
 8006692:	4620      	mov	r0, r4
 8006694:	4498      	add	r8, r3
 8006696:	9204      	str	r2, [sp, #16]
 8006698:	f000 fc46 	bl	8006f28 <__i2b>
 800669c:	4607      	mov	r7, r0
 800669e:	2d00      	cmp	r5, #0
 80066a0:	dd0b      	ble.n	80066ba <_dtoa_r+0x78a>
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dd08      	ble.n	80066ba <_dtoa_r+0x78a>
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	9a04      	ldr	r2, [sp, #16]
 80066ac:	bfa8      	it	ge
 80066ae:	462b      	movge	r3, r5
 80066b0:	eba8 0803 	sub.w	r8, r8, r3
 80066b4:	1aed      	subs	r5, r5, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	9b06      	ldr	r3, [sp, #24]
 80066bc:	b1fb      	cbz	r3, 80066fe <_dtoa_r+0x7ce>
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 809f 	beq.w	8006804 <_dtoa_r+0x8d4>
 80066c6:	2e00      	cmp	r6, #0
 80066c8:	dd11      	ble.n	80066ee <_dtoa_r+0x7be>
 80066ca:	4639      	mov	r1, r7
 80066cc:	4632      	mov	r2, r6
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fce6 	bl	80070a0 <__pow5mult>
 80066d4:	465a      	mov	r2, fp
 80066d6:	4601      	mov	r1, r0
 80066d8:	4607      	mov	r7, r0
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fc3a 	bl	8006f54 <__multiply>
 80066e0:	4659      	mov	r1, fp
 80066e2:	9007      	str	r0, [sp, #28]
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fb63 	bl	8006db0 <_Bfree>
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	469b      	mov	fp, r3
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	1b9a      	subs	r2, r3, r6
 80066f2:	d004      	beq.n	80066fe <_dtoa_r+0x7ce>
 80066f4:	4659      	mov	r1, fp
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 fcd2 	bl	80070a0 <__pow5mult>
 80066fc:	4683      	mov	fp, r0
 80066fe:	2101      	movs	r1, #1
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fc11 	bl	8006f28 <__i2b>
 8006706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006708:	2b00      	cmp	r3, #0
 800670a:	4606      	mov	r6, r0
 800670c:	dd7c      	ble.n	8006808 <_dtoa_r+0x8d8>
 800670e:	461a      	mov	r2, r3
 8006710:	4601      	mov	r1, r0
 8006712:	4620      	mov	r0, r4
 8006714:	f000 fcc4 	bl	80070a0 <__pow5mult>
 8006718:	9b05      	ldr	r3, [sp, #20]
 800671a:	2b01      	cmp	r3, #1
 800671c:	4606      	mov	r6, r0
 800671e:	dd76      	ble.n	800680e <_dtoa_r+0x8de>
 8006720:	2300      	movs	r3, #0
 8006722:	9306      	str	r3, [sp, #24]
 8006724:	6933      	ldr	r3, [r6, #16]
 8006726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800672a:	6918      	ldr	r0, [r3, #16]
 800672c:	f000 fbac 	bl	8006e88 <__hi0bits>
 8006730:	f1c0 0020 	rsb	r0, r0, #32
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	4418      	add	r0, r3
 8006738:	f010 001f 	ands.w	r0, r0, #31
 800673c:	f000 8086 	beq.w	800684c <_dtoa_r+0x91c>
 8006740:	f1c0 0320 	rsb	r3, r0, #32
 8006744:	2b04      	cmp	r3, #4
 8006746:	dd7f      	ble.n	8006848 <_dtoa_r+0x918>
 8006748:	f1c0 001c 	rsb	r0, r0, #28
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	4403      	add	r3, r0
 8006750:	4480      	add	r8, r0
 8006752:	4405      	add	r5, r0
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	f1b8 0f00 	cmp.w	r8, #0
 800675a:	dd05      	ble.n	8006768 <_dtoa_r+0x838>
 800675c:	4659      	mov	r1, fp
 800675e:	4642      	mov	r2, r8
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fcf7 	bl	8007154 <__lshift>
 8006766:	4683      	mov	fp, r0
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dd05      	ble.n	800677a <_dtoa_r+0x84a>
 800676e:	4631      	mov	r1, r6
 8006770:	461a      	mov	r2, r3
 8006772:	4620      	mov	r0, r4
 8006774:	f000 fcee 	bl	8007154 <__lshift>
 8006778:	4606      	mov	r6, r0
 800677a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d069      	beq.n	8006854 <_dtoa_r+0x924>
 8006780:	4631      	mov	r1, r6
 8006782:	4658      	mov	r0, fp
 8006784:	f000 fd52 	bl	800722c <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	da63      	bge.n	8006854 <_dtoa_r+0x924>
 800678c:	2300      	movs	r3, #0
 800678e:	4659      	mov	r1, fp
 8006790:	220a      	movs	r2, #10
 8006792:	4620      	mov	r0, r4
 8006794:	f000 fb2e 	bl	8006df4 <__multadd>
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800679e:	4683      	mov	fp, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 818f 	beq.w	8006ac4 <_dtoa_r+0xb94>
 80067a6:	4639      	mov	r1, r7
 80067a8:	2300      	movs	r3, #0
 80067aa:	220a      	movs	r2, #10
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 fb21 	bl	8006df4 <__multadd>
 80067b2:	f1b9 0f00 	cmp.w	r9, #0
 80067b6:	4607      	mov	r7, r0
 80067b8:	f300 808e 	bgt.w	80068d8 <_dtoa_r+0x9a8>
 80067bc:	9b05      	ldr	r3, [sp, #20]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	dc50      	bgt.n	8006864 <_dtoa_r+0x934>
 80067c2:	e089      	b.n	80068d8 <_dtoa_r+0x9a8>
 80067c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067ca:	e75d      	b.n	8006688 <_dtoa_r+0x758>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	1e5e      	subs	r6, r3, #1
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	42b3      	cmp	r3, r6
 80067d4:	bfbf      	itttt	lt
 80067d6:	9b06      	ldrlt	r3, [sp, #24]
 80067d8:	9606      	strlt	r6, [sp, #24]
 80067da:	1af2      	sublt	r2, r6, r3
 80067dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80067de:	bfb6      	itet	lt
 80067e0:	189b      	addlt	r3, r3, r2
 80067e2:	1b9e      	subge	r6, r3, r6
 80067e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	bfb8      	it	lt
 80067ea:	2600      	movlt	r6, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bfb5      	itete	lt
 80067f0:	eba8 0503 	sublt.w	r5, r8, r3
 80067f4:	9b01      	ldrge	r3, [sp, #4]
 80067f6:	2300      	movlt	r3, #0
 80067f8:	4645      	movge	r5, r8
 80067fa:	e747      	b.n	800668c <_dtoa_r+0x75c>
 80067fc:	9e06      	ldr	r6, [sp, #24]
 80067fe:	9f08      	ldr	r7, [sp, #32]
 8006800:	4645      	mov	r5, r8
 8006802:	e74c      	b.n	800669e <_dtoa_r+0x76e>
 8006804:	9a06      	ldr	r2, [sp, #24]
 8006806:	e775      	b.n	80066f4 <_dtoa_r+0x7c4>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	2b01      	cmp	r3, #1
 800680c:	dc18      	bgt.n	8006840 <_dtoa_r+0x910>
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	b9b3      	cbnz	r3, 8006840 <_dtoa_r+0x910>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006818:	b9a3      	cbnz	r3, 8006844 <_dtoa_r+0x914>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006820:	0d1b      	lsrs	r3, r3, #20
 8006822:	051b      	lsls	r3, r3, #20
 8006824:	b12b      	cbz	r3, 8006832 <_dtoa_r+0x902>
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	3301      	adds	r3, #1
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	f108 0801 	add.w	r8, r8, #1
 8006830:	2301      	movs	r3, #1
 8006832:	9306      	str	r3, [sp, #24]
 8006834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006836:	2b00      	cmp	r3, #0
 8006838:	f47f af74 	bne.w	8006724 <_dtoa_r+0x7f4>
 800683c:	2001      	movs	r0, #1
 800683e:	e779      	b.n	8006734 <_dtoa_r+0x804>
 8006840:	2300      	movs	r3, #0
 8006842:	e7f6      	b.n	8006832 <_dtoa_r+0x902>
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	e7f4      	b.n	8006832 <_dtoa_r+0x902>
 8006848:	d085      	beq.n	8006756 <_dtoa_r+0x826>
 800684a:	4618      	mov	r0, r3
 800684c:	301c      	adds	r0, #28
 800684e:	e77d      	b.n	800674c <_dtoa_r+0x81c>
 8006850:	40240000 	.word	0x40240000
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	dc38      	bgt.n	80068cc <_dtoa_r+0x99c>
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	2b02      	cmp	r3, #2
 800685e:	dd35      	ble.n	80068cc <_dtoa_r+0x99c>
 8006860:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	d10d      	bne.n	8006886 <_dtoa_r+0x956>
 800686a:	4631      	mov	r1, r6
 800686c:	464b      	mov	r3, r9
 800686e:	2205      	movs	r2, #5
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fabf 	bl	8006df4 <__multadd>
 8006876:	4601      	mov	r1, r0
 8006878:	4606      	mov	r6, r0
 800687a:	4658      	mov	r0, fp
 800687c:	f000 fcd6 	bl	800722c <__mcmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	f73f adbd 	bgt.w	8006400 <_dtoa_r+0x4d0>
 8006886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006888:	9d00      	ldr	r5, [sp, #0]
 800688a:	ea6f 0a03 	mvn.w	sl, r3
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	4631      	mov	r1, r6
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fa8b 	bl	8006db0 <_Bfree>
 800689a:	2f00      	cmp	r7, #0
 800689c:	f43f aeb4 	beq.w	8006608 <_dtoa_r+0x6d8>
 80068a0:	f1b8 0f00 	cmp.w	r8, #0
 80068a4:	d005      	beq.n	80068b2 <_dtoa_r+0x982>
 80068a6:	45b8      	cmp	r8, r7
 80068a8:	d003      	beq.n	80068b2 <_dtoa_r+0x982>
 80068aa:	4641      	mov	r1, r8
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 fa7f 	bl	8006db0 <_Bfree>
 80068b2:	4639      	mov	r1, r7
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fa7b 	bl	8006db0 <_Bfree>
 80068ba:	e6a5      	b.n	8006608 <_dtoa_r+0x6d8>
 80068bc:	2600      	movs	r6, #0
 80068be:	4637      	mov	r7, r6
 80068c0:	e7e1      	b.n	8006886 <_dtoa_r+0x956>
 80068c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80068c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068c8:	4637      	mov	r7, r6
 80068ca:	e599      	b.n	8006400 <_dtoa_r+0x4d0>
 80068cc:	9b08      	ldr	r3, [sp, #32]
 80068ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80fd 	beq.w	8006ad2 <_dtoa_r+0xba2>
 80068d8:	2d00      	cmp	r5, #0
 80068da:	dd05      	ble.n	80068e8 <_dtoa_r+0x9b8>
 80068dc:	4639      	mov	r1, r7
 80068de:	462a      	mov	r2, r5
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fc37 	bl	8007154 <__lshift>
 80068e6:	4607      	mov	r7, r0
 80068e8:	9b06      	ldr	r3, [sp, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d05c      	beq.n	80069a8 <_dtoa_r+0xa78>
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fa1d 	bl	8006d30 <_Balloc>
 80068f6:	4605      	mov	r5, r0
 80068f8:	b928      	cbnz	r0, 8006906 <_dtoa_r+0x9d6>
 80068fa:	4b80      	ldr	r3, [pc, #512]	; (8006afc <_dtoa_r+0xbcc>)
 80068fc:	4602      	mov	r2, r0
 80068fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006902:	f7ff bb2e 	b.w	8005f62 <_dtoa_r+0x32>
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	3202      	adds	r2, #2
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	f107 010c 	add.w	r1, r7, #12
 8006910:	300c      	adds	r0, #12
 8006912:	f000 f9ff 	bl	8006d14 <memcpy>
 8006916:	2201      	movs	r2, #1
 8006918:	4629      	mov	r1, r5
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fc1a 	bl	8007154 <__lshift>
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	444b      	add	r3, r9
 800692a:	9307      	str	r3, [sp, #28]
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	46b8      	mov	r8, r7
 8006934:	9306      	str	r3, [sp, #24]
 8006936:	4607      	mov	r7, r0
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	4631      	mov	r1, r6
 800693c:	3b01      	subs	r3, #1
 800693e:	4658      	mov	r0, fp
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	f7ff fa67 	bl	8005e14 <quorem>
 8006946:	4603      	mov	r3, r0
 8006948:	3330      	adds	r3, #48	; 0x30
 800694a:	9004      	str	r0, [sp, #16]
 800694c:	4641      	mov	r1, r8
 800694e:	4658      	mov	r0, fp
 8006950:	9308      	str	r3, [sp, #32]
 8006952:	f000 fc6b 	bl	800722c <__mcmp>
 8006956:	463a      	mov	r2, r7
 8006958:	4681      	mov	r9, r0
 800695a:	4631      	mov	r1, r6
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fc81 	bl	8007264 <__mdiff>
 8006962:	68c2      	ldr	r2, [r0, #12]
 8006964:	9b08      	ldr	r3, [sp, #32]
 8006966:	4605      	mov	r5, r0
 8006968:	bb02      	cbnz	r2, 80069ac <_dtoa_r+0xa7c>
 800696a:	4601      	mov	r1, r0
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fc5d 	bl	800722c <__mcmp>
 8006972:	9b08      	ldr	r3, [sp, #32]
 8006974:	4602      	mov	r2, r0
 8006976:	4629      	mov	r1, r5
 8006978:	4620      	mov	r0, r4
 800697a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800697e:	f000 fa17 	bl	8006db0 <_Bfree>
 8006982:	9b05      	ldr	r3, [sp, #20]
 8006984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006986:	9d01      	ldr	r5, [sp, #4]
 8006988:	ea43 0102 	orr.w	r1, r3, r2
 800698c:	9b06      	ldr	r3, [sp, #24]
 800698e:	430b      	orrs	r3, r1
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	d10d      	bne.n	80069b0 <_dtoa_r+0xa80>
 8006994:	2b39      	cmp	r3, #57	; 0x39
 8006996:	d029      	beq.n	80069ec <_dtoa_r+0xabc>
 8006998:	f1b9 0f00 	cmp.w	r9, #0
 800699c:	dd01      	ble.n	80069a2 <_dtoa_r+0xa72>
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	3331      	adds	r3, #49	; 0x31
 80069a2:	9a02      	ldr	r2, [sp, #8]
 80069a4:	7013      	strb	r3, [r2, #0]
 80069a6:	e774      	b.n	8006892 <_dtoa_r+0x962>
 80069a8:	4638      	mov	r0, r7
 80069aa:	e7b9      	b.n	8006920 <_dtoa_r+0x9f0>
 80069ac:	2201      	movs	r2, #1
 80069ae:	e7e2      	b.n	8006976 <_dtoa_r+0xa46>
 80069b0:	f1b9 0f00 	cmp.w	r9, #0
 80069b4:	db06      	blt.n	80069c4 <_dtoa_r+0xa94>
 80069b6:	9905      	ldr	r1, [sp, #20]
 80069b8:	ea41 0909 	orr.w	r9, r1, r9
 80069bc:	9906      	ldr	r1, [sp, #24]
 80069be:	ea59 0101 	orrs.w	r1, r9, r1
 80069c2:	d120      	bne.n	8006a06 <_dtoa_r+0xad6>
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	ddec      	ble.n	80069a2 <_dtoa_r+0xa72>
 80069c8:	4659      	mov	r1, fp
 80069ca:	2201      	movs	r2, #1
 80069cc:	4620      	mov	r0, r4
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f000 fbc0 	bl	8007154 <__lshift>
 80069d4:	4631      	mov	r1, r6
 80069d6:	4683      	mov	fp, r0
 80069d8:	f000 fc28 	bl	800722c <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	dc02      	bgt.n	80069e8 <_dtoa_r+0xab8>
 80069e2:	d1de      	bne.n	80069a2 <_dtoa_r+0xa72>
 80069e4:	07da      	lsls	r2, r3, #31
 80069e6:	d5dc      	bpl.n	80069a2 <_dtoa_r+0xa72>
 80069e8:	2b39      	cmp	r3, #57	; 0x39
 80069ea:	d1d8      	bne.n	800699e <_dtoa_r+0xa6e>
 80069ec:	9a02      	ldr	r2, [sp, #8]
 80069ee:	2339      	movs	r3, #57	; 0x39
 80069f0:	7013      	strb	r3, [r2, #0]
 80069f2:	462b      	mov	r3, r5
 80069f4:	461d      	mov	r5, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069fc:	2a39      	cmp	r2, #57	; 0x39
 80069fe:	d050      	beq.n	8006aa2 <_dtoa_r+0xb72>
 8006a00:	3201      	adds	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	e745      	b.n	8006892 <_dtoa_r+0x962>
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	dd03      	ble.n	8006a12 <_dtoa_r+0xae2>
 8006a0a:	2b39      	cmp	r3, #57	; 0x39
 8006a0c:	d0ee      	beq.n	80069ec <_dtoa_r+0xabc>
 8006a0e:	3301      	adds	r3, #1
 8006a10:	e7c7      	b.n	80069a2 <_dtoa_r+0xa72>
 8006a12:	9a01      	ldr	r2, [sp, #4]
 8006a14:	9907      	ldr	r1, [sp, #28]
 8006a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a1a:	428a      	cmp	r2, r1
 8006a1c:	d02a      	beq.n	8006a74 <_dtoa_r+0xb44>
 8006a1e:	4659      	mov	r1, fp
 8006a20:	2300      	movs	r3, #0
 8006a22:	220a      	movs	r2, #10
 8006a24:	4620      	mov	r0, r4
 8006a26:	f000 f9e5 	bl	8006df4 <__multadd>
 8006a2a:	45b8      	cmp	r8, r7
 8006a2c:	4683      	mov	fp, r0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	f04f 020a 	mov.w	r2, #10
 8006a36:	4641      	mov	r1, r8
 8006a38:	4620      	mov	r0, r4
 8006a3a:	d107      	bne.n	8006a4c <_dtoa_r+0xb1c>
 8006a3c:	f000 f9da 	bl	8006df4 <__multadd>
 8006a40:	4680      	mov	r8, r0
 8006a42:	4607      	mov	r7, r0
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	3301      	adds	r3, #1
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	e775      	b.n	8006938 <_dtoa_r+0xa08>
 8006a4c:	f000 f9d2 	bl	8006df4 <__multadd>
 8006a50:	4639      	mov	r1, r7
 8006a52:	4680      	mov	r8, r0
 8006a54:	2300      	movs	r3, #0
 8006a56:	220a      	movs	r2, #10
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f9cb 	bl	8006df4 <__multadd>
 8006a5e:	4607      	mov	r7, r0
 8006a60:	e7f0      	b.n	8006a44 <_dtoa_r+0xb14>
 8006a62:	f1b9 0f00 	cmp.w	r9, #0
 8006a66:	9a00      	ldr	r2, [sp, #0]
 8006a68:	bfcc      	ite	gt
 8006a6a:	464d      	movgt	r5, r9
 8006a6c:	2501      	movle	r5, #1
 8006a6e:	4415      	add	r5, r2
 8006a70:	f04f 0800 	mov.w	r8, #0
 8006a74:	4659      	mov	r1, fp
 8006a76:	2201      	movs	r2, #1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	f000 fb6a 	bl	8007154 <__lshift>
 8006a80:	4631      	mov	r1, r6
 8006a82:	4683      	mov	fp, r0
 8006a84:	f000 fbd2 	bl	800722c <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	dcb2      	bgt.n	80069f2 <_dtoa_r+0xac2>
 8006a8c:	d102      	bne.n	8006a94 <_dtoa_r+0xb64>
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	07db      	lsls	r3, r3, #31
 8006a92:	d4ae      	bmi.n	80069f2 <_dtoa_r+0xac2>
 8006a94:	462b      	mov	r3, r5
 8006a96:	461d      	mov	r5, r3
 8006a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9c:	2a30      	cmp	r2, #48	; 0x30
 8006a9e:	d0fa      	beq.n	8006a96 <_dtoa_r+0xb66>
 8006aa0:	e6f7      	b.n	8006892 <_dtoa_r+0x962>
 8006aa2:	9a00      	ldr	r2, [sp, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d1a5      	bne.n	80069f4 <_dtoa_r+0xac4>
 8006aa8:	f10a 0a01 	add.w	sl, sl, #1
 8006aac:	2331      	movs	r3, #49	; 0x31
 8006aae:	e779      	b.n	80069a4 <_dtoa_r+0xa74>
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <_dtoa_r+0xbd0>)
 8006ab2:	f7ff baaf 	b.w	8006014 <_dtoa_r+0xe4>
 8006ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f aa86 	bne.w	8005fca <_dtoa_r+0x9a>
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <_dtoa_r+0xbd4>)
 8006ac0:	f7ff baa8 	b.w	8006014 <_dtoa_r+0xe4>
 8006ac4:	f1b9 0f00 	cmp.w	r9, #0
 8006ac8:	dc03      	bgt.n	8006ad2 <_dtoa_r+0xba2>
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	f73f aec9 	bgt.w	8006864 <_dtoa_r+0x934>
 8006ad2:	9d00      	ldr	r5, [sp, #0]
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4658      	mov	r0, fp
 8006ad8:	f7ff f99c 	bl	8005e14 <quorem>
 8006adc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ae0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ae4:	9a00      	ldr	r2, [sp, #0]
 8006ae6:	1aaa      	subs	r2, r5, r2
 8006ae8:	4591      	cmp	r9, r2
 8006aea:	ddba      	ble.n	8006a62 <_dtoa_r+0xb32>
 8006aec:	4659      	mov	r1, fp
 8006aee:	2300      	movs	r3, #0
 8006af0:	220a      	movs	r2, #10
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f97e 	bl	8006df4 <__multadd>
 8006af8:	4683      	mov	fp, r0
 8006afa:	e7eb      	b.n	8006ad4 <_dtoa_r+0xba4>
 8006afc:	08008033 	.word	0x08008033
 8006b00:	08007f8c 	.word	0x08007f8c
 8006b04:	08007fb0 	.word	0x08007fb0

08006b08 <std>:
 8006b08:	2300      	movs	r3, #0
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b16:	6083      	str	r3, [r0, #8]
 8006b18:	8181      	strh	r1, [r0, #12]
 8006b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b1c:	81c2      	strh	r2, [r0, #14]
 8006b1e:	6183      	str	r3, [r0, #24]
 8006b20:	4619      	mov	r1, r3
 8006b22:	2208      	movs	r2, #8
 8006b24:	305c      	adds	r0, #92	; 0x5c
 8006b26:	f7fe fceb 	bl	8005500 <memset>
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x38>)
 8006b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x3c>)
 8006b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x40>)
 8006b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <std+0x44>)
 8006b38:	6224      	str	r4, [r4, #32]
 8006b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	bf00      	nop
 8006b40:	08007875 	.word	0x08007875
 8006b44:	08007897 	.word	0x08007897
 8006b48:	080078cf 	.word	0x080078cf
 8006b4c:	080078f3 	.word	0x080078f3

08006b50 <_cleanup_r>:
 8006b50:	4901      	ldr	r1, [pc, #4]	; (8006b58 <_cleanup_r+0x8>)
 8006b52:	f000 b8af 	b.w	8006cb4 <_fwalk_reent>
 8006b56:	bf00      	nop
 8006b58:	08007c09 	.word	0x08007c09

08006b5c <__sfmoreglue>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	1e4a      	subs	r2, r1, #1
 8006b60:	2568      	movs	r5, #104	; 0x68
 8006b62:	4355      	muls	r5, r2
 8006b64:	460e      	mov	r6, r1
 8006b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b6a:	f000 fcbf 	bl	80074ec <_malloc_r>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	b140      	cbz	r0, 8006b84 <__sfmoreglue+0x28>
 8006b72:	2100      	movs	r1, #0
 8006b74:	e9c0 1600 	strd	r1, r6, [r0]
 8006b78:	300c      	adds	r0, #12
 8006b7a:	60a0      	str	r0, [r4, #8]
 8006b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b80:	f7fe fcbe 	bl	8005500 <memset>
 8006b84:	4620      	mov	r0, r4
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__sfp_lock_acquire>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__sfp_lock_acquire+0x8>)
 8006b8a:	f000 b8b8 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	2000044c 	.word	0x2000044c

08006b94 <__sfp_lock_release>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__sfp_lock_release+0x8>)
 8006b96:	f000 b8b3 	b.w	8006d00 <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	2000044c 	.word	0x2000044c

08006ba0 <__sinit_lock_acquire>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__sinit_lock_acquire+0x8>)
 8006ba2:	f000 b8ac 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000447 	.word	0x20000447

08006bac <__sinit_lock_release>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sinit_lock_release+0x8>)
 8006bae:	f000 b8a7 	b.w	8006d00 <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000447 	.word	0x20000447

08006bb8 <__sinit>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	f7ff fff0 	bl	8006ba0 <__sinit_lock_acquire>
 8006bc0:	69a3      	ldr	r3, [r4, #24]
 8006bc2:	b11b      	cbz	r3, 8006bcc <__sinit+0x14>
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f7ff bff0 	b.w	8006bac <__sinit_lock_release>
 8006bcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bd2:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <__sinit+0x68>)
 8006bd4:	4a13      	ldr	r2, [pc, #76]	; (8006c24 <__sinit+0x6c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	bf04      	itt	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	61a3      	streq	r3, [r4, #24]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f820 	bl	8006c28 <__sfp>
 8006be8:	6060      	str	r0, [r4, #4]
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 f81c 	bl	8006c28 <__sfp>
 8006bf0:	60a0      	str	r0, [r4, #8]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 f818 	bl	8006c28 <__sfp>
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	60e0      	str	r0, [r4, #12]
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	6860      	ldr	r0, [r4, #4]
 8006c00:	f7ff ff82 	bl	8006b08 <std>
 8006c04:	68a0      	ldr	r0, [r4, #8]
 8006c06:	2201      	movs	r2, #1
 8006c08:	2109      	movs	r1, #9
 8006c0a:	f7ff ff7d 	bl	8006b08 <std>
 8006c0e:	68e0      	ldr	r0, [r4, #12]
 8006c10:	2202      	movs	r2, #2
 8006c12:	2112      	movs	r1, #18
 8006c14:	f7ff ff78 	bl	8006b08 <std>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	61a3      	str	r3, [r4, #24]
 8006c1c:	e7d2      	b.n	8006bc4 <__sinit+0xc>
 8006c1e:	bf00      	nop
 8006c20:	08007f78 	.word	0x08007f78
 8006c24:	08006b51 	.word	0x08006b51

08006c28 <__sfp>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	f7ff ffac 	bl	8006b88 <__sfp_lock_acquire>
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <__sfp+0x84>)
 8006c32:	681e      	ldr	r6, [r3, #0]
 8006c34:	69b3      	ldr	r3, [r6, #24]
 8006c36:	b913      	cbnz	r3, 8006c3e <__sfp+0x16>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff ffbd 	bl	8006bb8 <__sinit>
 8006c3e:	3648      	adds	r6, #72	; 0x48
 8006c40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	d503      	bpl.n	8006c50 <__sfp+0x28>
 8006c48:	6833      	ldr	r3, [r6, #0]
 8006c4a:	b30b      	cbz	r3, 8006c90 <__sfp+0x68>
 8006c4c:	6836      	ldr	r6, [r6, #0]
 8006c4e:	e7f7      	b.n	8006c40 <__sfp+0x18>
 8006c50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c54:	b9d5      	cbnz	r5, 8006c8c <__sfp+0x64>
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <__sfp+0x88>)
 8006c58:	60e3      	str	r3, [r4, #12]
 8006c5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c5e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c60:	f000 f84c 	bl	8006cfc <__retarget_lock_init_recursive>
 8006c64:	f7ff ff96 	bl	8006b94 <__sfp_lock_release>
 8006c68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c70:	6025      	str	r5, [r4, #0]
 8006c72:	61a5      	str	r5, [r4, #24]
 8006c74:	2208      	movs	r2, #8
 8006c76:	4629      	mov	r1, r5
 8006c78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c7c:	f7fe fc40 	bl	8005500 <memset>
 8006c80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c88:	4620      	mov	r0, r4
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8c:	3468      	adds	r4, #104	; 0x68
 8006c8e:	e7d9      	b.n	8006c44 <__sfp+0x1c>
 8006c90:	2104      	movs	r1, #4
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ff62 	bl	8006b5c <__sfmoreglue>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	6030      	str	r0, [r6, #0]
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d1d5      	bne.n	8006c4c <__sfp+0x24>
 8006ca0:	f7ff ff78 	bl	8006b94 <__sfp_lock_release>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	e7ee      	b.n	8006c88 <__sfp+0x60>
 8006caa:	bf00      	nop
 8006cac:	08007f78 	.word	0x08007f78
 8006cb0:	ffff0001 	.word	0xffff0001

08006cb4 <_fwalk_reent>:
 8006cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb8:	4606      	mov	r6, r0
 8006cba:	4688      	mov	r8, r1
 8006cbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cc0:	2700      	movs	r7, #0
 8006cc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc6:	f1b9 0901 	subs.w	r9, r9, #1
 8006cca:	d505      	bpl.n	8006cd8 <_fwalk_reent+0x24>
 8006ccc:	6824      	ldr	r4, [r4, #0]
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d1f7      	bne.n	8006cc2 <_fwalk_reent+0xe>
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	89ab      	ldrh	r3, [r5, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d907      	bls.n	8006cee <_fwalk_reent+0x3a>
 8006cde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	d003      	beq.n	8006cee <_fwalk_reent+0x3a>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4630      	mov	r0, r6
 8006cea:	47c0      	blx	r8
 8006cec:	4307      	orrs	r7, r0
 8006cee:	3568      	adds	r5, #104	; 0x68
 8006cf0:	e7e9      	b.n	8006cc6 <_fwalk_reent+0x12>
	...

08006cf4 <_localeconv_r>:
 8006cf4:	4800      	ldr	r0, [pc, #0]	; (8006cf8 <_localeconv_r+0x4>)
 8006cf6:	4770      	bx	lr
 8006cf8:	20000160 	.word	0x20000160

08006cfc <__retarget_lock_init_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__retarget_lock_acquire_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <__retarget_lock_release_recursive>:
 8006d00:	4770      	bx	lr
	...

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 bbef 	b.w	80074ec <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	2000000c 	.word	0x2000000c

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2a:	4291      	cmp	r1, r2
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <_Balloc>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d34:	4604      	mov	r4, r0
 8006d36:	460d      	mov	r5, r1
 8006d38:	b976      	cbnz	r6, 8006d58 <_Balloc+0x28>
 8006d3a:	2010      	movs	r0, #16
 8006d3c:	f7ff ffe2 	bl	8006d04 <malloc>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6260      	str	r0, [r4, #36]	; 0x24
 8006d44:	b920      	cbnz	r0, 8006d50 <_Balloc+0x20>
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <_Balloc+0x78>)
 8006d48:	4818      	ldr	r0, [pc, #96]	; (8006dac <_Balloc+0x7c>)
 8006d4a:	2166      	movs	r1, #102	; 0x66
 8006d4c:	f000 fea8 	bl	8007aa0 <__assert_func>
 8006d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d54:	6006      	str	r6, [r0, #0]
 8006d56:	60c6      	str	r6, [r0, #12]
 8006d58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d5a:	68f3      	ldr	r3, [r6, #12]
 8006d5c:	b183      	cbz	r3, 8006d80 <_Balloc+0x50>
 8006d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d66:	b9b8      	cbnz	r0, 8006d98 <_Balloc+0x68>
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d6e:	1d72      	adds	r2, r6, #5
 8006d70:	0092      	lsls	r2, r2, #2
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fb5a 	bl	800742c <_calloc_r>
 8006d78:	b160      	cbz	r0, 8006d94 <_Balloc+0x64>
 8006d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d7e:	e00e      	b.n	8006d9e <_Balloc+0x6e>
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	2104      	movs	r1, #4
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fb51 	bl	800742c <_calloc_r>
 8006d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d8c:	60f0      	str	r0, [r6, #12]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e4      	bne.n	8006d5e <_Balloc+0x2e>
 8006d94:	2000      	movs	r0, #0
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	6802      	ldr	r2, [r0, #0]
 8006d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006da4:	e7f7      	b.n	8006d96 <_Balloc+0x66>
 8006da6:	bf00      	nop
 8006da8:	08007fbd 	.word	0x08007fbd
 8006dac:	080080a4 	.word	0x080080a4

08006db0 <_Bfree>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b976      	cbnz	r6, 8006dd8 <_Bfree+0x28>
 8006dba:	2010      	movs	r0, #16
 8006dbc:	f7ff ffa2 	bl	8006d04 <malloc>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6268      	str	r0, [r5, #36]	; 0x24
 8006dc4:	b920      	cbnz	r0, 8006dd0 <_Bfree+0x20>
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <_Bfree+0x3c>)
 8006dc8:	4809      	ldr	r0, [pc, #36]	; (8006df0 <_Bfree+0x40>)
 8006dca:	218a      	movs	r1, #138	; 0x8a
 8006dcc:	f000 fe68 	bl	8007aa0 <__assert_func>
 8006dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd4:	6006      	str	r6, [r0, #0]
 8006dd6:	60c6      	str	r6, [r0, #12]
 8006dd8:	b13c      	cbz	r4, 8006dea <_Bfree+0x3a>
 8006dda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006de4:	6021      	str	r1, [r4, #0]
 8006de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	08007fbd 	.word	0x08007fbd
 8006df0:	080080a4 	.word	0x080080a4

08006df4 <__multadd>:
 8006df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df8:	690e      	ldr	r6, [r1, #16]
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	4698      	mov	r8, r3
 8006dfe:	460c      	mov	r4, r1
 8006e00:	f101 0014 	add.w	r0, r1, #20
 8006e04:	2300      	movs	r3, #0
 8006e06:	6805      	ldr	r5, [r0, #0]
 8006e08:	b2a9      	uxth	r1, r5
 8006e0a:	fb02 8101 	mla	r1, r2, r1, r8
 8006e0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e12:	0c2d      	lsrs	r5, r5, #16
 8006e14:	fb02 c505 	mla	r5, r2, r5, ip
 8006e18:	b289      	uxth	r1, r1
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e20:	429e      	cmp	r6, r3
 8006e22:	f840 1b04 	str.w	r1, [r0], #4
 8006e26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e2a:	dcec      	bgt.n	8006e06 <__multadd+0x12>
 8006e2c:	f1b8 0f00 	cmp.w	r8, #0
 8006e30:	d022      	beq.n	8006e78 <__multadd+0x84>
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	42b3      	cmp	r3, r6
 8006e36:	dc19      	bgt.n	8006e6c <__multadd+0x78>
 8006e38:	6861      	ldr	r1, [r4, #4]
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	3101      	adds	r1, #1
 8006e3e:	f7ff ff77 	bl	8006d30 <_Balloc>
 8006e42:	4605      	mov	r5, r0
 8006e44:	b928      	cbnz	r0, 8006e52 <__multadd+0x5e>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <__multadd+0x8c>)
 8006e4a:	480e      	ldr	r0, [pc, #56]	; (8006e84 <__multadd+0x90>)
 8006e4c:	21b5      	movs	r1, #181	; 0xb5
 8006e4e:	f000 fe27 	bl	8007aa0 <__assert_func>
 8006e52:	6922      	ldr	r2, [r4, #16]
 8006e54:	3202      	adds	r2, #2
 8006e56:	f104 010c 	add.w	r1, r4, #12
 8006e5a:	0092      	lsls	r2, r2, #2
 8006e5c:	300c      	adds	r0, #12
 8006e5e:	f7ff ff59 	bl	8006d14 <memcpy>
 8006e62:	4621      	mov	r1, r4
 8006e64:	4638      	mov	r0, r7
 8006e66:	f7ff ffa3 	bl	8006db0 <_Bfree>
 8006e6a:	462c      	mov	r4, r5
 8006e6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006e70:	3601      	adds	r6, #1
 8006e72:	f8c3 8014 	str.w	r8, [r3, #20]
 8006e76:	6126      	str	r6, [r4, #16]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7e:	bf00      	nop
 8006e80:	08008033 	.word	0x08008033
 8006e84:	080080a4 	.word	0x080080a4

08006e88 <__hi0bits>:
 8006e88:	0c03      	lsrs	r3, r0, #16
 8006e8a:	041b      	lsls	r3, r3, #16
 8006e8c:	b9d3      	cbnz	r3, 8006ec4 <__hi0bits+0x3c>
 8006e8e:	0400      	lsls	r0, r0, #16
 8006e90:	2310      	movs	r3, #16
 8006e92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e96:	bf04      	itt	eq
 8006e98:	0200      	lsleq	r0, r0, #8
 8006e9a:	3308      	addeq	r3, #8
 8006e9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ea0:	bf04      	itt	eq
 8006ea2:	0100      	lsleq	r0, r0, #4
 8006ea4:	3304      	addeq	r3, #4
 8006ea6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eaa:	bf04      	itt	eq
 8006eac:	0080      	lsleq	r0, r0, #2
 8006eae:	3302      	addeq	r3, #2
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	db05      	blt.n	8006ec0 <__hi0bits+0x38>
 8006eb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006eb8:	f103 0301 	add.w	r3, r3, #1
 8006ebc:	bf08      	it	eq
 8006ebe:	2320      	moveq	r3, #32
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	4770      	bx	lr
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e7e4      	b.n	8006e92 <__hi0bits+0xa>

08006ec8 <__lo0bits>:
 8006ec8:	6803      	ldr	r3, [r0, #0]
 8006eca:	f013 0207 	ands.w	r2, r3, #7
 8006ece:	4601      	mov	r1, r0
 8006ed0:	d00b      	beq.n	8006eea <__lo0bits+0x22>
 8006ed2:	07da      	lsls	r2, r3, #31
 8006ed4:	d424      	bmi.n	8006f20 <__lo0bits+0x58>
 8006ed6:	0798      	lsls	r0, r3, #30
 8006ed8:	bf49      	itett	mi
 8006eda:	085b      	lsrmi	r3, r3, #1
 8006edc:	089b      	lsrpl	r3, r3, #2
 8006ede:	2001      	movmi	r0, #1
 8006ee0:	600b      	strmi	r3, [r1, #0]
 8006ee2:	bf5c      	itt	pl
 8006ee4:	600b      	strpl	r3, [r1, #0]
 8006ee6:	2002      	movpl	r0, #2
 8006ee8:	4770      	bx	lr
 8006eea:	b298      	uxth	r0, r3
 8006eec:	b9b0      	cbnz	r0, 8006f1c <__lo0bits+0x54>
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ef6:	bf04      	itt	eq
 8006ef8:	0a1b      	lsreq	r3, r3, #8
 8006efa:	3008      	addeq	r0, #8
 8006efc:	071a      	lsls	r2, r3, #28
 8006efe:	bf04      	itt	eq
 8006f00:	091b      	lsreq	r3, r3, #4
 8006f02:	3004      	addeq	r0, #4
 8006f04:	079a      	lsls	r2, r3, #30
 8006f06:	bf04      	itt	eq
 8006f08:	089b      	lsreq	r3, r3, #2
 8006f0a:	3002      	addeq	r0, #2
 8006f0c:	07da      	lsls	r2, r3, #31
 8006f0e:	d403      	bmi.n	8006f18 <__lo0bits+0x50>
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	f100 0001 	add.w	r0, r0, #1
 8006f16:	d005      	beq.n	8006f24 <__lo0bits+0x5c>
 8006f18:	600b      	str	r3, [r1, #0]
 8006f1a:	4770      	bx	lr
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	e7e8      	b.n	8006ef2 <__lo0bits+0x2a>
 8006f20:	2000      	movs	r0, #0
 8006f22:	4770      	bx	lr
 8006f24:	2020      	movs	r0, #32
 8006f26:	4770      	bx	lr

08006f28 <__i2b>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	f7ff feff 	bl	8006d30 <_Balloc>
 8006f32:	4602      	mov	r2, r0
 8006f34:	b928      	cbnz	r0, 8006f42 <__i2b+0x1a>
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <__i2b+0x24>)
 8006f38:	4805      	ldr	r0, [pc, #20]	; (8006f50 <__i2b+0x28>)
 8006f3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f3e:	f000 fdaf 	bl	8007aa0 <__assert_func>
 8006f42:	2301      	movs	r3, #1
 8006f44:	6144      	str	r4, [r0, #20]
 8006f46:	6103      	str	r3, [r0, #16]
 8006f48:	bd10      	pop	{r4, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08008033 	.word	0x08008033
 8006f50:	080080a4 	.word	0x080080a4

08006f54 <__multiply>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	4614      	mov	r4, r2
 8006f5a:	690a      	ldr	r2, [r1, #16]
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bfb8      	it	lt
 8006f62:	460b      	movlt	r3, r1
 8006f64:	460d      	mov	r5, r1
 8006f66:	bfbc      	itt	lt
 8006f68:	4625      	movlt	r5, r4
 8006f6a:	461c      	movlt	r4, r3
 8006f6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f74:	68ab      	ldr	r3, [r5, #8]
 8006f76:	6869      	ldr	r1, [r5, #4]
 8006f78:	eb0a 0709 	add.w	r7, sl, r9
 8006f7c:	42bb      	cmp	r3, r7
 8006f7e:	b085      	sub	sp, #20
 8006f80:	bfb8      	it	lt
 8006f82:	3101      	addlt	r1, #1
 8006f84:	f7ff fed4 	bl	8006d30 <_Balloc>
 8006f88:	b930      	cbnz	r0, 8006f98 <__multiply+0x44>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b42      	ldr	r3, [pc, #264]	; (8007098 <__multiply+0x144>)
 8006f8e:	4843      	ldr	r0, [pc, #268]	; (800709c <__multiply+0x148>)
 8006f90:	f240 115d 	movw	r1, #349	; 0x15d
 8006f94:	f000 fd84 	bl	8007aa0 <__assert_func>
 8006f98:	f100 0614 	add.w	r6, r0, #20
 8006f9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006fa0:	4633      	mov	r3, r6
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4543      	cmp	r3, r8
 8006fa6:	d31e      	bcc.n	8006fe6 <__multiply+0x92>
 8006fa8:	f105 0c14 	add.w	ip, r5, #20
 8006fac:	f104 0314 	add.w	r3, r4, #20
 8006fb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006fb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006fb8:	9202      	str	r2, [sp, #8]
 8006fba:	ebac 0205 	sub.w	r2, ip, r5
 8006fbe:	3a15      	subs	r2, #21
 8006fc0:	f022 0203 	bic.w	r2, r2, #3
 8006fc4:	3204      	adds	r2, #4
 8006fc6:	f105 0115 	add.w	r1, r5, #21
 8006fca:	458c      	cmp	ip, r1
 8006fcc:	bf38      	it	cc
 8006fce:	2204      	movcc	r2, #4
 8006fd0:	9201      	str	r2, [sp, #4]
 8006fd2:	9a02      	ldr	r2, [sp, #8]
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d808      	bhi.n	8006fec <__multiply+0x98>
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	dc55      	bgt.n	800708a <__multiply+0x136>
 8006fde:	6107      	str	r7, [r0, #16]
 8006fe0:	b005      	add	sp, #20
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	f843 2b04 	str.w	r2, [r3], #4
 8006fea:	e7db      	b.n	8006fa4 <__multiply+0x50>
 8006fec:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ff0:	f1ba 0f00 	cmp.w	sl, #0
 8006ff4:	d020      	beq.n	8007038 <__multiply+0xe4>
 8006ff6:	f105 0e14 	add.w	lr, r5, #20
 8006ffa:	46b1      	mov	r9, r6
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007002:	f8d9 b000 	ldr.w	fp, [r9]
 8007006:	b2a1      	uxth	r1, r4
 8007008:	fa1f fb8b 	uxth.w	fp, fp
 800700c:	fb0a b101 	mla	r1, sl, r1, fp
 8007010:	4411      	add	r1, r2
 8007012:	f8d9 2000 	ldr.w	r2, [r9]
 8007016:	0c24      	lsrs	r4, r4, #16
 8007018:	0c12      	lsrs	r2, r2, #16
 800701a:	fb0a 2404 	mla	r4, sl, r4, r2
 800701e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007022:	b289      	uxth	r1, r1
 8007024:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007028:	45f4      	cmp	ip, lr
 800702a:	f849 1b04 	str.w	r1, [r9], #4
 800702e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007032:	d8e4      	bhi.n	8006ffe <__multiply+0xaa>
 8007034:	9901      	ldr	r1, [sp, #4]
 8007036:	5072      	str	r2, [r6, r1]
 8007038:	9a03      	ldr	r2, [sp, #12]
 800703a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800703e:	3304      	adds	r3, #4
 8007040:	f1b9 0f00 	cmp.w	r9, #0
 8007044:	d01f      	beq.n	8007086 <__multiply+0x132>
 8007046:	6834      	ldr	r4, [r6, #0]
 8007048:	f105 0114 	add.w	r1, r5, #20
 800704c:	46b6      	mov	lr, r6
 800704e:	f04f 0a00 	mov.w	sl, #0
 8007052:	880a      	ldrh	r2, [r1, #0]
 8007054:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007058:	fb09 b202 	mla	r2, r9, r2, fp
 800705c:	4492      	add	sl, r2
 800705e:	b2a4      	uxth	r4, r4
 8007060:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007064:	f84e 4b04 	str.w	r4, [lr], #4
 8007068:	f851 4b04 	ldr.w	r4, [r1], #4
 800706c:	f8be 2000 	ldrh.w	r2, [lr]
 8007070:	0c24      	lsrs	r4, r4, #16
 8007072:	fb09 2404 	mla	r4, r9, r4, r2
 8007076:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800707a:	458c      	cmp	ip, r1
 800707c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007080:	d8e7      	bhi.n	8007052 <__multiply+0xfe>
 8007082:	9a01      	ldr	r2, [sp, #4]
 8007084:	50b4      	str	r4, [r6, r2]
 8007086:	3604      	adds	r6, #4
 8007088:	e7a3      	b.n	8006fd2 <__multiply+0x7e>
 800708a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1a5      	bne.n	8006fde <__multiply+0x8a>
 8007092:	3f01      	subs	r7, #1
 8007094:	e7a1      	b.n	8006fda <__multiply+0x86>
 8007096:	bf00      	nop
 8007098:	08008033 	.word	0x08008033
 800709c:	080080a4 	.word	0x080080a4

080070a0 <__pow5mult>:
 80070a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a4:	4615      	mov	r5, r2
 80070a6:	f012 0203 	ands.w	r2, r2, #3
 80070aa:	4606      	mov	r6, r0
 80070ac:	460f      	mov	r7, r1
 80070ae:	d007      	beq.n	80070c0 <__pow5mult+0x20>
 80070b0:	4c25      	ldr	r4, [pc, #148]	; (8007148 <__pow5mult+0xa8>)
 80070b2:	3a01      	subs	r2, #1
 80070b4:	2300      	movs	r3, #0
 80070b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ba:	f7ff fe9b 	bl	8006df4 <__multadd>
 80070be:	4607      	mov	r7, r0
 80070c0:	10ad      	asrs	r5, r5, #2
 80070c2:	d03d      	beq.n	8007140 <__pow5mult+0xa0>
 80070c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070c6:	b97c      	cbnz	r4, 80070e8 <__pow5mult+0x48>
 80070c8:	2010      	movs	r0, #16
 80070ca:	f7ff fe1b 	bl	8006d04 <malloc>
 80070ce:	4602      	mov	r2, r0
 80070d0:	6270      	str	r0, [r6, #36]	; 0x24
 80070d2:	b928      	cbnz	r0, 80070e0 <__pow5mult+0x40>
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <__pow5mult+0xac>)
 80070d6:	481e      	ldr	r0, [pc, #120]	; (8007150 <__pow5mult+0xb0>)
 80070d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070dc:	f000 fce0 	bl	8007aa0 <__assert_func>
 80070e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070e4:	6004      	str	r4, [r0, #0]
 80070e6:	60c4      	str	r4, [r0, #12]
 80070e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070f0:	b94c      	cbnz	r4, 8007106 <__pow5mult+0x66>
 80070f2:	f240 2171 	movw	r1, #625	; 0x271
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ff16 	bl	8006f28 <__i2b>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007102:	4604      	mov	r4, r0
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	07eb      	lsls	r3, r5, #31
 800710c:	d50a      	bpl.n	8007124 <__pow5mult+0x84>
 800710e:	4639      	mov	r1, r7
 8007110:	4622      	mov	r2, r4
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ff1e 	bl	8006f54 <__multiply>
 8007118:	4639      	mov	r1, r7
 800711a:	4680      	mov	r8, r0
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff fe47 	bl	8006db0 <_Bfree>
 8007122:	4647      	mov	r7, r8
 8007124:	106d      	asrs	r5, r5, #1
 8007126:	d00b      	beq.n	8007140 <__pow5mult+0xa0>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	b938      	cbnz	r0, 800713c <__pow5mult+0x9c>
 800712c:	4622      	mov	r2, r4
 800712e:	4621      	mov	r1, r4
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ff0f 	bl	8006f54 <__multiply>
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f8c0 9000 	str.w	r9, [r0]
 800713c:	4604      	mov	r4, r0
 800713e:	e7e4      	b.n	800710a <__pow5mult+0x6a>
 8007140:	4638      	mov	r0, r7
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007146:	bf00      	nop
 8007148:	080081f8 	.word	0x080081f8
 800714c:	08007fbd 	.word	0x08007fbd
 8007150:	080080a4 	.word	0x080080a4

08007154 <__lshift>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	6849      	ldr	r1, [r1, #4]
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	4607      	mov	r7, r0
 8007166:	4691      	mov	r9, r2
 8007168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800716c:	f108 0601 	add.w	r6, r8, #1
 8007170:	42b3      	cmp	r3, r6
 8007172:	db0b      	blt.n	800718c <__lshift+0x38>
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff fddb 	bl	8006d30 <_Balloc>
 800717a:	4605      	mov	r5, r0
 800717c:	b948      	cbnz	r0, 8007192 <__lshift+0x3e>
 800717e:	4602      	mov	r2, r0
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <__lshift+0xd0>)
 8007182:	4829      	ldr	r0, [pc, #164]	; (8007228 <__lshift+0xd4>)
 8007184:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007188:	f000 fc8a 	bl	8007aa0 <__assert_func>
 800718c:	3101      	adds	r1, #1
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	e7ee      	b.n	8007170 <__lshift+0x1c>
 8007192:	2300      	movs	r3, #0
 8007194:	f100 0114 	add.w	r1, r0, #20
 8007198:	f100 0210 	add.w	r2, r0, #16
 800719c:	4618      	mov	r0, r3
 800719e:	4553      	cmp	r3, sl
 80071a0:	db33      	blt.n	800720a <__lshift+0xb6>
 80071a2:	6920      	ldr	r0, [r4, #16]
 80071a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071a8:	f104 0314 	add.w	r3, r4, #20
 80071ac:	f019 091f 	ands.w	r9, r9, #31
 80071b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071b8:	d02b      	beq.n	8007212 <__lshift+0xbe>
 80071ba:	f1c9 0e20 	rsb	lr, r9, #32
 80071be:	468a      	mov	sl, r1
 80071c0:	2200      	movs	r2, #0
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	fa00 f009 	lsl.w	r0, r0, r9
 80071c8:	4302      	orrs	r2, r0
 80071ca:	f84a 2b04 	str.w	r2, [sl], #4
 80071ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d2:	459c      	cmp	ip, r3
 80071d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071d8:	d8f3      	bhi.n	80071c2 <__lshift+0x6e>
 80071da:	ebac 0304 	sub.w	r3, ip, r4
 80071de:	3b15      	subs	r3, #21
 80071e0:	f023 0303 	bic.w	r3, r3, #3
 80071e4:	3304      	adds	r3, #4
 80071e6:	f104 0015 	add.w	r0, r4, #21
 80071ea:	4584      	cmp	ip, r0
 80071ec:	bf38      	it	cc
 80071ee:	2304      	movcc	r3, #4
 80071f0:	50ca      	str	r2, [r1, r3]
 80071f2:	b10a      	cbz	r2, 80071f8 <__lshift+0xa4>
 80071f4:	f108 0602 	add.w	r6, r8, #2
 80071f8:	3e01      	subs	r6, #1
 80071fa:	4638      	mov	r0, r7
 80071fc:	612e      	str	r6, [r5, #16]
 80071fe:	4621      	mov	r1, r4
 8007200:	f7ff fdd6 	bl	8006db0 <_Bfree>
 8007204:	4628      	mov	r0, r5
 8007206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720a:	f842 0f04 	str.w	r0, [r2, #4]!
 800720e:	3301      	adds	r3, #1
 8007210:	e7c5      	b.n	800719e <__lshift+0x4a>
 8007212:	3904      	subs	r1, #4
 8007214:	f853 2b04 	ldr.w	r2, [r3], #4
 8007218:	f841 2f04 	str.w	r2, [r1, #4]!
 800721c:	459c      	cmp	ip, r3
 800721e:	d8f9      	bhi.n	8007214 <__lshift+0xc0>
 8007220:	e7ea      	b.n	80071f8 <__lshift+0xa4>
 8007222:	bf00      	nop
 8007224:	08008033 	.word	0x08008033
 8007228:	080080a4 	.word	0x080080a4

0800722c <__mcmp>:
 800722c:	b530      	push	{r4, r5, lr}
 800722e:	6902      	ldr	r2, [r0, #16]
 8007230:	690c      	ldr	r4, [r1, #16]
 8007232:	1b12      	subs	r2, r2, r4
 8007234:	d10e      	bne.n	8007254 <__mcmp+0x28>
 8007236:	f100 0314 	add.w	r3, r0, #20
 800723a:	3114      	adds	r1, #20
 800723c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800724c:	42a5      	cmp	r5, r4
 800724e:	d003      	beq.n	8007258 <__mcmp+0x2c>
 8007250:	d305      	bcc.n	800725e <__mcmp+0x32>
 8007252:	2201      	movs	r2, #1
 8007254:	4610      	mov	r0, r2
 8007256:	bd30      	pop	{r4, r5, pc}
 8007258:	4283      	cmp	r3, r0
 800725a:	d3f3      	bcc.n	8007244 <__mcmp+0x18>
 800725c:	e7fa      	b.n	8007254 <__mcmp+0x28>
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e7f7      	b.n	8007254 <__mcmp+0x28>

08007264 <__mdiff>:
 8007264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	460c      	mov	r4, r1
 800726a:	4606      	mov	r6, r0
 800726c:	4611      	mov	r1, r2
 800726e:	4620      	mov	r0, r4
 8007270:	4617      	mov	r7, r2
 8007272:	f7ff ffdb 	bl	800722c <__mcmp>
 8007276:	1e05      	subs	r5, r0, #0
 8007278:	d110      	bne.n	800729c <__mdiff+0x38>
 800727a:	4629      	mov	r1, r5
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff fd57 	bl	8006d30 <_Balloc>
 8007282:	b930      	cbnz	r0, 8007292 <__mdiff+0x2e>
 8007284:	4b39      	ldr	r3, [pc, #228]	; (800736c <__mdiff+0x108>)
 8007286:	4602      	mov	r2, r0
 8007288:	f240 2132 	movw	r1, #562	; 0x232
 800728c:	4838      	ldr	r0, [pc, #224]	; (8007370 <__mdiff+0x10c>)
 800728e:	f000 fc07 	bl	8007aa0 <__assert_func>
 8007292:	2301      	movs	r3, #1
 8007294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	bfa4      	itt	ge
 800729e:	463b      	movge	r3, r7
 80072a0:	4627      	movge	r7, r4
 80072a2:	4630      	mov	r0, r6
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	bfa6      	itte	ge
 80072a8:	461c      	movge	r4, r3
 80072aa:	2500      	movge	r5, #0
 80072ac:	2501      	movlt	r5, #1
 80072ae:	f7ff fd3f 	bl	8006d30 <_Balloc>
 80072b2:	b920      	cbnz	r0, 80072be <__mdiff+0x5a>
 80072b4:	4b2d      	ldr	r3, [pc, #180]	; (800736c <__mdiff+0x108>)
 80072b6:	4602      	mov	r2, r0
 80072b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072bc:	e7e6      	b.n	800728c <__mdiff+0x28>
 80072be:	693e      	ldr	r6, [r7, #16]
 80072c0:	60c5      	str	r5, [r0, #12]
 80072c2:	6925      	ldr	r5, [r4, #16]
 80072c4:	f107 0114 	add.w	r1, r7, #20
 80072c8:	f104 0914 	add.w	r9, r4, #20
 80072cc:	f100 0e14 	add.w	lr, r0, #20
 80072d0:	f107 0210 	add.w	r2, r7, #16
 80072d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80072d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80072dc:	46f2      	mov	sl, lr
 80072de:	2700      	movs	r7, #0
 80072e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072e8:	fa1f f883 	uxth.w	r8, r3
 80072ec:	fa17 f78b 	uxtah	r7, r7, fp
 80072f0:	0c1b      	lsrs	r3, r3, #16
 80072f2:	eba7 0808 	sub.w	r8, r7, r8
 80072f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072fe:	fa1f f888 	uxth.w	r8, r8
 8007302:	141f      	asrs	r7, r3, #16
 8007304:	454d      	cmp	r5, r9
 8007306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800730a:	f84a 3b04 	str.w	r3, [sl], #4
 800730e:	d8e7      	bhi.n	80072e0 <__mdiff+0x7c>
 8007310:	1b2b      	subs	r3, r5, r4
 8007312:	3b15      	subs	r3, #21
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	3304      	adds	r3, #4
 800731a:	3415      	adds	r4, #21
 800731c:	42a5      	cmp	r5, r4
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	4419      	add	r1, r3
 8007324:	4473      	add	r3, lr
 8007326:	469e      	mov	lr, r3
 8007328:	460d      	mov	r5, r1
 800732a:	4565      	cmp	r5, ip
 800732c:	d30e      	bcc.n	800734c <__mdiff+0xe8>
 800732e:	f10c 0203 	add.w	r2, ip, #3
 8007332:	1a52      	subs	r2, r2, r1
 8007334:	f022 0203 	bic.w	r2, r2, #3
 8007338:	3903      	subs	r1, #3
 800733a:	458c      	cmp	ip, r1
 800733c:	bf38      	it	cc
 800733e:	2200      	movcc	r2, #0
 8007340:	441a      	add	r2, r3
 8007342:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007346:	b17b      	cbz	r3, 8007368 <__mdiff+0x104>
 8007348:	6106      	str	r6, [r0, #16]
 800734a:	e7a5      	b.n	8007298 <__mdiff+0x34>
 800734c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007350:	fa17 f488 	uxtah	r4, r7, r8
 8007354:	1422      	asrs	r2, r4, #16
 8007356:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800735a:	b2a4      	uxth	r4, r4
 800735c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007360:	f84e 4b04 	str.w	r4, [lr], #4
 8007364:	1417      	asrs	r7, r2, #16
 8007366:	e7e0      	b.n	800732a <__mdiff+0xc6>
 8007368:	3e01      	subs	r6, #1
 800736a:	e7ea      	b.n	8007342 <__mdiff+0xde>
 800736c:	08008033 	.word	0x08008033
 8007370:	080080a4 	.word	0x080080a4

08007374 <__d2b>:
 8007374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4689      	mov	r9, r1
 800737a:	2101      	movs	r1, #1
 800737c:	ec57 6b10 	vmov	r6, r7, d0
 8007380:	4690      	mov	r8, r2
 8007382:	f7ff fcd5 	bl	8006d30 <_Balloc>
 8007386:	4604      	mov	r4, r0
 8007388:	b930      	cbnz	r0, 8007398 <__d2b+0x24>
 800738a:	4602      	mov	r2, r0
 800738c:	4b25      	ldr	r3, [pc, #148]	; (8007424 <__d2b+0xb0>)
 800738e:	4826      	ldr	r0, [pc, #152]	; (8007428 <__d2b+0xb4>)
 8007390:	f240 310a 	movw	r1, #778	; 0x30a
 8007394:	f000 fb84 	bl	8007aa0 <__assert_func>
 8007398:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800739c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073a0:	bb35      	cbnz	r5, 80073f0 <__d2b+0x7c>
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	d028      	beq.n	80073fa <__d2b+0x86>
 80073a8:	4668      	mov	r0, sp
 80073aa:	9600      	str	r6, [sp, #0]
 80073ac:	f7ff fd8c 	bl	8006ec8 <__lo0bits>
 80073b0:	9900      	ldr	r1, [sp, #0]
 80073b2:	b300      	cbz	r0, 80073f6 <__d2b+0x82>
 80073b4:	9a01      	ldr	r2, [sp, #4]
 80073b6:	f1c0 0320 	rsb	r3, r0, #32
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	430b      	orrs	r3, r1
 80073c0:	40c2      	lsrs	r2, r0
 80073c2:	6163      	str	r3, [r4, #20]
 80073c4:	9201      	str	r2, [sp, #4]
 80073c6:	9b01      	ldr	r3, [sp, #4]
 80073c8:	61a3      	str	r3, [r4, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bf14      	ite	ne
 80073ce:	2202      	movne	r2, #2
 80073d0:	2201      	moveq	r2, #1
 80073d2:	6122      	str	r2, [r4, #16]
 80073d4:	b1d5      	cbz	r5, 800740c <__d2b+0x98>
 80073d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073da:	4405      	add	r5, r0
 80073dc:	f8c9 5000 	str.w	r5, [r9]
 80073e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073e4:	f8c8 0000 	str.w	r0, [r8]
 80073e8:	4620      	mov	r0, r4
 80073ea:	b003      	add	sp, #12
 80073ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f4:	e7d5      	b.n	80073a2 <__d2b+0x2e>
 80073f6:	6161      	str	r1, [r4, #20]
 80073f8:	e7e5      	b.n	80073c6 <__d2b+0x52>
 80073fa:	a801      	add	r0, sp, #4
 80073fc:	f7ff fd64 	bl	8006ec8 <__lo0bits>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	6163      	str	r3, [r4, #20]
 8007404:	2201      	movs	r2, #1
 8007406:	6122      	str	r2, [r4, #16]
 8007408:	3020      	adds	r0, #32
 800740a:	e7e3      	b.n	80073d4 <__d2b+0x60>
 800740c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007414:	f8c9 0000 	str.w	r0, [r9]
 8007418:	6918      	ldr	r0, [r3, #16]
 800741a:	f7ff fd35 	bl	8006e88 <__hi0bits>
 800741e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007422:	e7df      	b.n	80073e4 <__d2b+0x70>
 8007424:	08008033 	.word	0x08008033
 8007428:	080080a4 	.word	0x080080a4

0800742c <_calloc_r>:
 800742c:	b513      	push	{r0, r1, r4, lr}
 800742e:	434a      	muls	r2, r1
 8007430:	4611      	mov	r1, r2
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	f000 f85a 	bl	80074ec <_malloc_r>
 8007438:	4604      	mov	r4, r0
 800743a:	b118      	cbz	r0, 8007444 <_calloc_r+0x18>
 800743c:	9a01      	ldr	r2, [sp, #4]
 800743e:	2100      	movs	r1, #0
 8007440:	f7fe f85e 	bl	8005500 <memset>
 8007444:	4620      	mov	r0, r4
 8007446:	b002      	add	sp, #8
 8007448:	bd10      	pop	{r4, pc}
	...

0800744c <_free_r>:
 800744c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800744e:	2900      	cmp	r1, #0
 8007450:	d048      	beq.n	80074e4 <_free_r+0x98>
 8007452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007456:	9001      	str	r0, [sp, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f1a1 0404 	sub.w	r4, r1, #4
 800745e:	bfb8      	it	lt
 8007460:	18e4      	addlt	r4, r4, r3
 8007462:	f000 fca7 	bl	8007db4 <__malloc_lock>
 8007466:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <_free_r+0x9c>)
 8007468:	9801      	ldr	r0, [sp, #4]
 800746a:	6813      	ldr	r3, [r2, #0]
 800746c:	4615      	mov	r5, r2
 800746e:	b933      	cbnz	r3, 800747e <_free_r+0x32>
 8007470:	6063      	str	r3, [r4, #4]
 8007472:	6014      	str	r4, [r2, #0]
 8007474:	b003      	add	sp, #12
 8007476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800747a:	f000 bca1 	b.w	8007dc0 <__malloc_unlock>
 800747e:	42a3      	cmp	r3, r4
 8007480:	d90b      	bls.n	800749a <_free_r+0x4e>
 8007482:	6821      	ldr	r1, [r4, #0]
 8007484:	1862      	adds	r2, r4, r1
 8007486:	4293      	cmp	r3, r2
 8007488:	bf04      	itt	eq
 800748a:	681a      	ldreq	r2, [r3, #0]
 800748c:	685b      	ldreq	r3, [r3, #4]
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	bf04      	itt	eq
 8007492:	1852      	addeq	r2, r2, r1
 8007494:	6022      	streq	r2, [r4, #0]
 8007496:	602c      	str	r4, [r5, #0]
 8007498:	e7ec      	b.n	8007474 <_free_r+0x28>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x58>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x4e>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1855      	adds	r5, r2, r1
 80074a8:	42a5      	cmp	r5, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x78>
 80074ac:	6824      	ldr	r4, [r4, #0]
 80074ae:	4421      	add	r1, r4
 80074b0:	1854      	adds	r4, r2, r1
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1dd      	bne.n	8007474 <_free_r+0x28>
 80074b8:	681c      	ldr	r4, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	6053      	str	r3, [r2, #4]
 80074be:	4421      	add	r1, r4
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	e7d7      	b.n	8007474 <_free_r+0x28>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x80>
 80074c6:	230c      	movs	r3, #12
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7d3      	b.n	8007474 <_free_r+0x28>
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	1961      	adds	r1, r4, r5
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf04      	itt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	bf04      	itt	eq
 80074dc:	1949      	addeq	r1, r1, r5
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6054      	str	r4, [r2, #4]
 80074e2:	e7c7      	b.n	8007474 <_free_r+0x28>
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
 80074e8:	20000438 	.word	0x20000438

080074ec <_malloc_r>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	1ccd      	adds	r5, r1, #3
 80074f0:	f025 0503 	bic.w	r5, r5, #3
 80074f4:	3508      	adds	r5, #8
 80074f6:	2d0c      	cmp	r5, #12
 80074f8:	bf38      	it	cc
 80074fa:	250c      	movcc	r5, #12
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	4606      	mov	r6, r0
 8007500:	db01      	blt.n	8007506 <_malloc_r+0x1a>
 8007502:	42a9      	cmp	r1, r5
 8007504:	d903      	bls.n	800750e <_malloc_r+0x22>
 8007506:	230c      	movs	r3, #12
 8007508:	6033      	str	r3, [r6, #0]
 800750a:	2000      	movs	r0, #0
 800750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800750e:	f000 fc51 	bl	8007db4 <__malloc_lock>
 8007512:	4921      	ldr	r1, [pc, #132]	; (8007598 <_malloc_r+0xac>)
 8007514:	680a      	ldr	r2, [r1, #0]
 8007516:	4614      	mov	r4, r2
 8007518:	b99c      	cbnz	r4, 8007542 <_malloc_r+0x56>
 800751a:	4f20      	ldr	r7, [pc, #128]	; (800759c <_malloc_r+0xb0>)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	b923      	cbnz	r3, 800752a <_malloc_r+0x3e>
 8007520:	4621      	mov	r1, r4
 8007522:	4630      	mov	r0, r6
 8007524:	f000 f996 	bl	8007854 <_sbrk_r>
 8007528:	6038      	str	r0, [r7, #0]
 800752a:	4629      	mov	r1, r5
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f991 	bl	8007854 <_sbrk_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d123      	bne.n	800757e <_malloc_r+0x92>
 8007536:	230c      	movs	r3, #12
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	4630      	mov	r0, r6
 800753c:	f000 fc40 	bl	8007dc0 <__malloc_unlock>
 8007540:	e7e3      	b.n	800750a <_malloc_r+0x1e>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	1b5b      	subs	r3, r3, r5
 8007546:	d417      	bmi.n	8007578 <_malloc_r+0x8c>
 8007548:	2b0b      	cmp	r3, #11
 800754a:	d903      	bls.n	8007554 <_malloc_r+0x68>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	441c      	add	r4, r3
 8007550:	6025      	str	r5, [r4, #0]
 8007552:	e004      	b.n	800755e <_malloc_r+0x72>
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	42a2      	cmp	r2, r4
 8007558:	bf0c      	ite	eq
 800755a:	600b      	streq	r3, [r1, #0]
 800755c:	6053      	strne	r3, [r2, #4]
 800755e:	4630      	mov	r0, r6
 8007560:	f000 fc2e 	bl	8007dc0 <__malloc_unlock>
 8007564:	f104 000b 	add.w	r0, r4, #11
 8007568:	1d23      	adds	r3, r4, #4
 800756a:	f020 0007 	bic.w	r0, r0, #7
 800756e:	1ac2      	subs	r2, r0, r3
 8007570:	d0cc      	beq.n	800750c <_malloc_r+0x20>
 8007572:	1a1b      	subs	r3, r3, r0
 8007574:	50a3      	str	r3, [r4, r2]
 8007576:	e7c9      	b.n	800750c <_malloc_r+0x20>
 8007578:	4622      	mov	r2, r4
 800757a:	6864      	ldr	r4, [r4, #4]
 800757c:	e7cc      	b.n	8007518 <_malloc_r+0x2c>
 800757e:	1cc4      	adds	r4, r0, #3
 8007580:	f024 0403 	bic.w	r4, r4, #3
 8007584:	42a0      	cmp	r0, r4
 8007586:	d0e3      	beq.n	8007550 <_malloc_r+0x64>
 8007588:	1a21      	subs	r1, r4, r0
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f962 	bl	8007854 <_sbrk_r>
 8007590:	3001      	adds	r0, #1
 8007592:	d1dd      	bne.n	8007550 <_malloc_r+0x64>
 8007594:	e7cf      	b.n	8007536 <_malloc_r+0x4a>
 8007596:	bf00      	nop
 8007598:	20000438 	.word	0x20000438
 800759c:	2000043c 	.word	0x2000043c

080075a0 <__sfputc_r>:
 80075a0:	6893      	ldr	r3, [r2, #8]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	b410      	push	{r4}
 80075a8:	6093      	str	r3, [r2, #8]
 80075aa:	da08      	bge.n	80075be <__sfputc_r+0x1e>
 80075ac:	6994      	ldr	r4, [r2, #24]
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	db01      	blt.n	80075b6 <__sfputc_r+0x16>
 80075b2:	290a      	cmp	r1, #10
 80075b4:	d103      	bne.n	80075be <__sfputc_r+0x1e>
 80075b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ba:	f000 b99f 	b.w	80078fc <__swbuf_r>
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	1c58      	adds	r0, r3, #1
 80075c2:	6010      	str	r0, [r2, #0]
 80075c4:	7019      	strb	r1, [r3, #0]
 80075c6:	4608      	mov	r0, r1
 80075c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <__sfputs_r>:
 80075ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d0:	4606      	mov	r6, r0
 80075d2:	460f      	mov	r7, r1
 80075d4:	4614      	mov	r4, r2
 80075d6:	18d5      	adds	r5, r2, r3
 80075d8:	42ac      	cmp	r4, r5
 80075da:	d101      	bne.n	80075e0 <__sfputs_r+0x12>
 80075dc:	2000      	movs	r0, #0
 80075de:	e007      	b.n	80075f0 <__sfputs_r+0x22>
 80075e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e4:	463a      	mov	r2, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7ff ffda 	bl	80075a0 <__sfputc_r>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d1f3      	bne.n	80075d8 <__sfputs_r+0xa>
 80075f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f4 <_vfiprintf_r>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	460d      	mov	r5, r1
 80075fa:	b09d      	sub	sp, #116	; 0x74
 80075fc:	4614      	mov	r4, r2
 80075fe:	4698      	mov	r8, r3
 8007600:	4606      	mov	r6, r0
 8007602:	b118      	cbz	r0, 800760c <_vfiprintf_r+0x18>
 8007604:	6983      	ldr	r3, [r0, #24]
 8007606:	b90b      	cbnz	r3, 800760c <_vfiprintf_r+0x18>
 8007608:	f7ff fad6 	bl	8006bb8 <__sinit>
 800760c:	4b89      	ldr	r3, [pc, #548]	; (8007834 <_vfiprintf_r+0x240>)
 800760e:	429d      	cmp	r5, r3
 8007610:	d11b      	bne.n	800764a <_vfiprintf_r+0x56>
 8007612:	6875      	ldr	r5, [r6, #4]
 8007614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007616:	07d9      	lsls	r1, r3, #31
 8007618:	d405      	bmi.n	8007626 <_vfiprintf_r+0x32>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	059a      	lsls	r2, r3, #22
 800761e:	d402      	bmi.n	8007626 <_vfiprintf_r+0x32>
 8007620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007622:	f7ff fb6c 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	071b      	lsls	r3, r3, #28
 800762a:	d501      	bpl.n	8007630 <_vfiprintf_r+0x3c>
 800762c:	692b      	ldr	r3, [r5, #16]
 800762e:	b9eb      	cbnz	r3, 800766c <_vfiprintf_r+0x78>
 8007630:	4629      	mov	r1, r5
 8007632:	4630      	mov	r0, r6
 8007634:	f000 f9c6 	bl	80079c4 <__swsetup_r>
 8007638:	b1c0      	cbz	r0, 800766c <_vfiprintf_r+0x78>
 800763a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763c:	07dc      	lsls	r4, r3, #31
 800763e:	d50e      	bpl.n	800765e <_vfiprintf_r+0x6a>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295
 8007644:	b01d      	add	sp, #116	; 0x74
 8007646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764a:	4b7b      	ldr	r3, [pc, #492]	; (8007838 <_vfiprintf_r+0x244>)
 800764c:	429d      	cmp	r5, r3
 800764e:	d101      	bne.n	8007654 <_vfiprintf_r+0x60>
 8007650:	68b5      	ldr	r5, [r6, #8]
 8007652:	e7df      	b.n	8007614 <_vfiprintf_r+0x20>
 8007654:	4b79      	ldr	r3, [pc, #484]	; (800783c <_vfiprintf_r+0x248>)
 8007656:	429d      	cmp	r5, r3
 8007658:	bf08      	it	eq
 800765a:	68f5      	ldreq	r5, [r6, #12]
 800765c:	e7da      	b.n	8007614 <_vfiprintf_r+0x20>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	0598      	lsls	r0, r3, #22
 8007662:	d4ed      	bmi.n	8007640 <_vfiprintf_r+0x4c>
 8007664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007666:	f7ff fb4b 	bl	8006d00 <__retarget_lock_release_recursive>
 800766a:	e7e9      	b.n	8007640 <_vfiprintf_r+0x4c>
 800766c:	2300      	movs	r3, #0
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	2320      	movs	r3, #32
 8007672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007676:	f8cd 800c 	str.w	r8, [sp, #12]
 800767a:	2330      	movs	r3, #48	; 0x30
 800767c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007840 <_vfiprintf_r+0x24c>
 8007680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007684:	f04f 0901 	mov.w	r9, #1
 8007688:	4623      	mov	r3, r4
 800768a:	469a      	mov	sl, r3
 800768c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007690:	b10a      	cbz	r2, 8007696 <_vfiprintf_r+0xa2>
 8007692:	2a25      	cmp	r2, #37	; 0x25
 8007694:	d1f9      	bne.n	800768a <_vfiprintf_r+0x96>
 8007696:	ebba 0b04 	subs.w	fp, sl, r4
 800769a:	d00b      	beq.n	80076b4 <_vfiprintf_r+0xc0>
 800769c:	465b      	mov	r3, fp
 800769e:	4622      	mov	r2, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff93 	bl	80075ce <__sfputs_r>
 80076a8:	3001      	adds	r0, #1
 80076aa:	f000 80aa 	beq.w	8007802 <_vfiprintf_r+0x20e>
 80076ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b0:	445a      	add	r2, fp
 80076b2:	9209      	str	r2, [sp, #36]	; 0x24
 80076b4:	f89a 3000 	ldrb.w	r3, [sl]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80a2 	beq.w	8007802 <_vfiprintf_r+0x20e>
 80076be:	2300      	movs	r3, #0
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c8:	f10a 0a01 	add.w	sl, sl, #1
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	9307      	str	r3, [sp, #28]
 80076d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076d4:	931a      	str	r3, [sp, #104]	; 0x68
 80076d6:	4654      	mov	r4, sl
 80076d8:	2205      	movs	r2, #5
 80076da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076de:	4858      	ldr	r0, [pc, #352]	; (8007840 <_vfiprintf_r+0x24c>)
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	b9d8      	cbnz	r0, 8007720 <_vfiprintf_r+0x12c>
 80076e8:	06d1      	lsls	r1, r2, #27
 80076ea:	bf44      	itt	mi
 80076ec:	2320      	movmi	r3, #32
 80076ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f2:	0713      	lsls	r3, r2, #28
 80076f4:	bf44      	itt	mi
 80076f6:	232b      	movmi	r3, #43	; 0x2b
 80076f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b2a      	cmp	r3, #42	; 0x2a
 8007702:	d015      	beq.n	8007730 <_vfiprintf_r+0x13c>
 8007704:	9a07      	ldr	r2, [sp, #28]
 8007706:	4654      	mov	r4, sl
 8007708:	2000      	movs	r0, #0
 800770a:	f04f 0c0a 	mov.w	ip, #10
 800770e:	4621      	mov	r1, r4
 8007710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007714:	3b30      	subs	r3, #48	; 0x30
 8007716:	2b09      	cmp	r3, #9
 8007718:	d94e      	bls.n	80077b8 <_vfiprintf_r+0x1c4>
 800771a:	b1b0      	cbz	r0, 800774a <_vfiprintf_r+0x156>
 800771c:	9207      	str	r2, [sp, #28]
 800771e:	e014      	b.n	800774a <_vfiprintf_r+0x156>
 8007720:	eba0 0308 	sub.w	r3, r0, r8
 8007724:	fa09 f303 	lsl.w	r3, r9, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	46a2      	mov	sl, r4
 800772e:	e7d2      	b.n	80076d6 <_vfiprintf_r+0xe2>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	1d19      	adds	r1, r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	9103      	str	r1, [sp, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfbb      	ittet	lt
 800773c:	425b      	neglt	r3, r3
 800773e:	f042 0202 	orrlt.w	r2, r2, #2
 8007742:	9307      	strge	r3, [sp, #28]
 8007744:	9307      	strlt	r3, [sp, #28]
 8007746:	bfb8      	it	lt
 8007748:	9204      	strlt	r2, [sp, #16]
 800774a:	7823      	ldrb	r3, [r4, #0]
 800774c:	2b2e      	cmp	r3, #46	; 0x2e
 800774e:	d10c      	bne.n	800776a <_vfiprintf_r+0x176>
 8007750:	7863      	ldrb	r3, [r4, #1]
 8007752:	2b2a      	cmp	r3, #42	; 0x2a
 8007754:	d135      	bne.n	80077c2 <_vfiprintf_r+0x1ce>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9203      	str	r2, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfb8      	it	lt
 8007762:	f04f 33ff 	movlt.w	r3, #4294967295
 8007766:	3402      	adds	r4, #2
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007850 <_vfiprintf_r+0x25c>
 800776e:	7821      	ldrb	r1, [r4, #0]
 8007770:	2203      	movs	r2, #3
 8007772:	4650      	mov	r0, sl
 8007774:	f7f8 fd34 	bl	80001e0 <memchr>
 8007778:	b140      	cbz	r0, 800778c <_vfiprintf_r+0x198>
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	eba0 000a 	sub.w	r0, r0, sl
 8007780:	fa03 f000 	lsl.w	r0, r3, r0
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	4303      	orrs	r3, r0
 8007788:	3401      	adds	r4, #1
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007790:	482c      	ldr	r0, [pc, #176]	; (8007844 <_vfiprintf_r+0x250>)
 8007792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007796:	2206      	movs	r2, #6
 8007798:	f7f8 fd22 	bl	80001e0 <memchr>
 800779c:	2800      	cmp	r0, #0
 800779e:	d03f      	beq.n	8007820 <_vfiprintf_r+0x22c>
 80077a0:	4b29      	ldr	r3, [pc, #164]	; (8007848 <_vfiprintf_r+0x254>)
 80077a2:	bb1b      	cbnz	r3, 80077ec <_vfiprintf_r+0x1f8>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	3307      	adds	r3, #7
 80077a8:	f023 0307 	bic.w	r3, r3, #7
 80077ac:	3308      	adds	r3, #8
 80077ae:	9303      	str	r3, [sp, #12]
 80077b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b2:	443b      	add	r3, r7
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	e767      	b.n	8007688 <_vfiprintf_r+0x94>
 80077b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077bc:	460c      	mov	r4, r1
 80077be:	2001      	movs	r0, #1
 80077c0:	e7a5      	b.n	800770e <_vfiprintf_r+0x11a>
 80077c2:	2300      	movs	r3, #0
 80077c4:	3401      	adds	r4, #1
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	4619      	mov	r1, r3
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4620      	mov	r0, r4
 80077d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d4:	3a30      	subs	r2, #48	; 0x30
 80077d6:	2a09      	cmp	r2, #9
 80077d8:	d903      	bls.n	80077e2 <_vfiprintf_r+0x1ee>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0c5      	beq.n	800776a <_vfiprintf_r+0x176>
 80077de:	9105      	str	r1, [sp, #20]
 80077e0:	e7c3      	b.n	800776a <_vfiprintf_r+0x176>
 80077e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e6:	4604      	mov	r4, r0
 80077e8:	2301      	movs	r3, #1
 80077ea:	e7f0      	b.n	80077ce <_vfiprintf_r+0x1da>
 80077ec:	ab03      	add	r3, sp, #12
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	462a      	mov	r2, r5
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <_vfiprintf_r+0x258>)
 80077f4:	a904      	add	r1, sp, #16
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7fd ff2a 	bl	8005650 <_printf_float>
 80077fc:	4607      	mov	r7, r0
 80077fe:	1c78      	adds	r0, r7, #1
 8007800:	d1d6      	bne.n	80077b0 <_vfiprintf_r+0x1bc>
 8007802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007804:	07d9      	lsls	r1, r3, #31
 8007806:	d405      	bmi.n	8007814 <_vfiprintf_r+0x220>
 8007808:	89ab      	ldrh	r3, [r5, #12]
 800780a:	059a      	lsls	r2, r3, #22
 800780c:	d402      	bmi.n	8007814 <_vfiprintf_r+0x220>
 800780e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007810:	f7ff fa76 	bl	8006d00 <__retarget_lock_release_recursive>
 8007814:	89ab      	ldrh	r3, [r5, #12]
 8007816:	065b      	lsls	r3, r3, #25
 8007818:	f53f af12 	bmi.w	8007640 <_vfiprintf_r+0x4c>
 800781c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781e:	e711      	b.n	8007644 <_vfiprintf_r+0x50>
 8007820:	ab03      	add	r3, sp, #12
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	462a      	mov	r2, r5
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <_vfiprintf_r+0x258>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	4630      	mov	r0, r6
 800782c:	f7fe f9b4 	bl	8005b98 <_printf_i>
 8007830:	e7e4      	b.n	80077fc <_vfiprintf_r+0x208>
 8007832:	bf00      	nop
 8007834:	08008064 	.word	0x08008064
 8007838:	08008084 	.word	0x08008084
 800783c:	08008044 	.word	0x08008044
 8007840:	08008204 	.word	0x08008204
 8007844:	0800820e 	.word	0x0800820e
 8007848:	08005651 	.word	0x08005651
 800784c:	080075cf 	.word	0x080075cf
 8007850:	0800820a 	.word	0x0800820a

08007854 <_sbrk_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d06      	ldr	r5, [pc, #24]	; (8007870 <_sbrk_r+0x1c>)
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	f7fa f888 	bl	8001974 <_sbrk>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_sbrk_r+0x1a>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_sbrk_r+0x1a>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20000450 	.word	0x20000450

08007874 <__sread>:
 8007874:	b510      	push	{r4, lr}
 8007876:	460c      	mov	r4, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	f000 faa6 	bl	8007dcc <_read_r>
 8007880:	2800      	cmp	r0, #0
 8007882:	bfab      	itete	ge
 8007884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007886:	89a3      	ldrhlt	r3, [r4, #12]
 8007888:	181b      	addge	r3, r3, r0
 800788a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800788e:	bfac      	ite	ge
 8007890:	6563      	strge	r3, [r4, #84]	; 0x54
 8007892:	81a3      	strhlt	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__swrite>:
 8007896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	461f      	mov	r7, r3
 800789c:	898b      	ldrh	r3, [r1, #12]
 800789e:	05db      	lsls	r3, r3, #23
 80078a0:	4605      	mov	r5, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	4616      	mov	r6, r2
 80078a6:	d505      	bpl.n	80078b4 <__swrite+0x1e>
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	2302      	movs	r3, #2
 80078ae:	2200      	movs	r2, #0
 80078b0:	f000 f9f8 	bl	8007ca4 <_lseek_r>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	4632      	mov	r2, r6
 80078c2:	463b      	mov	r3, r7
 80078c4:	4628      	mov	r0, r5
 80078c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	f000 b869 	b.w	80079a0 <_write_r>

080078ce <__sseek>:
 80078ce:	b510      	push	{r4, lr}
 80078d0:	460c      	mov	r4, r1
 80078d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d6:	f000 f9e5 	bl	8007ca4 <_lseek_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	bf15      	itete	ne
 80078e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ea:	81a3      	strheq	r3, [r4, #12]
 80078ec:	bf18      	it	ne
 80078ee:	81a3      	strhne	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__sclose>:
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f000 b8f1 	b.w	8007adc <_close_r>
	...

080078fc <__swbuf_r>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	460e      	mov	r6, r1
 8007900:	4614      	mov	r4, r2
 8007902:	4605      	mov	r5, r0
 8007904:	b118      	cbz	r0, 800790e <__swbuf_r+0x12>
 8007906:	6983      	ldr	r3, [r0, #24]
 8007908:	b90b      	cbnz	r3, 800790e <__swbuf_r+0x12>
 800790a:	f7ff f955 	bl	8006bb8 <__sinit>
 800790e:	4b21      	ldr	r3, [pc, #132]	; (8007994 <__swbuf_r+0x98>)
 8007910:	429c      	cmp	r4, r3
 8007912:	d12b      	bne.n	800796c <__swbuf_r+0x70>
 8007914:	686c      	ldr	r4, [r5, #4]
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	071a      	lsls	r2, r3, #28
 800791e:	d52f      	bpl.n	8007980 <__swbuf_r+0x84>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	b36b      	cbz	r3, 8007980 <__swbuf_r+0x84>
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	1ac0      	subs	r0, r0, r3
 800792a:	6963      	ldr	r3, [r4, #20]
 800792c:	b2f6      	uxtb	r6, r6
 800792e:	4283      	cmp	r3, r0
 8007930:	4637      	mov	r7, r6
 8007932:	dc04      	bgt.n	800793e <__swbuf_r+0x42>
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f966 	bl	8007c08 <_fflush_r>
 800793c:	bb30      	cbnz	r0, 800798c <__swbuf_r+0x90>
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	3b01      	subs	r3, #1
 8007942:	60a3      	str	r3, [r4, #8]
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	6022      	str	r2, [r4, #0]
 800794a:	701e      	strb	r6, [r3, #0]
 800794c:	6963      	ldr	r3, [r4, #20]
 800794e:	3001      	adds	r0, #1
 8007950:	4283      	cmp	r3, r0
 8007952:	d004      	beq.n	800795e <__swbuf_r+0x62>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	07db      	lsls	r3, r3, #31
 8007958:	d506      	bpl.n	8007968 <__swbuf_r+0x6c>
 800795a:	2e0a      	cmp	r6, #10
 800795c:	d104      	bne.n	8007968 <__swbuf_r+0x6c>
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f951 	bl	8007c08 <_fflush_r>
 8007966:	b988      	cbnz	r0, 800798c <__swbuf_r+0x90>
 8007968:	4638      	mov	r0, r7
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <__swbuf_r+0x9c>)
 800796e:	429c      	cmp	r4, r3
 8007970:	d101      	bne.n	8007976 <__swbuf_r+0x7a>
 8007972:	68ac      	ldr	r4, [r5, #8]
 8007974:	e7cf      	b.n	8007916 <__swbuf_r+0x1a>
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <__swbuf_r+0xa0>)
 8007978:	429c      	cmp	r4, r3
 800797a:	bf08      	it	eq
 800797c:	68ec      	ldreq	r4, [r5, #12]
 800797e:	e7ca      	b.n	8007916 <__swbuf_r+0x1a>
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f81e 	bl	80079c4 <__swsetup_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	d0cb      	beq.n	8007924 <__swbuf_r+0x28>
 800798c:	f04f 37ff 	mov.w	r7, #4294967295
 8007990:	e7ea      	b.n	8007968 <__swbuf_r+0x6c>
 8007992:	bf00      	nop
 8007994:	08008064 	.word	0x08008064
 8007998:	08008084 	.word	0x08008084
 800799c:	08008044 	.word	0x08008044

080079a0 <_write_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_write_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7f9 ff8f 	bl	80018d2 <_write>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_write_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_write_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000450 	.word	0x20000450

080079c4 <__swsetup_r>:
 80079c4:	4b32      	ldr	r3, [pc, #200]	; (8007a90 <__swsetup_r+0xcc>)
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	4606      	mov	r6, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	b125      	cbz	r5, 80079da <__swsetup_r+0x16>
 80079d0:	69ab      	ldr	r3, [r5, #24]
 80079d2:	b913      	cbnz	r3, 80079da <__swsetup_r+0x16>
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7ff f8ef 	bl	8006bb8 <__sinit>
 80079da:	4b2e      	ldr	r3, [pc, #184]	; (8007a94 <__swsetup_r+0xd0>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d10f      	bne.n	8007a00 <__swsetup_r+0x3c>
 80079e0:	686c      	ldr	r4, [r5, #4]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e8:	0719      	lsls	r1, r3, #28
 80079ea:	d42c      	bmi.n	8007a46 <__swsetup_r+0x82>
 80079ec:	06dd      	lsls	r5, r3, #27
 80079ee:	d411      	bmi.n	8007a14 <__swsetup_r+0x50>
 80079f0:	2309      	movs	r3, #9
 80079f2:	6033      	str	r3, [r6, #0]
 80079f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	e03e      	b.n	8007a7e <__swsetup_r+0xba>
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <__swsetup_r+0xd4>)
 8007a02:	429c      	cmp	r4, r3
 8007a04:	d101      	bne.n	8007a0a <__swsetup_r+0x46>
 8007a06:	68ac      	ldr	r4, [r5, #8]
 8007a08:	e7eb      	b.n	80079e2 <__swsetup_r+0x1e>
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <__swsetup_r+0xd8>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	bf08      	it	eq
 8007a10:	68ec      	ldreq	r4, [r5, #12]
 8007a12:	e7e6      	b.n	80079e2 <__swsetup_r+0x1e>
 8007a14:	0758      	lsls	r0, r3, #29
 8007a16:	d512      	bpl.n	8007a3e <__swsetup_r+0x7a>
 8007a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1a:	b141      	cbz	r1, 8007a2e <__swsetup_r+0x6a>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__swsetup_r+0x66>
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff fd11 	bl	800744c <_free_r>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	2300      	movs	r3, #0
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b94b      	cbnz	r3, 8007a5e <__swsetup_r+0x9a>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a54:	d003      	beq.n	8007a5e <__swsetup_r+0x9a>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f959 	bl	8007d10 <__smakebuf_r>
 8007a5e:	89a0      	ldrh	r0, [r4, #12]
 8007a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a64:	f010 0301 	ands.w	r3, r0, #1
 8007a68:	d00a      	beq.n	8007a80 <__swsetup_r+0xbc>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60a3      	str	r3, [r4, #8]
 8007a6e:	6963      	ldr	r3, [r4, #20]
 8007a70:	425b      	negs	r3, r3
 8007a72:	61a3      	str	r3, [r4, #24]
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	b943      	cbnz	r3, 8007a8a <__swsetup_r+0xc6>
 8007a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a7c:	d1ba      	bne.n	80079f4 <__swsetup_r+0x30>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	0781      	lsls	r1, r0, #30
 8007a82:	bf58      	it	pl
 8007a84:	6963      	ldrpl	r3, [r4, #20]
 8007a86:	60a3      	str	r3, [r4, #8]
 8007a88:	e7f4      	b.n	8007a74 <__swsetup_r+0xb0>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e7f7      	b.n	8007a7e <__swsetup_r+0xba>
 8007a8e:	bf00      	nop
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	08008064 	.word	0x08008064
 8007a98:	08008084 	.word	0x08008084
 8007a9c:	08008044 	.word	0x08008044

08007aa0 <__assert_func>:
 8007aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aa2:	4614      	mov	r4, r2
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <__assert_func+0x2c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	68d8      	ldr	r0, [r3, #12]
 8007aae:	b14c      	cbz	r4, 8007ac4 <__assert_func+0x24>
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <__assert_func+0x30>)
 8007ab2:	9100      	str	r1, [sp, #0]
 8007ab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ab8:	4906      	ldr	r1, [pc, #24]	; (8007ad4 <__assert_func+0x34>)
 8007aba:	462b      	mov	r3, r5
 8007abc:	f000 f8e0 	bl	8007c80 <fiprintf>
 8007ac0:	f000 f9a3 	bl	8007e0a <abort>
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <__assert_func+0x38>)
 8007ac6:	461c      	mov	r4, r3
 8007ac8:	e7f3      	b.n	8007ab2 <__assert_func+0x12>
 8007aca:	bf00      	nop
 8007acc:	2000000c 	.word	0x2000000c
 8007ad0:	08008215 	.word	0x08008215
 8007ad4:	08008222 	.word	0x08008222
 8007ad8:	08008250 	.word	0x08008250

08007adc <_close_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	; (8007af8 <_close_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 ff0f 	bl	800190a <_close>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_close_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_close_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000450 	.word	0x20000450

08007afc <__sflush_r>:
 8007afc:	898a      	ldrh	r2, [r1, #12]
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	4605      	mov	r5, r0
 8007b04:	0710      	lsls	r0, r2, #28
 8007b06:	460c      	mov	r4, r1
 8007b08:	d458      	bmi.n	8007bbc <__sflush_r+0xc0>
 8007b0a:	684b      	ldr	r3, [r1, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc05      	bgt.n	8007b1c <__sflush_r+0x20>
 8007b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc02      	bgt.n	8007b1c <__sflush_r+0x20>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	d0f9      	beq.n	8007b16 <__sflush_r+0x1a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b28:	682f      	ldr	r7, [r5, #0]
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	d032      	beq.n	8007b94 <__sflush_r+0x98>
 8007b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	075a      	lsls	r2, r3, #29
 8007b34:	d505      	bpl.n	8007b42 <__sflush_r+0x46>
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	1ac0      	subs	r0, r0, r3
 8007b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b3c:	b10b      	cbz	r3, 8007b42 <__sflush_r+0x46>
 8007b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b40:	1ac0      	subs	r0, r0, r3
 8007b42:	2300      	movs	r3, #0
 8007b44:	4602      	mov	r2, r0
 8007b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b48:	6a21      	ldr	r1, [r4, #32]
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b0      	blx	r6
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	d106      	bne.n	8007b62 <__sflush_r+0x66>
 8007b54:	6829      	ldr	r1, [r5, #0]
 8007b56:	291d      	cmp	r1, #29
 8007b58:	d82c      	bhi.n	8007bb4 <__sflush_r+0xb8>
 8007b5a:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <__sflush_r+0x108>)
 8007b5c:	40ca      	lsrs	r2, r1
 8007b5e:	07d6      	lsls	r6, r2, #31
 8007b60:	d528      	bpl.n	8007bb4 <__sflush_r+0xb8>
 8007b62:	2200      	movs	r2, #0
 8007b64:	6062      	str	r2, [r4, #4]
 8007b66:	04d9      	lsls	r1, r3, #19
 8007b68:	6922      	ldr	r2, [r4, #16]
 8007b6a:	6022      	str	r2, [r4, #0]
 8007b6c:	d504      	bpl.n	8007b78 <__sflush_r+0x7c>
 8007b6e:	1c42      	adds	r2, r0, #1
 8007b70:	d101      	bne.n	8007b76 <__sflush_r+0x7a>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b903      	cbnz	r3, 8007b78 <__sflush_r+0x7c>
 8007b76:	6560      	str	r0, [r4, #84]	; 0x54
 8007b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7a:	602f      	str	r7, [r5, #0]
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d0ca      	beq.n	8007b16 <__sflush_r+0x1a>
 8007b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b84:	4299      	cmp	r1, r3
 8007b86:	d002      	beq.n	8007b8e <__sflush_r+0x92>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7ff fc5f 	bl	800744c <_free_r>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	6360      	str	r0, [r4, #52]	; 0x34
 8007b92:	e7c1      	b.n	8007b18 <__sflush_r+0x1c>
 8007b94:	6a21      	ldr	r1, [r4, #32]
 8007b96:	2301      	movs	r3, #1
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	1c41      	adds	r1, r0, #1
 8007b9e:	d1c7      	bne.n	8007b30 <__sflush_r+0x34>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c4      	beq.n	8007b30 <__sflush_r+0x34>
 8007ba6:	2b1d      	cmp	r3, #29
 8007ba8:	d001      	beq.n	8007bae <__sflush_r+0xb2>
 8007baa:	2b16      	cmp	r3, #22
 8007bac:	d101      	bne.n	8007bb2 <__sflush_r+0xb6>
 8007bae:	602f      	str	r7, [r5, #0]
 8007bb0:	e7b1      	b.n	8007b16 <__sflush_r+0x1a>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	e7ad      	b.n	8007b18 <__sflush_r+0x1c>
 8007bbc:	690f      	ldr	r7, [r1, #16]
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	d0a9      	beq.n	8007b16 <__sflush_r+0x1a>
 8007bc2:	0793      	lsls	r3, r2, #30
 8007bc4:	680e      	ldr	r6, [r1, #0]
 8007bc6:	bf08      	it	eq
 8007bc8:	694b      	ldreq	r3, [r1, #20]
 8007bca:	600f      	str	r7, [r1, #0]
 8007bcc:	bf18      	it	ne
 8007bce:	2300      	movne	r3, #0
 8007bd0:	eba6 0807 	sub.w	r8, r6, r7
 8007bd4:	608b      	str	r3, [r1, #8]
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	dd9c      	ble.n	8007b16 <__sflush_r+0x1a>
 8007bdc:	6a21      	ldr	r1, [r4, #32]
 8007bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007be0:	4643      	mov	r3, r8
 8007be2:	463a      	mov	r2, r7
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b0      	blx	r6
 8007be8:	2800      	cmp	r0, #0
 8007bea:	dc06      	bgt.n	8007bfa <__sflush_r+0xfe>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e78e      	b.n	8007b18 <__sflush_r+0x1c>
 8007bfa:	4407      	add	r7, r0
 8007bfc:	eba8 0800 	sub.w	r8, r8, r0
 8007c00:	e7e9      	b.n	8007bd6 <__sflush_r+0xda>
 8007c02:	bf00      	nop
 8007c04:	20400001 	.word	0x20400001

08007c08 <_fflush_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b913      	cbnz	r3, 8007c18 <_fflush_r+0x10>
 8007c12:	2500      	movs	r5, #0
 8007c14:	4628      	mov	r0, r5
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	b118      	cbz	r0, 8007c22 <_fflush_r+0x1a>
 8007c1a:	6983      	ldr	r3, [r0, #24]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <_fflush_r+0x1a>
 8007c1e:	f7fe ffcb 	bl	8006bb8 <__sinit>
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <_fflush_r+0x6c>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d11b      	bne.n	8007c60 <_fflush_r+0x58>
 8007c28:	686c      	ldr	r4, [r5, #4]
 8007c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ef      	beq.n	8007c12 <_fflush_r+0xa>
 8007c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c34:	07d0      	lsls	r0, r2, #31
 8007c36:	d404      	bmi.n	8007c42 <_fflush_r+0x3a>
 8007c38:	0599      	lsls	r1, r3, #22
 8007c3a:	d402      	bmi.n	8007c42 <_fflush_r+0x3a>
 8007c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c3e:	f7ff f85e 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8007c42:	4628      	mov	r0, r5
 8007c44:	4621      	mov	r1, r4
 8007c46:	f7ff ff59 	bl	8007afc <__sflush_r>
 8007c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c4c:	07da      	lsls	r2, r3, #31
 8007c4e:	4605      	mov	r5, r0
 8007c50:	d4e0      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	059b      	lsls	r3, r3, #22
 8007c56:	d4dd      	bmi.n	8007c14 <_fflush_r+0xc>
 8007c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c5a:	f7ff f851 	bl	8006d00 <__retarget_lock_release_recursive>
 8007c5e:	e7d9      	b.n	8007c14 <_fflush_r+0xc>
 8007c60:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <_fflush_r+0x70>)
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d101      	bne.n	8007c6a <_fflush_r+0x62>
 8007c66:	68ac      	ldr	r4, [r5, #8]
 8007c68:	e7df      	b.n	8007c2a <_fflush_r+0x22>
 8007c6a:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <_fflush_r+0x74>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	bf08      	it	eq
 8007c70:	68ec      	ldreq	r4, [r5, #12]
 8007c72:	e7da      	b.n	8007c2a <_fflush_r+0x22>
 8007c74:	08008064 	.word	0x08008064
 8007c78:	08008084 	.word	0x08008084
 8007c7c:	08008044 	.word	0x08008044

08007c80 <fiprintf>:
 8007c80:	b40e      	push	{r1, r2, r3}
 8007c82:	b503      	push	{r0, r1, lr}
 8007c84:	4601      	mov	r1, r0
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <fiprintf+0x20>)
 8007c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8e:	6800      	ldr	r0, [r0, #0]
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	f7ff fcaf 	bl	80075f4 <_vfiprintf_r>
 8007c96:	b002      	add	sp, #8
 8007c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c9c:	b003      	add	sp, #12
 8007c9e:	4770      	bx	lr
 8007ca0:	2000000c 	.word	0x2000000c

08007ca4 <_lseek_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d07      	ldr	r5, [pc, #28]	; (8007cc4 <_lseek_r+0x20>)
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4608      	mov	r0, r1
 8007cac:	4611      	mov	r1, r2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7f9 fe50 	bl	8001958 <_lseek>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_lseek_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_lseek_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20000450 	.word	0x20000450

08007cc8 <__swhatbuf_r>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	460e      	mov	r6, r1
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	b096      	sub	sp, #88	; 0x58
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	da07      	bge.n	8007cea <__swhatbuf_r+0x22>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	89b3      	ldrh	r3, [r6, #12]
 8007ce0:	061a      	lsls	r2, r3, #24
 8007ce2:	d410      	bmi.n	8007d06 <__swhatbuf_r+0x3e>
 8007ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce8:	e00e      	b.n	8007d08 <__swhatbuf_r+0x40>
 8007cea:	466a      	mov	r2, sp
 8007cec:	f000 f894 	bl	8007e18 <_fstat_r>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dbf2      	blt.n	8007cda <__swhatbuf_r+0x12>
 8007cf4:	9a01      	ldr	r2, [sp, #4]
 8007cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cfe:	425a      	negs	r2, r3
 8007d00:	415a      	adcs	r2, r3
 8007d02:	602a      	str	r2, [r5, #0]
 8007d04:	e7ee      	b.n	8007ce4 <__swhatbuf_r+0x1c>
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	2000      	movs	r0, #0
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	b016      	add	sp, #88	; 0x58
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <__smakebuf_r>:
 8007d10:	898b      	ldrh	r3, [r1, #12]
 8007d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d14:	079d      	lsls	r5, r3, #30
 8007d16:	4606      	mov	r6, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	d507      	bpl.n	8007d2c <__smakebuf_r+0x1c>
 8007d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	2301      	movs	r3, #1
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	b002      	add	sp, #8
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	ab01      	add	r3, sp, #4
 8007d2e:	466a      	mov	r2, sp
 8007d30:	f7ff ffca 	bl	8007cc8 <__swhatbuf_r>
 8007d34:	9900      	ldr	r1, [sp, #0]
 8007d36:	4605      	mov	r5, r0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff fbd7 	bl	80074ec <_malloc_r>
 8007d3e:	b948      	cbnz	r0, 8007d54 <__smakebuf_r+0x44>
 8007d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d4ef      	bmi.n	8007d28 <__smakebuf_r+0x18>
 8007d48:	f023 0303 	bic.w	r3, r3, #3
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	e7e3      	b.n	8007d1c <__smakebuf_r+0xc>
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <__smakebuf_r+0x7c>)
 8007d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	6020      	str	r0, [r4, #0]
 8007d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	6163      	str	r3, [r4, #20]
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	6120      	str	r0, [r4, #16]
 8007d6a:	b15b      	cbz	r3, 8007d84 <__smakebuf_r+0x74>
 8007d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 f863 	bl	8007e3c <_isatty_r>
 8007d76:	b128      	cbz	r0, 8007d84 <__smakebuf_r+0x74>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	89a0      	ldrh	r0, [r4, #12]
 8007d86:	4305      	orrs	r5, r0
 8007d88:	81a5      	strh	r5, [r4, #12]
 8007d8a:	e7cd      	b.n	8007d28 <__smakebuf_r+0x18>
 8007d8c:	08006b51 	.word	0x08006b51

08007d90 <__ascii_mbtowc>:
 8007d90:	b082      	sub	sp, #8
 8007d92:	b901      	cbnz	r1, 8007d96 <__ascii_mbtowc+0x6>
 8007d94:	a901      	add	r1, sp, #4
 8007d96:	b142      	cbz	r2, 8007daa <__ascii_mbtowc+0x1a>
 8007d98:	b14b      	cbz	r3, 8007dae <__ascii_mbtowc+0x1e>
 8007d9a:	7813      	ldrb	r3, [r2, #0]
 8007d9c:	600b      	str	r3, [r1, #0]
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	1e10      	subs	r0, r2, #0
 8007da2:	bf18      	it	ne
 8007da4:	2001      	movne	r0, #1
 8007da6:	b002      	add	sp, #8
 8007da8:	4770      	bx	lr
 8007daa:	4610      	mov	r0, r2
 8007dac:	e7fb      	b.n	8007da6 <__ascii_mbtowc+0x16>
 8007dae:	f06f 0001 	mvn.w	r0, #1
 8007db2:	e7f8      	b.n	8007da6 <__ascii_mbtowc+0x16>

08007db4 <__malloc_lock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__malloc_lock+0x8>)
 8007db6:	f7fe bfa2 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000448 	.word	0x20000448

08007dc0 <__malloc_unlock>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__malloc_unlock+0x8>)
 8007dc2:	f7fe bf9d 	b.w	8006d00 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000448 	.word	0x20000448

08007dcc <_read_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	; (8007dec <_read_r+0x20>)
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	602a      	str	r2, [r5, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f7f9 fd5c 	bl	8001898 <_read>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_read_r+0x1e>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_read_r+0x1e>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20000450 	.word	0x20000450

08007df0 <__ascii_wctomb>:
 8007df0:	b149      	cbz	r1, 8007e06 <__ascii_wctomb+0x16>
 8007df2:	2aff      	cmp	r2, #255	; 0xff
 8007df4:	bf85      	ittet	hi
 8007df6:	238a      	movhi	r3, #138	; 0x8a
 8007df8:	6003      	strhi	r3, [r0, #0]
 8007dfa:	700a      	strbls	r2, [r1, #0]
 8007dfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e00:	bf98      	it	ls
 8007e02:	2001      	movls	r0, #1
 8007e04:	4770      	bx	lr
 8007e06:	4608      	mov	r0, r1
 8007e08:	4770      	bx	lr

08007e0a <abort>:
 8007e0a:	b508      	push	{r3, lr}
 8007e0c:	2006      	movs	r0, #6
 8007e0e:	f000 f84d 	bl	8007eac <raise>
 8007e12:	2001      	movs	r0, #1
 8007e14:	f7f9 fd36 	bl	8001884 <_exit>

08007e18 <_fstat_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d07      	ldr	r5, [pc, #28]	; (8007e38 <_fstat_r+0x20>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	f7f9 fd7c 	bl	8001922 <_fstat>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d102      	bne.n	8007e34 <_fstat_r+0x1c>
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	b103      	cbz	r3, 8007e34 <_fstat_r+0x1c>
 8007e32:	6023      	str	r3, [r4, #0]
 8007e34:	bd38      	pop	{r3, r4, r5, pc}
 8007e36:	bf00      	nop
 8007e38:	20000450 	.word	0x20000450

08007e3c <_isatty_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d06      	ldr	r5, [pc, #24]	; (8007e58 <_isatty_r+0x1c>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7f9 fd7b 	bl	8001942 <_isatty>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_isatty_r+0x1a>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_isatty_r+0x1a>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	20000450 	.word	0x20000450

08007e5c <_raise_r>:
 8007e5c:	291f      	cmp	r1, #31
 8007e5e:	b538      	push	{r3, r4, r5, lr}
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	d904      	bls.n	8007e70 <_raise_r+0x14>
 8007e66:	2316      	movs	r3, #22
 8007e68:	6003      	str	r3, [r0, #0]
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e72:	b112      	cbz	r2, 8007e7a <_raise_r+0x1e>
 8007e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e78:	b94b      	cbnz	r3, 8007e8e <_raise_r+0x32>
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 f830 	bl	8007ee0 <_getpid_r>
 8007e80:	462a      	mov	r2, r5
 8007e82:	4601      	mov	r1, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8a:	f000 b817 	b.w	8007ebc <_kill_r>
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d00a      	beq.n	8007ea8 <_raise_r+0x4c>
 8007e92:	1c59      	adds	r1, r3, #1
 8007e94:	d103      	bne.n	8007e9e <_raise_r+0x42>
 8007e96:	2316      	movs	r3, #22
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	e7e7      	b.n	8007e6e <_raise_r+0x12>
 8007e9e:	2400      	movs	r4, #0
 8007ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	4798      	blx	r3
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e7e0      	b.n	8007e6e <_raise_r+0x12>

08007eac <raise>:
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <raise+0xc>)
 8007eae:	4601      	mov	r1, r0
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f7ff bfd3 	b.w	8007e5c <_raise_r>
 8007eb6:	bf00      	nop
 8007eb8:	2000000c 	.word	0x2000000c

08007ebc <_kill_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_kill_r+0x20>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	f7f9 fccb 	bl	8001864 <_kill>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d102      	bne.n	8007ed8 <_kill_r+0x1c>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	b103      	cbz	r3, 8007ed8 <_kill_r+0x1c>
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	bd38      	pop	{r3, r4, r5, pc}
 8007eda:	bf00      	nop
 8007edc:	20000450 	.word	0x20000450

08007ee0 <_getpid_r>:
 8007ee0:	f7f9 bcb8 	b.w	8001854 <_getpid>

08007ee4 <_init>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr

08007ef0 <_fini>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr
