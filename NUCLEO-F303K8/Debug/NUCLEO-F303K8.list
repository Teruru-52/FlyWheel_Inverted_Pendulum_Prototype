
NUCLEO-F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007f28  08007f28  00017f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080083a4  080083a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083a4  080083a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001dc  0800858c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800858c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a7d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003346  00000000  00000000  00042c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00045fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00046f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021628  00000000  00000000  00047db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ba  00000000  00000000  000693e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3031  00000000  00000000  0007d89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001308cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005270  00000000  00000000  00130920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f0c 	.word	0x08007f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007f0c 	.word	0x08007f0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c52:	ed97 0a01 	vldr	s0, [r7, #4]
 8000c56:	f004 fa1f 	bl	8005098 <atanf>
 8000c5a:	eef0 7a40 	vmov.f32	s15, s0
 8000c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_ZN8AttitudeC1Ev>:
#include "attitude_est.hpp"

Attitude::Attitude() :
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
		mpu1(1), mpu2(2), init_flag(false) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f926 	bl	8000ec4 <_ZN6KalmanC1Ev>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3328      	adds	r3, #40	; 0x28
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fba0 	bl	80013c4 <_ZN7MPU6500C1Ei>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	335c      	adds	r3, #92	; 0x5c
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fb9a 	bl	80013c4 <_ZN7MPU6500C1Ei>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <_ZN8AttitudeC1Ev+0x44>)
 8000c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	41100000 	.word	0x41100000

08000cb0 <_ZN8Attitude4InitEv>:

void Attitude::Init() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4834      	ldr	r0, [pc, #208]	; (8000d90 <_ZN8Attitude4InitEv+0xe0>)
 8000cbe:	f001 fc51 	bl	8002564 <HAL_GPIO_WritePin>
	mpu1.MPU6500_Init();
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3328      	adds	r3, #40	; 0x28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fc1e 	bl	8001508 <_ZN7MPU650012MPU6500_InitEv>
	mpu2.MPU6500_Init();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	335c      	adds	r3, #92	; 0x5c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fc19 	bl	8001508 <_ZN7MPU650012MPU6500_InitEv>
	mpu1.MPU6500_OffsetCalc();
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3328      	adds	r3, #40	; 0x28
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fc80 	bl	80015e0 <_ZN7MPU650018MPU6500_OffsetCalcEv>
	mpu2.MPU6500_OffsetCalc();
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	335c      	adds	r3, #92	; 0x5c
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fc7b 	bl	80015e0 <_ZN7MPU650018MPU6500_OffsetCalcEv>
	mpu1.Get_MPU6500_Data();
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3328      	adds	r3, #40	; 0x28
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fdf6 	bl	80018e0 <_ZN7MPU650016Get_MPU6500_DataEv>
	mpu2.Get_MPU6500_Data();
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	335c      	adds	r3, #92	; 0x5c
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fdf1 	bl	80018e0 <_ZN7MPU650016Get_MPU6500_DataEv>

	mx = mpu1.az - mu * mpu2.az;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8000d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	my = mpu1.ay - mu * mpu2.ay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8000d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	theta_b = atan(-mx / my);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000d44:	eeb1 7a67 	vneg.f32	s14, s15
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8000d4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d52:	eeb0 0a66 	vmov.f32	s0, s13
 8000d56:	f7ff ff77 	bl	8000c48 <_ZSt4atanf>
 8000d5a:	eef0 7a40 	vmov.f32	s15, s0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	kalman.setAngle(theta_b);
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8000d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d70:	4610      	mov	r0, r2
 8000d72:	f000 f8d9 	bl	8000f28 <_ZN6Kalman8setAngleEf>

	init_flag = true;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <_ZN8Attitude4InitEv+0xe0>)
 8000d84:	f001 fbee 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	48000400 	.word	0x48000400

08000d94 <_ZN8Attitude14GetEstAttitudeEv>:

std::array<float, 2> Attitude::GetEstAttitude() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
	mpu1.Get_MPU6500_Data();
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3328      	adds	r3, #40	; 0x28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fd9d 	bl	80018e0 <_ZN7MPU650016Get_MPU6500_DataEv>
	mpu2.Get_MPU6500_Data();
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	335c      	adds	r3, #92	; 0x5c
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd98 	bl	80018e0 <_ZN7MPU650016Get_MPU6500_DataEv>

	mx = mpu1.az - mu * mpu2.az;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8000dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	my = mpu1.ay - mu * mpu2.ay;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8000de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	theta_b = atan(-mx / my);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000df6:	eeb1 7a67 	vneg.f32	s14, s15
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8000e00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e04:	eeb0 0a66 	vmov.f32	s0, s13
 8000e08:	f7ff ff1e 	bl	8000c48 <_ZSt4atanf>
 8000e0c:	eef0 7a40 	vmov.f32	s15, s0
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	dot_theta_b = 0.5 * (mpu1.gx + mpu2.gx);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8000e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
//	est_attitude[0] = kalman.getAngle(theta_b, dot_theta_b, 0.01);
//	est_attitude[1] = kalman.getRate();
	est_attitude[0] = mpu1.az;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	33a4      	adds	r3, #164	; 0xa4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f824 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	6013      	str	r3, [r2, #0]
	est_attitude[1] = mpu2.az;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	33a4      	adds	r3, #164	; 0xa4
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f81a 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5c:	6013      	str	r3, [r2, #0]

	return est_attitude;
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	32a4      	adds	r2, #164	; 0xa4
 8000e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	ee07 2a10 	vmov	s14, r2
 8000e76:	ee07 3a90 	vmov	s15, r3
}
 8000e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7e:	eef0 0a67 	vmov.f32	s1, s15
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZNSt5arrayIfLj2EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f805 	bl	8000ea6 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "kalman.hpp"

Kalman::Kalman() {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <_ZN6KalmanC1Ev+0x58>)
 8000ed0:	601a      	str	r2, [r3, #0]
    Q_bias = 0.003f;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_ZN6KalmanC1Ev+0x5c>)
 8000ed6:	605a      	str	r2, [r3, #4]
    R_measure = 0.03f;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_ZN6KalmanC1Ev+0x60>)
 8000edc:	609a      	str	r2, [r3, #8]

    angle = 0.0f; // Reset the angle
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    bias = 0.0f; // Reset bias
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
    P[0][1] = 0.0f;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
    P[1][0] = 0.0f;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
    P[1][1] = 0.0f;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
};
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	3a83126f 	.word	0x3a83126f
 8000f20:	3b449ba6 	.word	0x3b449ba6
 8000f24:	3cf5c28f 	.word	0x3cf5c28f

08000f28 <_ZN6Kalman8setAngleEf>:
    P[1][1] -= K[1] * P01_temp;

    return angle;
};

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	ed87 0a00 	vstr	s0, [r7]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_TIM_PeriodElapsedCallback>:
int led_count = 0;
//extern "C" bool init_flag;
bool init_flag = false;
std::array<float, 2> est_data;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d14f      	bne.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		if (init_flag) {
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d04b      	beq.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			count = (count + 1) % 160;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1c59      	adds	r1, r3, #1
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f68:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6c:	119a      	asrs	r2, r3, #6
 8000f6e:	17cb      	asrs	r3, r1, #31
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	1aca      	subs	r2, r1, r3
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f7e:	601a      	str	r2, [r3, #0]
			if (count == 0) { // time interruption 100Hz
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d137      	bne.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
				est_data = att.GetEstAttitude();
 8000f88:	4821      	ldr	r0, [pc, #132]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f8a:	f7ff ff03 	bl	8000d94 <_ZN8Attitude14GetEstAttitudeEv>
 8000f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f92:	eef0 7a60 	vmov.f32	s15, s1
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f98:	ed83 7a00 	vstr	s14, [r3]
 8000f9c:	edc3 7a01 	vstr	s15, [r3, #4]
				led_count = (led_count + 1) % 100;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fac:	1159      	asrs	r1, r3, #5
 8000fae:	17d3      	asrs	r3, r2, #31
 8000fb0:	1acb      	subs	r3, r1, r3
 8000fb2:	2164      	movs	r1, #100	; 0x64
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fbc:	6013      	str	r3, [r2, #0]
				if (led_count == 0) {
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d113      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0xa6>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000fcc:	f001 faca 	bl	8002564 <HAL_GPIO_WritePin>
					printf("%f \r\n", est_data[0]);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fd4:	f7ff ff58 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fab3 	bl	8000548 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000fe8:	f004 fdce 	bl	8005b88 <iprintf>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
				}
			}
		}
	}
}
 8000fec:	e004      	b.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ff4:	f001 fab6 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000030c 	.word	0x2000030c
 8001004:	200003e4 	.word	0x200003e4
 8001008:	200003dc 	.word	0x200003dc
 800100c:	66666667 	.word	0x66666667
 8001010:	200001f8 	.word	0x200001f8
 8001014:	200003e8 	.word	0x200003e8
 8001018:	200003e0 	.word	0x200003e0
 800101c:	51eb851f 	.word	0x51eb851f
 8001020:	48000400 	.word	0x48000400
 8001024:	08007f28 	.word	0x08007f28

08001028 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800102c:	f000 ff8c 	bl	8001f48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001030:	f000 f826 	bl	8001080 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001034:	f000 f942 	bl	80012bc <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 8001038:	f000 f86e 	bl	8001118 <_ZL12MX_SPI1_Initv>
	MX_TIM3_Init();
 800103c:	f000 f8ae 	bl	800119c <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8001040:	f000 f908 	bl	8001254 <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <main+0x44>)
 8001046:	f003 f855 	bl	80040f4 <HAL_TIM_Base_Start_IT>
	setbuf(stdout, NULL);
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <main+0x48>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fe26 	bl	8005ca4 <setbuf>
	att.Init();
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <main+0x4c>)
 800105a:	f7ff fe29 	bl	8000cb0 <_ZN8Attitude4InitEv>
	init_flag = true;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <main+0x50>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	printf("Init finish \r\n");
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <main+0x54>)
 8001066:	f004 fe15 	bl	8005c94 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800106a:	e7fe      	b.n	800106a <main+0x42>
 800106c:	2000030c 	.word	0x2000030c
 8001070:	2000000c 	.word	0x2000000c
 8001074:	200001f8 	.word	0x200001f8
 8001078:	200003e4 	.word	0x200003e4
 800107c:	08007f30 	.word	0x08007f30

08001080 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 f908 	bl	80052a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010b6:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fa67 	bl	8002594 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <_Z18SystemClock_Configv+0x5a>
		Error_Handler();
 80010d6:	f000 f951 	bl	800137c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f955 	bl	80033a4 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_Z18SystemClock_Configv+0x8e>
		Error_Handler();
 800110a:	f000 f937 	bl	800137c <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	3740      	adds	r7, #64	; 0x40
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <_ZL12MX_SPI1_Initv+0x80>)
 8001120:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001132:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001136:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800113a:	2202      	movs	r2, #2
 800113c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001140:	2201      	movs	r2, #1
 8001142:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001166:	2207      	movs	r2, #7
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <_ZL12MX_SPI1_Initv+0x7c>)
 8001178:	f002 fb4a 	bl	8003810 <HAL_SPI_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf14      	ite	ne
 8001182:	2301      	movne	r3, #1
 8001184:	2300      	moveq	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 800118c:	f000 f8f6 	bl	800137c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002a8 	.word	0x200002a8
 8001198:	40013000 	.word	0x40013000

0800119c <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <_ZL12MX_TIM3_Initv+0xb4>)
 80011be:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 30;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011c2:	221e      	movs	r2, #30
 80011c4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100 - 1;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011ce:	2263      	movs	r2, #99	; 0x63
 80011d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 80011e0:	f002 ff30 	bl	8004044 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_TIM3_Initv+0x5c>
		Error_Handler();
 80011f4:	f000 f8c2 	bl	800137c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 8001206:	f003 f8f0 	bl	80043ea <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <_ZL12MX_TIM3_Initv+0x82>
		Error_Handler();
 800121a:	f000 f8af 	bl	800137c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <_ZL12MX_TIM3_Initv+0xb0>)
 800122c:	f003 fae0 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <_ZL12MX_TIM3_Initv+0xa8>
		Error_Handler();
 8001240:	f000 f89c 	bl	800137c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000030c 	.word	0x2000030c
 8001250:	40000400 	.word	0x40000400

08001254 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800125c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001298:	f003 fb36 	bl	8004908 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <_ZL19MX_USART2_UART_Initv+0x5c>
		Error_Handler();
 80012ac:	f000 f866 	bl	800137c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000358 	.word	0x20000358
 80012b8:	40004400 	.word	0x40004400

080012bc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <_ZL12MX_GPIO_Initv+0xb8>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2118      	movs	r1, #24
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f001 f91f 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2108      	movs	r1, #8
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <_ZL12MX_GPIO_Initv+0xbc>)
 800132c:	f001 f91a 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8001330:	2318      	movs	r3, #24
 8001332:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f000 ff99 	bl	8002280 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134e:	2308      	movs	r3, #8
 8001350:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <_ZL12MX_GPIO_Initv+0xbc>)
 8001366:	f000 ff8b 	bl	8002280 <HAL_GPIO_Init>

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400

0800137c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139e:	4293      	cmp	r3, r2
 80013a0:	d102      	bne.n	80013a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Attitude att;
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80013a4:	f7ff fc60 	bl	8000c68 <_ZN8AttitudeC1Ev>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001f8 	.word	0x200001f8

080013b4 <_GLOBAL__sub_I_att>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ffe3 	bl	8001388 <_Z41__static_initialization_and_destruction_0ii>
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN7MPU6500C1Ei>:
#include "mpu6500.hpp"
extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

MPU6500::MPU6500(int cs) :
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
		cs(cs){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <_ZN7MPU65009read_byteEhi>:
uint8_t MPU6500::read_byte(uint8_t reg, int cs) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	460b      	mov	r3, r1
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	743b      	strb	r3, [r7, #16]
	tx_data[1] = 0x00;  // dummy
 80013fc:	2300      	movs	r3, #0
 80013fe:	747b      	strb	r3, [r7, #17]

	if (cs == 1) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d116      	bne.n	8001434 <_ZN7MPU65009read_byteEhi+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2110      	movs	r1, #16
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 f8a9 	bl	8002564 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 8001412:	f107 0214 	add.w	r2, r7, #20
 8001416:	f107 0110 	add.w	r1, r7, #16
 800141a:	2301      	movs	r3, #1
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2302      	movs	r3, #2
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <_ZN7MPU65009read_byteEhi+0x8c>)
 8001422:	f002 fa98 	bl	8003956 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2110      	movs	r1, #16
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f001 f899 	bl	8002564 <HAL_GPIO_WritePin>
 8001432:	e018      	b.n	8001466 <_ZN7MPU65009read_byteEhi+0x82>
	} else if (cs == 2) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d115      	bne.n	8001466 <_ZN7MPU65009read_byteEhi+0x82>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2108      	movs	r1, #8
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f001 f88f 	bl	8002564 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 8001446:	f107 0214 	add.w	r2, r7, #20
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	2301      	movs	r3, #1
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <_ZN7MPU65009read_byteEhi+0x8c>)
 8001456:	f002 fa7e 	bl	8003956 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2108      	movs	r1, #8
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f001 f87f 	bl	8002564 <HAL_GPIO_WritePin>
	}

	return rx_data[1];
 8001466:	7d7b      	ldrb	r3, [r7, #21]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200002a8 	.word	0x200002a8

08001474 <_ZN7MPU650010write_byteEhhi>:

void MPU6500::write_byte(uint8_t reg, uint8_t data, int cs) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
 8001482:	4613      	mov	r3, r2
 8001484:	72bb      	strb	r3, [r7, #10]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg & 0x7F;
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800148c:	b2db      	uxtb	r3, r3
 800148e:	743b      	strb	r3, [r7, #16]
//   tx_data[0] = reg | 0x00;
	tx_data[1] = data;  // write data
 8001490:	7abb      	ldrb	r3, [r7, #10]
 8001492:	747b      	strb	r3, [r7, #17]

	if (cs == 1) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d116      	bne.n	80014c8 <_ZN7MPU650010write_byteEhhi+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f001 f85f 	bl	8002564 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 80014a6:	f107 0214 	add.w	r2, r7, #20
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	2301      	movs	r3, #1
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2302      	movs	r3, #2
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <_ZN7MPU650010write_byteEhhi+0x90>)
 80014b6:	f002 fa4e 	bl	8003956 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2110      	movs	r1, #16
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f001 f84f 	bl	8002564 <HAL_GPIO_WritePin>
	} else if (cs == 2) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 80014c6:	e018      	b.n	80014fa <_ZN7MPU650010write_byteEhhi+0x86>
	} else if (cs == 2) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d115      	bne.n	80014fa <_ZN7MPU650010write_byteEhhi+0x86>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2108      	movs	r1, #8
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 f845 	bl	8002564 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 80014da:	f107 0214 	add.w	r2, r7, #20
 80014de:	f107 0110 	add.w	r1, r7, #16
 80014e2:	2301      	movs	r3, #1
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2302      	movs	r3, #2
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <_ZN7MPU650010write_byteEhhi+0x90>)
 80014ea:	f002 fa34 	bl	8003956 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2108      	movs	r1, #8
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f001 f835 	bl	8002564 <HAL_GPIO_WritePin>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002a8 	.word	0x200002a8

08001508 <_ZN7MPU650012MPU6500_InitEv>:

void MPU6500::MPU6500_Init() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint8_t who_am_i;

	HAL_Delay(100);             // wait start up
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f000 fd7f 	bl	8002014 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I, cs); // read who am i
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	461a      	mov	r2, r3
 800151c:	2175      	movs	r1, #117	; 0x75
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff60 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
	printf("who_am_i_%d = 0x%x\r\n", cs, who_am_i); // check who am i value
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	4619      	mov	r1, r3
 8001530:	4828      	ldr	r0, [pc, #160]	; (80015d4 <_ZN7MPU650012MPU6500_InitEv+0xcc>)
 8001532:	f004 fb29 	bl	8005b88 <iprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*) who_am_i, sizeof(who_am_i), 3000);
	HAL_Delay(10);
 8001536:	200a      	movs	r0, #10
 8001538:	f000 fd6c 	bl	8002014 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I, cs); // read who am i
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	461a      	mov	r2, r3
 8001542:	2175      	movs	r1, #117	; 0x75
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff4d 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
		printf("who_am_i_%d = 0x%x\r\n", cs, who_am_i); // check who am i value
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	4619      	mov	r1, r3
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <_ZN7MPU650012MPU6500_InitEv+0xcc>)
 8001558:	f004 fb16 	bl	8005b88 <iprintf>
	//	HAL_UART_Transmit(&huart2, (uint8_t*) who_am_i, sizeof(who_am_i), 3000);
		HAL_Delay(10);
 800155c:	200a      	movs	r0, #10
 800155e:	f000 fd59 	bl	8002014 <HAL_Delay>
	if (who_am_i != 0x70) {
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b70      	cmp	r3, #112	; 0x70
 8001566:	d005      	beq.n	8001574 <_ZN7MPU650012MPU6500_InitEv+0x6c>
		printf("mpu6500_%d error \r\n", cs);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <_ZN7MPU650012MPU6500_InitEv+0xd0>)
 8001570:	f004 fb0a 	bl	8005b88 <iprintf>
	}

	HAL_Delay(50);
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f000 fd4d 	bl	8002014 <HAL_Delay>
	write_byte(PWR_MGMT_1, 0x00, cs); // set pwr_might (20MHz)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2200      	movs	r2, #0
 8001580:	216b      	movs	r1, #107	; 0x6b
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff76 	bl	8001474 <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 8001588:	2032      	movs	r0, #50	; 0x32
 800158a:	f000 fd43 	bl	8002014 <HAL_Delay>
	write_byte(CONFIG, 0x00, cs); // set config (FSYNCはNC)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2200      	movs	r2, #0
 8001594:	211a      	movs	r1, #26
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff6c 	bl	8001474 <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 800159c:	2032      	movs	r0, #50	; 0x32
 800159e:	f000 fd39 	bl	8002014 <HAL_Delay>
	write_byte(GYRO_CONFIG, 0x18, cs); // set gyro config (2000dps)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2218      	movs	r2, #24
 80015a8:	211b      	movs	r1, #27
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff62 	bl	8001474 <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f000 fd2f 	bl	8002014 <HAL_Delay>
	write_byte(ACCEL_CONFIG, 0x00, cs); // set accel config (2g)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2200      	movs	r2, #0
 80015bc:	211c      	movs	r1, #28
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff58 	bl	8001474 <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80015c4:	2032      	movs	r0, #50	; 0x32
 80015c6:	f000 fd25 	bl	8002014 <HAL_Delay>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08007f40 	.word	0x08007f40
 80015d8:	08007f58 	.word	0x08007f58
 80015dc:	00000000 	.word	0x00000000

080015e0 <_ZN7MPU650018MPU6500_OffsetCalcEv>:

void MPU6500::MPU6500_OffsetCalc() {
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b08d      	sub	sp, #52	; 0x34
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;
	float ax_sum = 0;
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ay_sum = 0;
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
	float az_sum = 0;
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
	float gx_sum = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
	float gy_sum = 0;
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
	float gz_sum = 0;
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < 1000; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001616:	f280 8121 	bge.w	800185c <_ZN7MPU650018MPU6500_OffsetCalcEv+0x27c>
		// H:8bit shift, Link h and l
		ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	461a      	mov	r2, r3
 8001620:	213b      	movs	r1, #59	; 0x3b
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fede 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001628:	4603      	mov	r3, r0
 800162a:	b29b      	uxth	r3, r3
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_XOUT_L, cs));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	461a      	mov	r2, r3
 8001636:	213c      	movs	r1, #60	; 0x3c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fed3 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800163e:	4603      	mov	r3, r0
 8001640:	b29b      	uxth	r3, r3
 8001642:	4323      	orrs	r3, r4
 8001644:	b29b      	uxth	r3, r3
		ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 8001646:	827b      	strh	r3, [r7, #18]
		ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	461a      	mov	r2, r3
 800164e:	213d      	movs	r1, #61	; 0x3d
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fec7 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001656:	4603      	mov	r3, r0
 8001658:	b29b      	uxth	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_YOUT_L, cs));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	461a      	mov	r2, r3
 8001664:	213e      	movs	r1, #62	; 0x3e
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff febc 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800166c:	4603      	mov	r3, r0
 800166e:	b29b      	uxth	r3, r3
 8001670:	4323      	orrs	r3, r4
 8001672:	b29b      	uxth	r3, r3
		ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001674:	823b      	strh	r3, [r7, #16]
		az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	461a      	mov	r2, r3
 800167c:	213f      	movs	r1, #63	; 0x3f
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff feb0 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001684:	4603      	mov	r3, r0
 8001686:	b29b      	uxth	r3, r3
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_ZOUT_L, cs));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	461a      	mov	r2, r3
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fea5 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800169a:	4603      	mov	r3, r0
 800169c:	b29b      	uxth	r3, r3
 800169e:	4323      	orrs	r3, r4
 80016a0:	b29b      	uxth	r3, r3
		az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 80016a2:	81fb      	strh	r3, [r7, #14]
		gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	461a      	mov	r2, r3
 80016aa:	2143      	movs	r1, #67	; 0x43
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fe99 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_XOUT_L, cs));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	461a      	mov	r2, r3
 80016c0:	2144      	movs	r1, #68	; 0x44
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fe8e 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4323      	orrs	r3, r4
 80016ce:	b29b      	uxth	r3, r3
		gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 80016d0:	81bb      	strh	r3, [r7, #12]
		gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2145      	movs	r1, #69	; 0x45
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe82 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_YOUT_L, cs));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	461a      	mov	r2, r3
 80016ee:	2146      	movs	r1, #70	; 0x46
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fe77 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4323      	orrs	r3, r4
 80016fc:	b29b      	uxth	r3, r3
		gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 80016fe:	817b      	strh	r3, [r7, #10]
		gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	461a      	mov	r2, r3
 8001706:	2147      	movs	r1, #71	; 0x47
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe6b 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800170e:	4603      	mov	r3, r0
 8001710:	b29b      	uxth	r3, r3
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_ZOUT_L, cs));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	461a      	mov	r2, r3
 800171c:	2148      	movs	r1, #72	; 0x48
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe60 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001724:	4603      	mov	r3, r0
 8001726:	b29b      	uxth	r3, r3
 8001728:	4323      	orrs	r3, r4
 800172a:	b29b      	uxth	r3, r3
		gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 800172c:	813b      	strh	r3, [r7, #8]

		ax_sum += (float) (ax_raw / ACCEL_FACTOR);
 800172e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fef6 	bl	8000524 <__aeabi_i2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 800173e:	f7ff f885 	bl	800084c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa2d 	bl	8000ba8 <__aeabi_d2f>
 800174e:	ee07 0a10 	vmov	s14, r0
 8001752:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800175a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay_sum += (float) (ay_raw / ACCEL_FACTOR);
 800175e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fede 	bl	8000524 <__aeabi_i2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 800176e:	f7ff f86d 	bl	800084c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa15 	bl	8000ba8 <__aeabi_d2f>
 800177e:	ee07 0a10 	vmov	s14, r0
 8001782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800178a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az_sum += (float) (az_raw / ACCEL_FACTOR);
 800178e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fec6 	bl	8000524 <__aeabi_i2d>
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 800179e:	f7ff f855 	bl	800084c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f9fd 	bl	8000ba8 <__aeabi_d2f>
 80017ae:	ee07 0a10 	vmov	s14, r0
 80017b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80017b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		gx_sum += (float) (gx_raw / GYRO_FACTOR); // dps to deg/sec
 80017be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe feae 	bl	8000524 <__aeabi_i2d>
 80017c8:	a341      	add	r3, pc, #260	; (adr r3, 80018d0 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f83d 	bl	800084c <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f9e5 	bl	8000ba8 <__aeabi_d2f>
 80017de:	ee07 0a10 	vmov	s14, r0
 80017e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ea:	edc7 7a08 	vstr	s15, [r7, #32]
		gy_sum += (float) (gy_raw / GYRO_FACTOR);
 80017ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe96 	bl	8000524 <__aeabi_i2d>
 80017f8:	a335      	add	r3, pc, #212	; (adr r3, 80018d0 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f825 	bl	800084c <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9cd 	bl	8000ba8 <__aeabi_d2f>
 800180e:	ee07 0a10 	vmov	s14, r0
 8001812:	edd7 7a07 	vldr	s15, [r7, #28]
 8001816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181a:	edc7 7a07 	vstr	s15, [r7, #28]
		gz_sum += (float) (gz_raw / GYRO_FACTOR);
 800181e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe7e 	bl	8000524 <__aeabi_i2d>
 8001828:	a329      	add	r3, pc, #164	; (adr r3, 80018d0 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f80d 	bl	800084c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9b5 	bl	8000ba8 <__aeabi_d2f>
 800183e:	ee07 0a10 	vmov	s14, r0
 8001842:	edd7 7a06 	vldr	s15, [r7, #24]
 8001846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184a:	edc7 7a06 	vstr	s15, [r7, #24]
		HAL_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fbe0 	bl	8002014 <HAL_Delay>
	for (int i = 0; i < 1000; i++) {
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e6d9      	b.n	8001610 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x30>
	}
	ax_offset = ax_sum / 1000.0;
 800185c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001860:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edc3 7a00 	vstr	s15, [r3]
	ay_offset = ay_sum / 1000.0;
 800186e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001872:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 8001876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edc3 7a01 	vstr	s15, [r3, #4]
	az_offset = az_sum / 1000.0;
 8001880:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001884:	eddf 6a15 	vldr	s13, [pc, #84]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 8001888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edc3 7a02 	vstr	s15, [r3, #8]
	gx_offset = gx_sum / 1000.0;
 8001892:	ed97 7a08 	vldr	s14, [r7, #32]
 8001896:	eddf 6a11 	vldr	s13, [pc, #68]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 800189a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a03 	vstr	s15, [r3, #12]
	gy_offset = gy_sum / 1000.0;
 80018a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80018a8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edc3 7a04 	vstr	s15, [r3, #16]
	gz_offset = gz_sum / 1000.0;
 80018b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80018ba:	eddf 6a08 	vldr	s13, [pc, #32]	; 80018dc <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80018c8:	bf00      	nop
 80018ca:	3734      	adds	r7, #52	; 0x34
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	66666666 	.word	0x66666666
 80018d4:	40306666 	.word	0x40306666
 80018d8:	40d00000 	.word	0x40d00000
 80018dc:	447a0000 	.word	0x447a0000

080018e0 <_ZN7MPU650016Get_MPU6500_DataEv>:

void MPU6500::Get_MPU6500_Data() {
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;

	// H:8bit shift, Link h and l
	ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	461a      	mov	r2, r3
 80018ee:	213b      	movs	r1, #59	; 0x3b
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fd77 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_XOUT_L, cs));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	461a      	mov	r2, r3
 8001904:	213c      	movs	r1, #60	; 0x3c
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fd6c 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800190c:	4603      	mov	r3, r0
 800190e:	b29b      	uxth	r3, r3
 8001910:	4323      	orrs	r3, r4
 8001912:	b29b      	uxth	r3, r3
	ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 8001914:	82fb      	strh	r3, [r7, #22]
	ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	461a      	mov	r2, r3
 800191c:	213d      	movs	r1, #61	; 0x3d
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fd60 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001924:	4603      	mov	r3, r0
 8001926:	b29b      	uxth	r3, r3
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_YOUT_L, cs));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	461a      	mov	r2, r3
 8001932:	213e      	movs	r1, #62	; 0x3e
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fd55 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 800193a:	4603      	mov	r3, r0
 800193c:	b29b      	uxth	r3, r3
 800193e:	4323      	orrs	r3, r4
 8001940:	b29b      	uxth	r3, r3
	ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001942:	82bb      	strh	r3, [r7, #20]
	az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	461a      	mov	r2, r3
 800194a:	213f      	movs	r1, #63	; 0x3f
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fd49 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001952:	4603      	mov	r3, r0
 8001954:	b29b      	uxth	r3, r3
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_ZOUT_L, cs));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	461a      	mov	r2, r3
 8001960:	2140      	movs	r1, #64	; 0x40
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fd3e 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001968:	4603      	mov	r3, r0
 800196a:	b29b      	uxth	r3, r3
 800196c:	4323      	orrs	r3, r4
 800196e:	b29b      	uxth	r3, r3
	az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 8001970:	827b      	strh	r3, [r7, #18]
	gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	461a      	mov	r2, r3
 8001978:	2143      	movs	r1, #67	; 0x43
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd32 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001980:	4603      	mov	r3, r0
 8001982:	b29b      	uxth	r3, r3
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_XOUT_L, cs));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	461a      	mov	r2, r3
 800198e:	2144      	movs	r1, #68	; 0x44
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fd27 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 8001996:	4603      	mov	r3, r0
 8001998:	b29b      	uxth	r3, r3
 800199a:	4323      	orrs	r3, r4
 800199c:	b29b      	uxth	r3, r3
	gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 800199e:	823b      	strh	r3, [r7, #16]
	gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2145      	movs	r1, #69	; 0x45
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fd1b 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_YOUT_L, cs));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	461a      	mov	r2, r3
 80019bc:	2146      	movs	r1, #70	; 0x46
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fd10 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4323      	orrs	r3, r4
 80019ca:	b29b      	uxth	r3, r3
	gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 80019cc:	81fb      	strh	r3, [r7, #14]
	gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	461a      	mov	r2, r3
 80019d4:	2147      	movs	r1, #71	; 0x47
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fd04 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29b      	uxth	r3, r3
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_ZOUT_L, cs));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	461a      	mov	r2, r3
 80019ea:	2148      	movs	r1, #72	; 0x48
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fcf9 	bl	80013e4 <_ZN7MPU65009read_byteEhi>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4323      	orrs	r3, r4
 80019f8:	b29b      	uxth	r3, r3
	gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 80019fa:	81bb      	strh	r3, [r7, #12]

	ax = (float) (ax_raw / ACCEL_FACTOR) - ax_offset;
 80019fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd8f 	bl	8000524 <__aeabi_i2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001a0c:	f7fe ff1e 	bl	800084c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8c6 	bl	8000ba8 <__aeabi_d2f>
 8001a1c:	ee07 0a10 	vmov	s14, r0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edc3 7a07 	vstr	s15, [r3, #28]
	ay = (float) (ay_raw / ACCEL_FACTOR) - ay_offset;
 8001a30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd75 	bl	8000524 <__aeabi_i2d>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001a40:	f7fe ff04 	bl	800084c <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8ac 	bl	8000ba8 <__aeabi_d2f>
 8001a50:	ee07 0a10 	vmov	s14, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	edc3 7a08 	vstr	s15, [r3, #32]
	az = (float) (az_raw / ACCEL_FACTOR) - az_offset;
 8001a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd5b 	bl	8000524 <__aeabi_i2d>
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001a74:	f7fe feea 	bl	800084c <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f892 	bl	8000ba8 <__aeabi_d2f>
 8001a84:	ee07 0a10 	vmov	s14, r0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	gx = (float) (gx_raw / GYRO_FACTOR) - gx_offset;
 8001a98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd41 	bl	8000524 <__aeabi_i2d>
 8001aa2:	a327      	add	r3, pc, #156	; (adr r3, 8001b40 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fed0 	bl	800084c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f878 	bl	8000ba8 <__aeabi_d2f>
 8001ab8:	ee07 0a10 	vmov	s14, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	gy = (float) (gy_raw / GYRO_FACTOR) - gy_offset;
 8001acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd27 	bl	8000524 <__aeabi_i2d>
 8001ad6:	a31a      	add	r3, pc, #104	; (adr r3, 8001b40 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe feb6 	bl	800084c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f85e 	bl	8000ba8 <__aeabi_d2f>
 8001aec:	ee07 0a10 	vmov	s14, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	gz = (float) (gz_raw / GYRO_FACTOR) - gz_offset;
 8001b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd0d 	bl	8000524 <__aeabi_i2d>
 8001b0a:	a30d      	add	r3, pc, #52	; (adr r3, 8001b40 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fe9c 	bl	800084c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f844 	bl	8000ba8 <__aeabi_d2f>
 8001b20:	ee07 0a10 	vmov	s14, r0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	66666666 	.word	0x66666666
 8001b44:	40306666 	.word	0x40306666
 8001b48:	40d00000 	.word	0x40d00000

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x44>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x44>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x44>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_MspInit+0x44>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x44>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x44>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_SPI_MspInit+0x7c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d128      	bne.n	8001c08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_SPI_MspInit+0x80>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001be6:	23e0      	movs	r3, #224	; 0xe0
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c04:	f000 fb3c 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_TIM_Base_MspInit+0x44>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d113      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201d      	movs	r0, #29
 8001c48:	f000 fae3 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c4c:	201d      	movs	r0, #29
 8001c4e:	f000 fafc 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40000400 	.word	0x40000400
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d129      	bne.n	8001cda <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	6153      	str	r3, [r2, #20]
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001cb6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd6:	f000 fad3 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40004400 	.word	0x40004400
 8001ce8:	40021000 	.word	0x40021000

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f94c 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM3_IRQHandler+0x10>)
 8001d46:	f002 fa31 	bl	80041ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000030c 	.word	0x2000030c

08001d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_kill>:

int _kill(int pid, int sig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d6e:	f003 fa6f 	bl	8005250 <__errno>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2216      	movs	r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
	return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_exit>:

void _exit (int status)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ffe7 	bl	8001d64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d96:	e7fe      	b.n	8001d96 <_exit+0x12>

08001d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e00a      	b.n	8001dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001daa:	f3af 8000 	nop.w
 8001dae:	4601      	mov	r1, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	b2ca      	uxtb	r2, r1
 8001db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf0      	blt.n	8001daa <_read+0x12>
	}

return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_isatty>:

int _isatty(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <_write>:
{
	errno = ENOMEM;
	return -1;
}

int _write(int file, char *ptr, int len) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <_write+0x24>)
 8001e52:	f002 fda7 	bl	80049a4 <HAL_UART_Transmit>
	return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000358 	.word	0x20000358

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f003 f9dc 	bl	8005250 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20003000 	.word	0x20003000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	200003f0 	.word	0x200003f0
 8001ecc:	20000410 	.word	0x20000410

08001ed0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490e      	ldr	r1, [pc, #56]	; (8001f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0b      	ldr	r4, [pc, #44]	; (8001f40 <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f1e:	f7ff ffd7 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f22:	f003 f99b 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f26:	f7ff f87f 	bl	8001028 <main>

08001f2a <LoopForever>:

LoopForever:
    b LoopForever
 8001f2a:	e7fe      	b.n	8001f2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f2c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f38:	080083b0 	.word	0x080083b0
  ldr r2, =_sbss
 8001f3c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f40:	20000410 	.word	0x20000410

08001f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_2_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_Init+0x28>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_Init+0x28>)
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f94f 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f808 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fdf2 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40022000 	.word	0x40022000

08001f74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f967 	bl	8002266 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f000 f92f 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	200003fc 	.word	0x200003fc

08001ffc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200003fc 	.word	0x200003fc

08002014 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff ffee 	bl	8001ffc <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffde 	bl	8001ffc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e14e      	b.n	800252e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8140 	beq.w	8002528 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x40>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d130      	bne.n	8002322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f6:	2201      	movs	r2, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 0201 	and.w	r2, r3, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d017      	beq.n	800235e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d123      	bne.n	80023b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	6939      	ldr	r1, [r7, #16]
 80023ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 809a 	beq.w	8002528 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_GPIO_Init+0x2cc>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240c:	4a50      	ldr	r2, [pc, #320]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a46      	ldr	r2, [pc, #280]	; (8002554 <HAL_GPIO_Init+0x2d4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1dc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_GPIO_Init+0x2d8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a44      	ldr	r2, [pc, #272]	; (800255c <HAL_GPIO_Init+0x2dc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1d4>
 8002450:	2303      	movs	r3, #3
 8002452:	e006      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002454:	2305      	movs	r3, #5
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002458:	2302      	movs	r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002460:	2300      	movs	r3, #0
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002472:	4937      	ldr	r1, [pc, #220]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f47f aea9 	bne.w	8002290 <HAL_GPIO_Init+0x10>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	48000400 	.word	0x48000400
 8002558:	48000800 	.word	0x48000800
 800255c:	48000c00 	.word	0x48000c00
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002580:	e002      	b.n	8002588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800259a:	af00      	add	r7, sp, #0
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f000 bef4 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 816a 	beq.w	8002892 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025be:	4bb3      	ldr	r3, [pc, #716]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ca:	4bb0      	ldr	r3, [pc, #704]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d159      	bne.n	800268a <HAL_RCC_OscConfig+0xf6>
 80025d6:	4bad      	ldr	r3, [pc, #692]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d152      	bne.n	800268a <HAL_RCC_OscConfig+0xf6>
 80025e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0x82>
 8002610:	4b9e      	ldr	r3, [pc, #632]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0xae>
 8002616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002632:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800263e:	4b93      	ldr	r3, [pc, #588]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002646:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800264a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002656:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800265a:	fab2 f282 	clz	r2, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f042 0220 	orr.w	r2, r2, #32
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f002 021f 	and.w	r2, r2, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 810c 	beq.w	8002890 <HAL_RCC_OscConfig+0x2fc>
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 8106 	bne.w	8002890 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f000 be86 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x110>
 8002696:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7c      	ldr	r2, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e030      	b.n	8002706 <HAL_RCC_OscConfig+0x172>
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x134>
 80026ae:	4b77      	ldr	r3, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a76      	ldr	r2, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a73      	ldr	r2, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e01e      	b.n	8002706 <HAL_RCC_OscConfig+0x172>
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d2:	d10c      	bne.n	80026ee <HAL_RCC_OscConfig+0x15a>
 80026d4:	4b6d      	ldr	r3, [pc, #436]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6c      	ldr	r2, [pc, #432]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0x172>
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	f023 020f 	bic.w	r2, r3, #15
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	495d      	ldr	r1, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d059      	beq.n	80027d8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fc6a 	bl	8001ffc <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272e:	f7ff fc65 	bl	8001ffc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d902      	bls.n	8002744 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	f000 be29 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
 8002744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002748:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002758:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0x1e2>
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x20e>
 8002776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002792:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ab      	beq.n	800272e <HAL_RCC_OscConfig+0x19a>
 80027d6:	e05c      	b.n	8002892 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc10 	bl	8001ffc <HAL_GetTick>
 80027dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e2:	f7ff fc0b 	bl	8001ffc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d902      	bls.n	80027f8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f000 bdcf 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800280c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0x296>
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x2c2>
 800282a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002846:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x2f8>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800285e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800286a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0220 	orr.w	r2, r2, #32
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ab      	bne.n	80027e2 <HAL_RCC_OscConfig+0x24e>
 800288a:	e002      	b.n	8002892 <HAL_RCC_OscConfig+0x2fe>
 800288c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 816f 	beq.w	8002b80 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028a2:	4bd0      	ldr	r3, [pc, #832]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028ae:	4bcd      	ldr	r3, [pc, #820]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d16c      	bne.n	8002994 <HAL_RCC_OscConfig+0x400>
 80028ba:	4bca      	ldr	r3, [pc, #808]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d166      	bne.n	8002994 <HAL_RCC_OscConfig+0x400>
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_OscConfig+0x362>
 80028f0:	4bbc      	ldr	r3, [pc, #752]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e013      	b.n	800291e <HAL_RCC_OscConfig+0x38a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800290e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800291a:	4bb2      	ldr	r3, [pc, #712]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2202      	movs	r2, #2
 8002920:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002924:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002928:	fa92 f2a2 	rbit	r2, r2
 800292c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002930:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f002 021f 	and.w	r2, r2, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_RCC_OscConfig+0x3cc>
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d002      	beq.n	8002960 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f000 bd1b 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4ba0      	ldr	r3, [pc, #640]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	21f8      	movs	r1, #248	; 0xf8
 8002970:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002978:	fa91 f1a1 	rbit	r1, r1
 800297c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002980:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002984:	fab1 f181 	clz	r1, r1
 8002988:	b2c9      	uxtb	r1, r1
 800298a:	408b      	lsls	r3, r1
 800298c:	4995      	ldr	r1, [pc, #596]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e0f5      	b.n	8002b80 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8085 	beq.w	8002aaa <HAL_RCC_OscConfig+0x516>
 80029a0:	2301      	movs	r3, #1
 80029a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	461a      	mov	r2, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fb16 	bl	8001ffc <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fb11 	bl	8001ffc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	f000 bcd5 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x488>
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e013      	b.n	8002a44 <HAL_RCC_OscConfig+0x4b0>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f002 021f 	and.w	r2, r2, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0af      	beq.n	80029d6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	21f8      	movs	r1, #248	; 0xf8
 8002a86:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a8e:	fa91 f1a1 	rbit	r1, r1
 8002a92:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a96:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a9a:	fab1 f181 	clz	r1, r1
 8002a9e:	b2c9      	uxtb	r1, r1
 8002aa0:	408b      	lsls	r3, r1
 8002aa2:	4950      	ldr	r1, [pc, #320]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e06a      	b.n	8002b80 <HAL_RCC_OscConfig+0x5ec>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fa91 	bl	8001ffc <HAL_GetTick>
 8002ada:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7ff fa8c 	bl	8001ffc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d902      	bls.n	8002af6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	f000 bc50 	b.w	8003396 <HAL_RCC_OscConfig+0xe02>
 8002af6:	2302      	movs	r3, #2
 8002af8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_OscConfig+0x592>
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	e013      	b.n	8002b4e <HAL_RCC_OscConfig+0x5ba>
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x650>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b58:	fa92 f2a2 	rbit	r2, r2
 8002b5c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b60:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f042 0220 	orr.w	r2, r2, #32
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f002 021f 	and.w	r2, r2, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1af      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80da 	beq.w	8002d44 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d069      	beq.n	8002c6e <HAL_RCC_OscConfig+0x6da>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x654>)
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fa1a 	bl	8001ffc <HAL_GetTick>
 8002bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	e00e      	b.n	8002bec <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7ff fa15 	bl	8001ffc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d906      	bls.n	8002bec <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e3d9      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	10908120 	.word	0x10908120
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c02:	2202      	movs	r2, #2
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4ba5      	ldr	r3, [pc, #660]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c36:	2102      	movs	r1, #2
 8002c38:	6019      	str	r1, [r3, #0]
 8002c3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	fa93 f1a3 	rbit	r1, r3
 8002c44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c48:	6019      	str	r1, [r3, #0]
  return result;
 8002c4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0b0      	beq.n	8002bce <HAL_RCC_OscConfig+0x63a>
 8002c6c:	e06a      	b.n	8002d44 <HAL_RCC_OscConfig+0x7b0>
 8002c6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c84:	601a      	str	r2, [r3, #0]
  return result;
 8002c86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCC_OscConfig+0x934>)
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff f9ac 	bl	8001ffc <HAL_GetTick>
 8002ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e009      	b.n	8002cbe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002caa:	f7ff f9a7 	bl	8001ffc <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e36b      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 8002cbe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cda:	2202      	movs	r2, #2
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d0e:	2102      	movs	r1, #2
 8002d10:	6019      	str	r1, [r3, #0]
 8002d12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f1a3 	rbit	r1, r3
 8002d1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d20:	6019      	str	r1, [r3, #0]
  return result;
 8002d22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1b2      	bne.n	8002caa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8158 	beq.w	8003004 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b5a      	ldr	r3, [pc, #360]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d112      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <HAL_RCC_OscConfig+0x938>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11a      	bne.n	8002dce <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x938>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ecc <HAL_RCC_OscConfig+0x938>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7ff f92a 	bl	8001ffc <HAL_GetTick>
 8002da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e009      	b.n	8002dc2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7ff f925 	bl	8001ffc <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e2e9      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x938>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ef      	beq.n	8002dae <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x852>
 8002dd8:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a39      	ldr	r2, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6213      	str	r3, [r2, #32]
 8002de4:	e02f      	b.n	8002e46 <HAL_RCC_OscConfig+0x8b2>
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x876>
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e02:	f023 0304 	bic.w	r3, r3, #4
 8002e06:	6213      	str	r3, [r2, #32]
 8002e08:	e01d      	b.n	8002e46 <HAL_RCC_OscConfig+0x8b2>
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x89a>
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	e00b      	b.n	8002e46 <HAL_RCC_OscConfig+0x8b2>
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	6213      	str	r3, [r2, #32]
 8002e3a:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d06b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7ff f8d4 	bl	8001ffc <HAL_GetTick>
 8002e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e00b      	b.n	8002e72 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7ff f8cf 	bl	8001ffc <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e291      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 8002e72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e76:	2202      	movs	r2, #2
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e8e:	2202      	movs	r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ea0:	601a      	str	r2, [r3, #0]
  return result;
 8002ea2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ea6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d109      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x93c>
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <HAL_RCC_OscConfig+0x930>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	e014      	b.n	8002eec <HAL_RCC_OscConfig+0x958>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	10908120 	.word	0x10908120
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	4bbb      	ldr	r3, [pc, #748]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	6011      	str	r1, [r2, #0]
 8002ef4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	fa92 f1a2 	rbit	r1, r2
 8002efe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f02:	6011      	str	r1, [r2, #0]
  return result;
 8002f04:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d099      	beq.n	8002e5a <HAL_RCC_OscConfig+0x8c6>
 8002f26:	e063      	b.n	8002ff0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7ff f868 	bl	8001ffc <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7ff f863 	bl	8001ffc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e225      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 8002f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f4e:	2202      	movs	r2, #2
 8002f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f66:	2202      	movs	r2, #2
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	fa93 f2a3 	rbit	r2, r3
 8002f74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f78:	601a      	str	r2, [r3, #0]
  return result;
 8002f7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0302 	orr.w	r3, r3, #2
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0xa06>
 8002f94:	4b90      	ldr	r3, [pc, #576]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	e00d      	b.n	8002fb6 <HAL_RCC_OscConfig+0xa22>
 8002f9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fba:	2102      	movs	r1, #2
 8002fbc:	6011      	str	r1, [r2, #0]
 8002fbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	fa92 f1a2 	rbit	r1, r2
 8002fc8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fcc:	6011      	str	r1, [r2, #0]
  return result;
 8002fce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f002 021f 	and.w	r2, r2, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1a0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b77      	ldr	r3, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a76      	ldr	r2, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 81c2 	beq.w	8003394 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003010:	4b71      	ldr	r3, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	f000 819c 	beq.w	8003356 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 8114 	bne.w	8003252 <HAL_RCC_OscConfig+0xcbe>
 800302a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800302e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003042:	601a      	str	r2, [r3, #0]
  return result;
 8003044:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003048:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	461a      	mov	r2, r3
 800305c:	2300      	movs	r3, #0
 800305e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe ffcc 	bl	8001ffc <HAL_GetTick>
 8003064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e009      	b.n	800307e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fe ffc7 	bl	8001ffc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e18b      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 800307e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	fa93 f2a3 	rbit	r2, r3
 8003092:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800309c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0xb24>
 80030b2:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e01b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb5c>
 80030b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f2a3 	rbit	r2, r3
 80030cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030f8:	6011      	str	r1, [r2, #0]
 80030fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fa92 f1a2 	rbit	r1, r2
 8003104:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003108:	6011      	str	r1, [r2, #0]
  return result;
 800310a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fab2 f282 	clz	r2, r2
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	f042 0220 	orr.w	r2, r2, #32
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	f002 021f 	and.w	r2, r2, #31
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f202 	lsl.w	r2, r1, r2
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d19e      	bne.n	800306a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	430b      	orrs	r3, r1
 8003142:	4925      	ldr	r1, [pc, #148]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800314c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003160:	601a      	str	r2, [r3, #0]
  return result;
 8003162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003166:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003172:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	461a      	mov	r2, r3
 800317a:	2301      	movs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe ff3d 	bl	8001ffc <HAL_GetTick>
 8003182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe ff38 	bl	8001ffc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0fc      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 800319c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031b4:	601a      	str	r2, [r3, #0]
  return result;
 80031b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0xc48>
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <HAL_RCC_OscConfig+0xc44>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e01e      	b.n	8003214 <HAL_RCC_OscConfig+0xc80>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_OscConfig+0xe0c>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003218:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	fa92 f1a2 	rbit	r1, r2
 8003228:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800322c:	6011      	str	r1, [r2, #0]
  return result;
 800322e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f002 021f 	and.w	r2, r2, #31
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d09b      	beq.n	8003188 <HAL_RCC_OscConfig+0xbf4>
 8003250:	e0a0      	b.n	8003394 <HAL_RCC_OscConfig+0xe00>
 8003252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003256:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f2a3 	rbit	r2, r3
 8003266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326a:	601a      	str	r2, [r3, #0]
  return result;
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800327c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe feb8 	bl	8001ffc <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe feb3 	bl	8001ffc <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e077      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
 80032a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032be:	601a      	str	r2, [r3, #0]
  return result;
 80032c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_OscConfig+0xd4c>
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0xe0c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e01b      	b.n	8003318 <HAL_RCC_OscConfig+0xd84>
 80032e0:	f107 0320 	add.w	r3, r7, #32
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f107 0320 	add.w	r3, r7, #32
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f107 031c 	add.w	r3, r7, #28
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f107 0318 	add.w	r3, r7, #24
 80032fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_OscConfig+0xe0c>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f107 0210 	add.w	r2, r7, #16
 800331c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	f107 0210 	add.w	r2, r7, #16
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	fa92 f1a2 	rbit	r1, r2
 800332c:	f107 020c 	add.w	r2, r7, #12
 8003330:	6011      	str	r1, [r2, #0]
  return result;
 8003332:	f107 020c 	add.w	r2, r7, #12
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d19e      	bne.n	8003292 <HAL_RCC_OscConfig+0xcfe>
 8003354:	e01e      	b.n	8003394 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e018      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_RCC_OscConfig+0xe0c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800336c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	429a      	cmp	r2, r3
 800337c:	d108      	bne.n	8003390 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800337e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b09e      	sub	sp, #120	; 0x78
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e162      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b90      	ldr	r3, [pc, #576]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	498b      	ldr	r1, [pc, #556]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e14a      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f8:	4b82      	ldr	r3, [pc, #520]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	497f      	ldr	r1, [pc, #508]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80dc 	beq.w	80035d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d13c      	bne.n	800349a <HAL_RCC_ClockConfig+0xf6>
 8003420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003424:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_RCC_ClockConfig+0xa6>
 8003444:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e00f      	b.n	800346a <HAL_RCC_ClockConfig+0xc6>
 800344a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	663b      	str	r3, [r7, #96]	; 0x60
 800345e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003466:	4b67      	ldr	r3, [pc, #412]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800346e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f042 0220 	orr.w	r2, r2, #32
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f002 021f 	and.w	r2, r2, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d17b      	bne.n	800358e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0f3      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d13c      	bne.n	800351c <HAL_RCC_ClockConfig+0x178>
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_ClockConfig+0x128>
 80034c6:	4b4f      	ldr	r3, [pc, #316]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e00f      	b.n	80034ec <HAL_RCC_ClockConfig+0x148>
 80034cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	647b      	str	r3, [r7, #68]	; 0x44
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
 80034e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80034f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034f4:	fa92 f2a2 	rbit	r2, r2
 80034f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f042 0220 	orr.w	r2, r2, #32
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f002 021f 	and.w	r2, r2, #31
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d13a      	bne.n	800358e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0b2      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
 800351c:	2302      	movs	r3, #2
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_RCC_ClockConfig+0x1a0>
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e00d      	b.n	8003560 <HAL_RCC_ClockConfig+0x1bc>
 8003544:	2302      	movs	r3, #2
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	2302      	movs	r3, #2
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2202      	movs	r2, #2
 8003562:	61ba      	str	r2, [r7, #24]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	fa92 f2a2 	rbit	r2, r2
 800356a:	617a      	str	r2, [r7, #20]
  return result;
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f042 0220 	orr.w	r2, r2, #32
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f002 021f 	and.w	r2, r2, #31
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e079      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fd2c 	bl	8001ffc <HAL_GetTick>
 80035a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe fd28 	bl	8001ffc <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e061      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d214      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	4906      	ldr	r1, [pc, #24]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_RCC_ClockConfig+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e040      	b.n	8003682 <HAL_RCC_ClockConfig+0x2de>
 8003600:	40022000 	.word	0x40022000
 8003604:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCC_ClockConfig+0x2e8>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	491a      	ldr	r1, [pc, #104]	; (800368c <HAL_RCC_ClockConfig+0x2e8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x2e8>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4912      	ldr	r1, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x2e8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003646:	f000 f829 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <HAL_RCC_ClockConfig+0x2e8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003654:	22f0      	movs	r2, #240	; 0xf0
 8003656:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	fa92 f2a2 	rbit	r2, r2
 800365e:	60fa      	str	r2, [r7, #12]
  return result;
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	fab2 f282 	clz	r2, r2
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	40d3      	lsrs	r3, r2
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x2ec>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	fa21 f303 	lsr.w	r3, r1, r3
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <HAL_RCC_ClockConfig+0x2f0>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_ClockConfig+0x2f4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fc7a 	bl	8001f74 <HAL_InitTick>
  
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3778      	adds	r7, #120	; 0x78
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	08007f6c 	.word	0x08007f6c
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b08b      	sub	sp, #44	; 0x2c
 80036a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x30>
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x36>
 80036ca:	e03c      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ce:	623b      	str	r3, [r7, #32]
      break;
 80036d0:	e03c      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	607a      	str	r2, [r7, #4]
  return result;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	220f      	movs	r2, #15
 8003700:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	fa92 f2a2 	rbit	r2, r2
 8003708:	60fa      	str	r2, [r7, #12]
  return result;
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	fab2 f282 	clz	r2, r2
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	40d3      	lsrs	r3, r2
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003724:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	fbb2 f2f3 	udiv	r2, r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	e004      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_RCC_GetSysClockFreq+0xd0>)
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	623b      	str	r3, [r7, #32]
      break;
 8003744:	e002      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003748:	623b      	str	r3, [r7, #32]
      break;
 800374a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374c:	6a3b      	ldr	r3, [r7, #32]
}
 800374e:	4618      	mov	r0, r3
 8003750:	372c      	adds	r7, #44	; 0x2c
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	007a1200 	.word	0x007a1200
 8003764:	08007f84 	.word	0x08007f84
 8003768:	08007f94 	.word	0x08007f94
 800376c:	003d0900 	.word	0x003d0900

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800378e:	f7ff ffef 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003792:	4601      	mov	r1, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800379c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	fa92 f2a2 	rbit	r2, r2
 80037a8:	603a      	str	r2, [r7, #0]
  return result;
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	fab2 f282 	clz	r2, r2
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	40d3      	lsrs	r3, r2
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037b6:	5cd3      	ldrb	r3, [r2, r3]
 80037b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08007f7c 	.word	0x08007f7c

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037d2:	f7ff ffcd 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037d6:	4601      	mov	r1, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	603a      	str	r2, [r7, #0]
  return result;
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	40d3      	lsrs	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x40>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08007f7c 	.word	0x08007f7c

08003810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e095      	b.n	800394e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003832:	d009      	beq.n	8003848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
 800383a:	e005      	b.n	8003848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f996 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003888:	d902      	bls.n	8003890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e002      	b.n	8003896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800389e:	d007      	beq.n	80038b0 <HAL_SPI_Init+0xa0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	ea42 0103 	orr.w	r1, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	f003 0204 	and.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800392c:	ea42 0103 	orr.w	r1, r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08a      	sub	sp, #40	; 0x28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_SPI_TransmitReceive+0x26>
 8003978:	2302      	movs	r3, #2
 800397a:	e1fb      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x41e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003984:	f7fe fb3a 	bl	8001ffc <HAL_GetTick>
 8003988:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003990:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003998:	887b      	ldrh	r3, [r7, #2]
 800399a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039a0:	7efb      	ldrb	r3, [r7, #27]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d00e      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x6e>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ac:	d106      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x66>
 80039b6:	7efb      	ldrb	r3, [r7, #27]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d003      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039c2:	e1cd      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_SPI_TransmitReceive+0x80>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_TransmitReceive+0x80>
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039dc:	e1c0      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d003      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a34:	d802      	bhi.n	8003a3c <HAL_SPI_TransmitReceive+0xe6>
 8003a36:	8a3b      	ldrh	r3, [r7, #16]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d908      	bls.n	8003a4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e007      	b.n	8003a5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d007      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a84:	d97c      	bls.n	8003b80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x13e>
 8003a8e:	8a7b      	ldrh	r3, [r7, #18]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d169      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	881a      	ldrh	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab8:	e056      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d11b      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x1aa>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x1aa>
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d113      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d11c      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x1f2>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	b292      	uxth	r2, r2
 8003b26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b44:	2301      	movs	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b48:	f7fe fa58 	bl	8001ffc <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d807      	bhi.n	8003b68 <HAL_SPI_TransmitReceive+0x212>
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d003      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b66:	e0fb      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1a3      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x164>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d19d      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x164>
 8003b7e:	e0df      	b.n	8003d40 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x23a>
 8003b88:	8a7b      	ldrh	r3, [r7, #18]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	f040 80cb 	bne.w	8003d26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d912      	bls.n	8003bc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	1c9a      	adds	r2, r3, #2
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b02      	subs	r3, #2
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bbe:	e0b2      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be6:	e09e      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d134      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x30a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d02f      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x30a>
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12c      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d912      	bls.n	8003c36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b02      	subs	r3, #2
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c34:	e012      	b.n	8003c5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d148      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x3aa>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d042      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d923      	bls.n	8003cce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	b292      	uxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b02      	subs	r3, #2
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d81f      	bhi.n	8003cfc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	e016      	b.n	8003cfc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f103 020c 	add.w	r2, r3, #12
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d00:	f7fe f97c 	bl	8001ffc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_TransmitReceive+0x3c2>
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x3c8>
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d24:	e01c      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f af5b 	bne.w	8003be8 <HAL_SPI_TransmitReceive+0x292>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f47f af54 	bne.w	8003be8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f937 	bl	8003fb8 <SPI_EndRxTxTransaction>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d006      	beq.n	8003d5e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d5c:	e000      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3728      	adds	r7, #40	; 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d8c:	f7fe f936 	bl	8001ffc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d9c:	f7fe f92e 	bl	8001ffc <HAL_GetTick>
 8003da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	015b      	lsls	r3, r3, #5
 8003da8:	0d1b      	lsrs	r3, r3, #20
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db2:	e054      	b.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d050      	beq.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dbc:	f7fe f91e 	bl	8001ffc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d13d      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dea:	d111      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df4:	d004      	beq.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d107      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d10f      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e017      	b.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d19b      	bne.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000000 	.word	0x20000000

08003e8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e9e:	f7fe f8ad 	bl	8001ffc <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003eae:	f7fe f8a5 	bl	8001ffc <HAL_GetTick>
 8003eb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00da      	lsls	r2, r3, #3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	0d1b      	lsrs	r3, r3, #20
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ed4:	e060      	b.n	8003f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003edc:	d107      	bne.n	8003eee <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d050      	beq.n	8003f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef6:	f7fe f881 	bl	8001ffc <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d902      	bls.n	8003f0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13d      	bne.n	8003f88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f24:	d111      	bne.n	8003f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2e:	d004      	beq.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d107      	bne.n	8003f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	d10f      	bne.n	8003f74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e010      	b.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d196      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3728      	adds	r7, #40	; 0x28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000000 	.word	0x20000000

08003fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7ff ff5b 	bl	8003e8c <SPI_WaitFifoStateUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e027      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fec0 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e014      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff34 	bl	8003e8c <SPI_WaitFifoStateUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e000      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e049      	b.n	80040ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fdd4 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f000 faa2 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e040      	b.n	800418e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_TIM_Base_Start_IT+0xa8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x58>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d009      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x58>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIM_Base_Start_IT+0xac>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x58>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d115      	bne.n	8004178 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b06      	cmp	r3, #6
 800415c:	d015      	beq.n	800418a <HAL_TIM_Base_Start_IT+0x96>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d011      	beq.n	800418a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	e008      	b.n	800418a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e000      	b.n	800418c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	00010007 	.word	0x00010007

080041ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0202 	mvn.w	r2, #2
 80041d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9ce 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9c0 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f9d1 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0204 	mvn.w	r2, #4
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9a4 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f996 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f9a7 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b08      	cmp	r3, #8
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0208 	mvn.w	r2, #8
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f97a 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f96c 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f97d 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0210 	mvn.w	r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2208      	movs	r2, #8
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f950 	bl	8004590 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f942 	bl	800457c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f953 	bl	80045a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0201 	mvn.w	r2, #1
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fe0c 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fac2 	bl	80048e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d10e      	bne.n	800438a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d107      	bne.n	800438a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fab5 	bl	80048f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d10e      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d107      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f901 	bl	80045b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d10e      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0220 	mvn.w	r2, #32
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa75 	bl	80048cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_TIM_ConfigClockSource+0x1c>
 8004402:	2302      	movs	r3, #2
 8004404:	e0b6      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x18a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004428:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004430:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004442:	d03e      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0xd8>
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004448:	f200 8087 	bhi.w	800455a <HAL_TIM_ConfigClockSource+0x170>
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004450:	f000 8086 	beq.w	8004560 <HAL_TIM_ConfigClockSource+0x176>
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d87f      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 800445a:	2b70      	cmp	r3, #112	; 0x70
 800445c:	d01a      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0xaa>
 800445e:	2b70      	cmp	r3, #112	; 0x70
 8004460:	d87b      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 8004462:	2b60      	cmp	r3, #96	; 0x60
 8004464:	d050      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x11e>
 8004466:	2b60      	cmp	r3, #96	; 0x60
 8004468:	d877      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 800446a:	2b50      	cmp	r3, #80	; 0x50
 800446c:	d03c      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xfe>
 800446e:	2b50      	cmp	r3, #80	; 0x50
 8004470:	d873      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d058      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0x13e>
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d86f      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 800447a:	2b30      	cmp	r3, #48	; 0x30
 800447c:	d064      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x15e>
 800447e:	2b30      	cmp	r3, #48	; 0x30
 8004480:	d86b      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 8004482:	2b20      	cmp	r3, #32
 8004484:	d060      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x15e>
 8004486:	2b20      	cmp	r3, #32
 8004488:	d867      	bhi.n	800455a <HAL_TIM_ConfigClockSource+0x170>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d05c      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x15e>
 800448e:	2b10      	cmp	r3, #16
 8004490:	d05a      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0x15e>
 8004492:	e062      	b.n	800455a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f000 f984 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	609a      	str	r2, [r3, #8]
      break;
 80044c0:	e04f      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6899      	ldr	r1, [r3, #8]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f000 f96d 	bl	80047b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e03c      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f000 f8e1 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2150      	movs	r1, #80	; 0x50
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f93a 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004506:	e02c      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	461a      	mov	r2, r3
 8004516:	f000 f900 	bl	800471a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2160      	movs	r1, #96	; 0x60
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f92a 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004526:	e01c      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	461a      	mov	r2, r3
 8004536:	f000 f8c1 	bl	80046bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f91a 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004546:	e00c      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 f911 	bl	800477a <TIM_ITRx_SetConfig>
      break;
 8004558:	e003      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
      break;
 800455e:	e000      	b.n	8004562 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <TIM_Base_SetConfig+0xdc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x28>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x28>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a2f      	ldr	r2, [pc, #188]	; (80046ac <TIM_Base_SetConfig+0xe0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <TIM_Base_SetConfig+0xdc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0x6a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0x6a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <TIM_Base_SetConfig+0xe0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0x6a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0x6a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0x6a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <TIM_Base_SetConfig+0xdc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0xc0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0xc0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0xc0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	615a      	str	r2, [r3, #20]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 030a 	bic.w	r3, r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	f043 0307 	orr.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e054      	b.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004838:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d009      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10c      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4313      	orrs	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40014000 	.word	0x40014000

080048cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e040      	b.n	800499c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd f99a 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8c0 	bl	8004acc <UART_SetConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9ea 	bl	8004d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa71 	bl	8004e7c <UART_CheckIdleState>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 8082 	bne.w	8004ac2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Transmit+0x26>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07a      	b.n	8004ac4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x38>
 80049d8:	2302      	movs	r3, #2
 80049da:	e073      	b.n	8004ac4 <HAL_UART_Transmit+0x120>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2221      	movs	r2, #33	; 0x21
 80049f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f2:	f7fd fb03 	bl	8001ffc <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d108      	bne.n	8004a24 <HAL_UART_Transmit+0x80>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e003      	b.n	8004a2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a34:	e02d      	b.n	8004a92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fa64 	bl	8004f0e <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e039      	b.n	8004ac4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a62:	b292      	uxth	r2, r2
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	e008      	b.n	8004a80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b292      	uxth	r2, r2
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1cb      	bne.n	8004a36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2140      	movs	r1, #64	; 0x40
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 fa30 	bl	8004f0e <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e005      	b.n	8004ac4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b8a      	ldr	r3, [pc, #552]	; (8004d20 <UART_SetConfig+0x254>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a78      	ldr	r2, [pc, #480]	; (8004d24 <UART_SetConfig+0x258>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d120      	bne.n	8004b8a <UART_SetConfig+0xbe>
 8004b48:	4b77      	ldr	r3, [pc, #476]	; (8004d28 <UART_SetConfig+0x25c>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d817      	bhi.n	8004b84 <UART_SetConfig+0xb8>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x90>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b79 	.word	0x08004b79
 8004b64:	08004b7f 	.word	0x08004b7f
 8004b68:	08004b73 	.word	0x08004b73
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e01d      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b72:	2302      	movs	r3, #2
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e01a      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e017      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e014      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e011      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a67      	ldr	r2, [pc, #412]	; (8004d2c <UART_SetConfig+0x260>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d102      	bne.n	8004b9a <UART_SetConfig+0xce>
 8004b94:	2300      	movs	r3, #0
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e009      	b.n	8004bae <UART_SetConfig+0xe2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a64      	ldr	r2, [pc, #400]	; (8004d30 <UART_SetConfig+0x264>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <UART_SetConfig+0xde>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e001      	b.n	8004bae <UART_SetConfig+0xe2>
 8004baa:	2310      	movs	r3, #16
 8004bac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb6:	d15b      	bne.n	8004c70 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004bb8:	7ffb      	ldrb	r3, [r7, #31]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d827      	bhi.n	8004c0e <UART_SetConfig+0x142>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0xf8>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fdce 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e013      	b.n	8004c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe fdec 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004bf4:	61b8      	str	r0, [r7, #24]
        break;
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b4e      	ldr	r3, [pc, #312]	; (8004d34 <UART_SetConfig+0x268>)
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e00c      	b.n	8004c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe fd4d 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004c02:	61b8      	str	r0, [r7, #24]
        break;
 8004c04:	e008      	b.n	8004c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e004      	b.n	8004c18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77bb      	strb	r3, [r7, #30]
        break;
 8004c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d074      	beq.n	8004d08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	005a      	lsls	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b0f      	cmp	r3, #15
 8004c3a:	d916      	bls.n	8004c6a <UART_SetConfig+0x19e>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d212      	bcs.n	8004c6a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	89fa      	ldrh	r2, [r7, #14]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e04e      	b.n	8004d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77bb      	strb	r3, [r7, #30]
 8004c6e:	e04b      	b.n	8004d08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c70:	7ffb      	ldrb	r3, [r7, #31]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d827      	bhi.n	8004cc6 <UART_SetConfig+0x1fa>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x1b0>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004cb1 	.word	0x08004cb1
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb7 	.word	0x08004cb7
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cc7 	.word	0x08004cc7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f7fe fd72 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	61b8      	str	r0, [r7, #24]
        break;
 8004ca6:	e013      	b.n	8004cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fe fd90 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004cac:	61b8      	str	r0, [r7, #24]
        break;
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <UART_SetConfig+0x268>)
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e00c      	b.n	8004cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe fcf1 	bl	800369c <HAL_RCC_GetSysClockFreq>
 8004cba:	61b8      	str	r0, [r7, #24]
        break;
 8004cbc:	e008      	b.n	8004cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	61bb      	str	r3, [r7, #24]
        break;
 8004cc4:	e004      	b.n	8004cd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cce:	bf00      	nop
    }

    if (pclk != 0U)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d018      	beq.n	8004d08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	085a      	lsrs	r2, r3, #1
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	441a      	add	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0f      	cmp	r3, #15
 8004cf0:	d908      	bls.n	8004d04 <UART_SetConfig+0x238>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d204      	bcs.n	8004d04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	e001      	b.n	8004d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	efff69f3 	.word	0xefff69f3
 8004d24:	40013800 	.word	0x40013800
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40004400 	.word	0x40004400
 8004d30:	40004800 	.word	0x40004800
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e36:	d10a      	bne.n	8004e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e8c:	f7fd f8b6 	bl	8001ffc <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d10e      	bne.n	8004ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f82d 	bl	8004f0e <UART_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e023      	b.n	8004f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d10e      	bne.n	8004eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f817 	bl	8004f0e <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e00d      	b.n	8004f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b09c      	sub	sp, #112	; 0x70
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1e:	e0a5      	b.n	800506c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	f000 80a1 	beq.w	800506c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fd f867 	bl	8001ffc <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d13e      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f54:	667b      	str	r3, [r7, #100]	; 0x64
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e6      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e067      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d04f      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d147      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
 8005006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	613b      	str	r3, [r7, #16]
   return(result);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005038:	623a      	str	r2, [r7, #32]
 800503a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	61bb      	str	r3, [r7, #24]
   return(result);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e010      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4013      	ands	r3, r2
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	429a      	cmp	r2, r3
 8005088:	f43f af4a 	beq.w	8004f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3770      	adds	r7, #112	; 0x70
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <atanf>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	ee10 5a10 	vmov	r5, s0
 800509e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80050a2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80050a6:	eef0 7a40 	vmov.f32	s15, s0
 80050aa:	db10      	blt.n	80050ce <atanf+0x36>
 80050ac:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80050b0:	dd04      	ble.n	80050bc <atanf+0x24>
 80050b2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80050b6:	eeb0 0a67 	vmov.f32	s0, s15
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80051f4 <atanf+0x15c>
 80050c0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80051f8 <atanf+0x160>
 80050c4:	2d00      	cmp	r5, #0
 80050c6:	bfd8      	it	le
 80050c8:	eef0 7a40 	vmovle.f32	s15, s0
 80050cc:	e7f3      	b.n	80050b6 <atanf+0x1e>
 80050ce:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <atanf+0x164>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	dc10      	bgt.n	80050f6 <atanf+0x5e>
 80050d4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80050d8:	da0a      	bge.n	80050f0 <atanf+0x58>
 80050da:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005200 <atanf+0x168>
 80050de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	dce2      	bgt.n	80050b6 <atanf+0x1e>
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	e013      	b.n	800511e <atanf+0x86>
 80050f6:	f000 f8a3 	bl	8005240 <fabsf>
 80050fa:	4b42      	ldr	r3, [pc, #264]	; (8005204 <atanf+0x16c>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	dc4f      	bgt.n	80051a0 <atanf+0x108>
 8005100:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005104:	429c      	cmp	r4, r3
 8005106:	dc41      	bgt.n	800518c <atanf+0xf4>
 8005108:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800510c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005110:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005114:	2300      	movs	r3, #0
 8005116:	ee30 0a27 	vadd.f32	s0, s0, s15
 800511a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005124:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005208 <atanf+0x170>
 8005128:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800520c <atanf+0x174>
 800512c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005210 <atanf+0x178>
 8005130:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8005214 <atanf+0x17c>
 8005134:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005138:	eea7 6a25 	vfma.f32	s12, s14, s11
 800513c:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005218 <atanf+0x180>
 8005140:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005144:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800521c <atanf+0x184>
 8005148:	eea5 6a87 	vfma.f32	s12, s11, s14
 800514c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005220 <atanf+0x188>
 8005150:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005154:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8005224 <atanf+0x18c>
 8005158:	eea5 6a87 	vfma.f32	s12, s11, s14
 800515c:	eddf 5a32 	vldr	s11, [pc, #200]	; 8005228 <atanf+0x190>
 8005160:	eee7 5a05 	vfma.f32	s11, s14, s10
 8005164:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800522c <atanf+0x194>
 8005168:	eea5 5a87 	vfma.f32	s10, s11, s14
 800516c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8005230 <atanf+0x198>
 8005170:	eee5 5a07 	vfma.f32	s11, s10, s14
 8005174:	eea5 0a87 	vfma.f32	s0, s11, s14
 8005178:	ee20 0a07 	vmul.f32	s0, s0, s14
 800517c:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005180:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005184:	d121      	bne.n	80051ca <atanf+0x132>
 8005186:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800518a:	e794      	b.n	80050b6 <atanf+0x1e>
 800518c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005190:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005194:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005198:	2301      	movs	r3, #1
 800519a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800519e:	e7be      	b.n	800511e <atanf+0x86>
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <atanf+0x19c>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	dc0b      	bgt.n	80051be <atanf+0x126>
 80051a6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80051aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ae:	eea0 7a27 	vfma.f32	s14, s0, s15
 80051b2:	2302      	movs	r3, #2
 80051b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80051b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051bc:	e7af      	b.n	800511e <atanf+0x86>
 80051be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80051c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80051c6:	2303      	movs	r3, #3
 80051c8:	e7a9      	b.n	800511e <atanf+0x86>
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <atanf+0x1a0>)
 80051cc:	491b      	ldr	r1, [pc, #108]	; (800523c <atanf+0x1a4>)
 80051ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80051d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80051d6:	ed93 7a00 	vldr	s14, [r3]
 80051da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80051de:	2d00      	cmp	r5, #0
 80051e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80051e4:	ed92 0a00 	vldr	s0, [r2]
 80051e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80051ec:	bfb8      	it	lt
 80051ee:	eef1 7a67 	vneglt.f32	s15, s15
 80051f2:	e760      	b.n	80050b6 <atanf+0x1e>
 80051f4:	3fc90fdb 	.word	0x3fc90fdb
 80051f8:	bfc90fdb 	.word	0xbfc90fdb
 80051fc:	3edfffff 	.word	0x3edfffff
 8005200:	7149f2ca 	.word	0x7149f2ca
 8005204:	3f97ffff 	.word	0x3f97ffff
 8005208:	3c8569d7 	.word	0x3c8569d7
 800520c:	3d4bda59 	.word	0x3d4bda59
 8005210:	bd15a221 	.word	0xbd15a221
 8005214:	be4ccccd 	.word	0xbe4ccccd
 8005218:	3d886b35 	.word	0x3d886b35
 800521c:	3dba2e6e 	.word	0x3dba2e6e
 8005220:	3e124925 	.word	0x3e124925
 8005224:	3eaaaaab 	.word	0x3eaaaaab
 8005228:	bd6ef16b 	.word	0xbd6ef16b
 800522c:	bd9d8795 	.word	0xbd9d8795
 8005230:	bde38e38 	.word	0xbde38e38
 8005234:	401bffff 	.word	0x401bffff
 8005238:	08007fa4 	.word	0x08007fa4
 800523c:	08007fb4 	.word	0x08007fb4

08005240 <fabsf>:
 8005240:	ee10 3a10 	vmov	r3, s0
 8005244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005248:	ee00 3a10 	vmov	s0, r3
 800524c:	4770      	bx	lr
	...

08005250 <__errno>:
 8005250:	4b01      	ldr	r3, [pc, #4]	; (8005258 <__errno+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	2000000c 	.word	0x2000000c

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	; (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	; (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	; (80052a0 <__libc_init_array+0x44>)
 8005270:	f002 fe4c 	bl	8007f0c <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	080083a4 	.word	0x080083a4
 8005298:	080083a4 	.word	0x080083a4
 800529c:	080083a4 	.word	0x080083a4
 80052a0:	080083ac 	.word	0x080083ac

080052a4 <memset>:
 80052a4:	4402      	add	r2, r0
 80052a6:	4603      	mov	r3, r0
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d100      	bne.n	80052ae <memset+0xa>
 80052ac:	4770      	bx	lr
 80052ae:	f803 1b01 	strb.w	r1, [r3], #1
 80052b2:	e7f9      	b.n	80052a8 <memset+0x4>

080052b4 <__cvt>:
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	ec55 4b10 	vmov	r4, r5, d0
 80052bc:	2d00      	cmp	r5, #0
 80052be:	460e      	mov	r6, r1
 80052c0:	4619      	mov	r1, r3
 80052c2:	462b      	mov	r3, r5
 80052c4:	bfbb      	ittet	lt
 80052c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052ca:	461d      	movlt	r5, r3
 80052cc:	2300      	movge	r3, #0
 80052ce:	232d      	movlt	r3, #45	; 0x2d
 80052d0:	700b      	strb	r3, [r1, #0]
 80052d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052d8:	4691      	mov	r9, r2
 80052da:	f023 0820 	bic.w	r8, r3, #32
 80052de:	bfbc      	itt	lt
 80052e0:	4622      	movlt	r2, r4
 80052e2:	4614      	movlt	r4, r2
 80052e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e8:	d005      	beq.n	80052f6 <__cvt+0x42>
 80052ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052ee:	d100      	bne.n	80052f2 <__cvt+0x3e>
 80052f0:	3601      	adds	r6, #1
 80052f2:	2102      	movs	r1, #2
 80052f4:	e000      	b.n	80052f8 <__cvt+0x44>
 80052f6:	2103      	movs	r1, #3
 80052f8:	ab03      	add	r3, sp, #12
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	ab02      	add	r3, sp, #8
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	ec45 4b10 	vmov	d0, r4, r5
 8005304:	4653      	mov	r3, sl
 8005306:	4632      	mov	r2, r6
 8005308:	f000 fee6 	bl	80060d8 <_dtoa_r>
 800530c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005310:	4607      	mov	r7, r0
 8005312:	d102      	bne.n	800531a <__cvt+0x66>
 8005314:	f019 0f01 	tst.w	r9, #1
 8005318:	d022      	beq.n	8005360 <__cvt+0xac>
 800531a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800531e:	eb07 0906 	add.w	r9, r7, r6
 8005322:	d110      	bne.n	8005346 <__cvt+0x92>
 8005324:	783b      	ldrb	r3, [r7, #0]
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	d10a      	bne.n	8005340 <__cvt+0x8c>
 800532a:	2200      	movs	r2, #0
 800532c:	2300      	movs	r3, #0
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fb fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005336:	b918      	cbnz	r0, 8005340 <__cvt+0x8c>
 8005338:	f1c6 0601 	rsb	r6, r6, #1
 800533c:	f8ca 6000 	str.w	r6, [sl]
 8005340:	f8da 3000 	ldr.w	r3, [sl]
 8005344:	4499      	add	r9, r3
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fb fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005352:	b108      	cbz	r0, 8005358 <__cvt+0xa4>
 8005354:	f8cd 900c 	str.w	r9, [sp, #12]
 8005358:	2230      	movs	r2, #48	; 0x30
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	454b      	cmp	r3, r9
 800535e:	d307      	bcc.n	8005370 <__cvt+0xbc>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005364:	1bdb      	subs	r3, r3, r7
 8005366:	4638      	mov	r0, r7
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	b004      	add	sp, #16
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	9103      	str	r1, [sp, #12]
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e7f0      	b.n	800535a <__cvt+0xa6>

08005378 <__exponent>:
 8005378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537a:	4603      	mov	r3, r0
 800537c:	2900      	cmp	r1, #0
 800537e:	bfb8      	it	lt
 8005380:	4249      	neglt	r1, r1
 8005382:	f803 2b02 	strb.w	r2, [r3], #2
 8005386:	bfb4      	ite	lt
 8005388:	222d      	movlt	r2, #45	; 0x2d
 800538a:	222b      	movge	r2, #43	; 0x2b
 800538c:	2909      	cmp	r1, #9
 800538e:	7042      	strb	r2, [r0, #1]
 8005390:	dd2a      	ble.n	80053e8 <__exponent+0x70>
 8005392:	f10d 0407 	add.w	r4, sp, #7
 8005396:	46a4      	mov	ip, r4
 8005398:	270a      	movs	r7, #10
 800539a:	46a6      	mov	lr, r4
 800539c:	460a      	mov	r2, r1
 800539e:	fb91 f6f7 	sdiv	r6, r1, r7
 80053a2:	fb07 1516 	mls	r5, r7, r6, r1
 80053a6:	3530      	adds	r5, #48	; 0x30
 80053a8:	2a63      	cmp	r2, #99	; 0x63
 80053aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053b2:	4631      	mov	r1, r6
 80053b4:	dcf1      	bgt.n	800539a <__exponent+0x22>
 80053b6:	3130      	adds	r1, #48	; 0x30
 80053b8:	f1ae 0502 	sub.w	r5, lr, #2
 80053bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053c0:	1c44      	adds	r4, r0, #1
 80053c2:	4629      	mov	r1, r5
 80053c4:	4561      	cmp	r1, ip
 80053c6:	d30a      	bcc.n	80053de <__exponent+0x66>
 80053c8:	f10d 0209 	add.w	r2, sp, #9
 80053cc:	eba2 020e 	sub.w	r2, r2, lr
 80053d0:	4565      	cmp	r5, ip
 80053d2:	bf88      	it	hi
 80053d4:	2200      	movhi	r2, #0
 80053d6:	4413      	add	r3, r2
 80053d8:	1a18      	subs	r0, r3, r0
 80053da:	b003      	add	sp, #12
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053e6:	e7ed      	b.n	80053c4 <__exponent+0x4c>
 80053e8:	2330      	movs	r3, #48	; 0x30
 80053ea:	3130      	adds	r1, #48	; 0x30
 80053ec:	7083      	strb	r3, [r0, #2]
 80053ee:	70c1      	strb	r1, [r0, #3]
 80053f0:	1d03      	adds	r3, r0, #4
 80053f2:	e7f1      	b.n	80053d8 <__exponent+0x60>

080053f4 <_printf_float>:
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	ed2d 8b02 	vpush	{d8}
 80053fc:	b08d      	sub	sp, #52	; 0x34
 80053fe:	460c      	mov	r4, r1
 8005400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005404:	4616      	mov	r6, r2
 8005406:	461f      	mov	r7, r3
 8005408:	4605      	mov	r5, r0
 800540a:	f001 fe09 	bl	8007020 <_localeconv_r>
 800540e:	f8d0 a000 	ldr.w	sl, [r0]
 8005412:	4650      	mov	r0, sl
 8005414:	f7fa fedc 	bl	80001d0 <strlen>
 8005418:	2300      	movs	r3, #0
 800541a:	930a      	str	r3, [sp, #40]	; 0x28
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	9305      	str	r3, [sp, #20]
 8005420:	f8d8 3000 	ldr.w	r3, [r8]
 8005424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005428:	3307      	adds	r3, #7
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	f8c8 2000 	str.w	r2, [r8]
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800543e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005446:	9307      	str	r3, [sp, #28]
 8005448:	f8cd 8018 	str.w	r8, [sp, #24]
 800544c:	ee08 0a10 	vmov	s16, r0
 8005450:	4b9f      	ldr	r3, [pc, #636]	; (80056d0 <_printf_float+0x2dc>)
 8005452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005456:	f04f 32ff 	mov.w	r2, #4294967295
 800545a:	f7fb fb67 	bl	8000b2c <__aeabi_dcmpun>
 800545e:	bb88      	cbnz	r0, 80054c4 <_printf_float+0xd0>
 8005460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005464:	4b9a      	ldr	r3, [pc, #616]	; (80056d0 <_printf_float+0x2dc>)
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	f7fb fb41 	bl	8000af0 <__aeabi_dcmple>
 800546e:	bb48      	cbnz	r0, 80054c4 <_printf_float+0xd0>
 8005470:	2200      	movs	r2, #0
 8005472:	2300      	movs	r3, #0
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb fb30 	bl	8000adc <__aeabi_dcmplt>
 800547c:	b110      	cbz	r0, 8005484 <_printf_float+0x90>
 800547e:	232d      	movs	r3, #45	; 0x2d
 8005480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <_printf_float+0x2e0>)
 8005486:	4894      	ldr	r0, [pc, #592]	; (80056d8 <_printf_float+0x2e4>)
 8005488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800548c:	bf94      	ite	ls
 800548e:	4698      	movls	r8, r3
 8005490:	4680      	movhi	r8, r0
 8005492:	2303      	movs	r3, #3
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	f023 0204 	bic.w	r2, r3, #4
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	f04f 0900 	mov.w	r9, #0
 80054a2:	9700      	str	r7, [sp, #0]
 80054a4:	4633      	mov	r3, r6
 80054a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80054a8:	4621      	mov	r1, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f9d8 	bl	8005860 <_printf_common>
 80054b0:	3001      	adds	r0, #1
 80054b2:	f040 8090 	bne.w	80055d6 <_printf_float+0x1e2>
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	b00d      	add	sp, #52	; 0x34
 80054bc:	ecbd 8b02 	vpop	{d8}
 80054c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	4640      	mov	r0, r8
 80054ca:	4649      	mov	r1, r9
 80054cc:	f7fb fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80054d0:	b140      	cbz	r0, 80054e4 <_printf_float+0xf0>
 80054d2:	464b      	mov	r3, r9
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfbc      	itt	lt
 80054d8:	232d      	movlt	r3, #45	; 0x2d
 80054da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054de:	487f      	ldr	r0, [pc, #508]	; (80056dc <_printf_float+0x2e8>)
 80054e0:	4b7f      	ldr	r3, [pc, #508]	; (80056e0 <_printf_float+0x2ec>)
 80054e2:	e7d1      	b.n	8005488 <_printf_float+0x94>
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054ea:	9206      	str	r2, [sp, #24]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	d13f      	bne.n	8005570 <_printf_float+0x17c>
 80054f0:	2306      	movs	r3, #6
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	6861      	ldr	r1, [r4, #4]
 80054f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	ab0a      	add	r3, sp, #40	; 0x28
 8005502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005506:	ab09      	add	r3, sp, #36	; 0x24
 8005508:	ec49 8b10 	vmov	d0, r8, r9
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005514:	4628      	mov	r0, r5
 8005516:	f7ff fecd 	bl	80052b4 <__cvt>
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800551e:	2b47      	cmp	r3, #71	; 0x47
 8005520:	4680      	mov	r8, r0
 8005522:	d108      	bne.n	8005536 <_printf_float+0x142>
 8005524:	1cc8      	adds	r0, r1, #3
 8005526:	db02      	blt.n	800552e <_printf_float+0x13a>
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	4299      	cmp	r1, r3
 800552c:	dd41      	ble.n	80055b2 <_printf_float+0x1be>
 800552e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005532:	fa5f fb8b 	uxtb.w	fp, fp
 8005536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800553a:	d820      	bhi.n	800557e <_printf_float+0x18a>
 800553c:	3901      	subs	r1, #1
 800553e:	465a      	mov	r2, fp
 8005540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005544:	9109      	str	r1, [sp, #36]	; 0x24
 8005546:	f7ff ff17 	bl	8005378 <__exponent>
 800554a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800554c:	1813      	adds	r3, r2, r0
 800554e:	2a01      	cmp	r2, #1
 8005550:	4681      	mov	r9, r0
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	dc02      	bgt.n	800555c <_printf_float+0x168>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	07d2      	lsls	r2, r2, #31
 800555a:	d501      	bpl.n	8005560 <_printf_float+0x16c>
 800555c:	3301      	adds	r3, #1
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005564:	2b00      	cmp	r3, #0
 8005566:	d09c      	beq.n	80054a2 <_printf_float+0xae>
 8005568:	232d      	movs	r3, #45	; 0x2d
 800556a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556e:	e798      	b.n	80054a2 <_printf_float+0xae>
 8005570:	9a06      	ldr	r2, [sp, #24]
 8005572:	2a47      	cmp	r2, #71	; 0x47
 8005574:	d1be      	bne.n	80054f4 <_printf_float+0x100>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1bc      	bne.n	80054f4 <_printf_float+0x100>
 800557a:	2301      	movs	r3, #1
 800557c:	e7b9      	b.n	80054f2 <_printf_float+0xfe>
 800557e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005582:	d118      	bne.n	80055b6 <_printf_float+0x1c2>
 8005584:	2900      	cmp	r1, #0
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	dd0b      	ble.n	80055a2 <_printf_float+0x1ae>
 800558a:	6121      	str	r1, [r4, #16]
 800558c:	b913      	cbnz	r3, 8005594 <_printf_float+0x1a0>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	07d0      	lsls	r0, r2, #31
 8005592:	d502      	bpl.n	800559a <_printf_float+0x1a6>
 8005594:	3301      	adds	r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	65a1      	str	r1, [r4, #88]	; 0x58
 800559c:	f04f 0900 	mov.w	r9, #0
 80055a0:	e7de      	b.n	8005560 <_printf_float+0x16c>
 80055a2:	b913      	cbnz	r3, 80055aa <_printf_float+0x1b6>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	07d2      	lsls	r2, r2, #31
 80055a8:	d501      	bpl.n	80055ae <_printf_float+0x1ba>
 80055aa:	3302      	adds	r3, #2
 80055ac:	e7f4      	b.n	8005598 <_printf_float+0x1a4>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7f2      	b.n	8005598 <_printf_float+0x1a4>
 80055b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b8:	4299      	cmp	r1, r3
 80055ba:	db05      	blt.n	80055c8 <_printf_float+0x1d4>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	6121      	str	r1, [r4, #16]
 80055c0:	07d8      	lsls	r0, r3, #31
 80055c2:	d5ea      	bpl.n	800559a <_printf_float+0x1a6>
 80055c4:	1c4b      	adds	r3, r1, #1
 80055c6:	e7e7      	b.n	8005598 <_printf_float+0x1a4>
 80055c8:	2900      	cmp	r1, #0
 80055ca:	bfd4      	ite	le
 80055cc:	f1c1 0202 	rsble	r2, r1, #2
 80055d0:	2201      	movgt	r2, #1
 80055d2:	4413      	add	r3, r2
 80055d4:	e7e0      	b.n	8005598 <_printf_float+0x1a4>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	055a      	lsls	r2, r3, #21
 80055da:	d407      	bmi.n	80055ec <_printf_float+0x1f8>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	4642      	mov	r2, r8
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	d12c      	bne.n	8005644 <_printf_float+0x250>
 80055ea:	e764      	b.n	80054b6 <_printf_float+0xc2>
 80055ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055f0:	f240 80e0 	bls.w	80057b4 <_printf_float+0x3c0>
 80055f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f7fb fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8005600:	2800      	cmp	r0, #0
 8005602:	d034      	beq.n	800566e <_printf_float+0x27a>
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <_printf_float+0x2f0>)
 8005606:	2301      	movs	r3, #1
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f af51 	beq.w	80054b6 <_printf_float+0xc2>
 8005614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005618:	429a      	cmp	r2, r3
 800561a:	db02      	blt.n	8005622 <_printf_float+0x22e>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	07d8      	lsls	r0, r3, #31
 8005620:	d510      	bpl.n	8005644 <_printf_float+0x250>
 8005622:	ee18 3a10 	vmov	r3, s16
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af41 	beq.w	80054b6 <_printf_float+0xc2>
 8005634:	f04f 0800 	mov.w	r8, #0
 8005638:	f104 091a 	add.w	r9, r4, #26
 800563c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	4543      	cmp	r3, r8
 8005642:	dc09      	bgt.n	8005658 <_printf_float+0x264>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	079b      	lsls	r3, r3, #30
 8005648:	f100 8105 	bmi.w	8005856 <_printf_float+0x462>
 800564c:	68e0      	ldr	r0, [r4, #12]
 800564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005650:	4298      	cmp	r0, r3
 8005652:	bfb8      	it	lt
 8005654:	4618      	movlt	r0, r3
 8005656:	e730      	b.n	80054ba <_printf_float+0xc6>
 8005658:	2301      	movs	r3, #1
 800565a:	464a      	mov	r2, r9
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af27 	beq.w	80054b6 <_printf_float+0xc2>
 8005668:	f108 0801 	add.w	r8, r8, #1
 800566c:	e7e6      	b.n	800563c <_printf_float+0x248>
 800566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	dc39      	bgt.n	80056e8 <_printf_float+0x2f4>
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <_printf_float+0x2f0>)
 8005676:	2301      	movs	r3, #1
 8005678:	4631      	mov	r1, r6
 800567a:	4628      	mov	r0, r5
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f af19 	beq.w	80054b6 <_printf_float+0xc2>
 8005684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005688:	4313      	orrs	r3, r2
 800568a:	d102      	bne.n	8005692 <_printf_float+0x29e>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	07d9      	lsls	r1, r3, #31
 8005690:	d5d8      	bpl.n	8005644 <_printf_float+0x250>
 8005692:	ee18 3a10 	vmov	r3, s16
 8005696:	4652      	mov	r2, sl
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f af09 	beq.w	80054b6 <_printf_float+0xc2>
 80056a4:	f04f 0900 	mov.w	r9, #0
 80056a8:	f104 0a1a 	add.w	sl, r4, #26
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	425b      	negs	r3, r3
 80056b0:	454b      	cmp	r3, r9
 80056b2:	dc01      	bgt.n	80056b8 <_printf_float+0x2c4>
 80056b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b6:	e792      	b.n	80055de <_printf_float+0x1ea>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4652      	mov	r2, sl
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f aef7 	beq.w	80054b6 <_printf_float+0xc2>
 80056c8:	f109 0901 	add.w	r9, r9, #1
 80056cc:	e7ee      	b.n	80056ac <_printf_float+0x2b8>
 80056ce:	bf00      	nop
 80056d0:	7fefffff 	.word	0x7fefffff
 80056d4:	08007fc8 	.word	0x08007fc8
 80056d8:	08007fcc 	.word	0x08007fcc
 80056dc:	08007fd4 	.word	0x08007fd4
 80056e0:	08007fd0 	.word	0x08007fd0
 80056e4:	08007fd8 	.word	0x08007fd8
 80056e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bfa8      	it	ge
 80056f0:	461a      	movge	r2, r3
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	4691      	mov	r9, r2
 80056f6:	dc37      	bgt.n	8005768 <_printf_float+0x374>
 80056f8:	f04f 0b00 	mov.w	fp, #0
 80056fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005700:	f104 021a 	add.w	r2, r4, #26
 8005704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005706:	9305      	str	r3, [sp, #20]
 8005708:	eba3 0309 	sub.w	r3, r3, r9
 800570c:	455b      	cmp	r3, fp
 800570e:	dc33      	bgt.n	8005778 <_printf_float+0x384>
 8005710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005714:	429a      	cmp	r2, r3
 8005716:	db3b      	blt.n	8005790 <_printf_float+0x39c>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07da      	lsls	r2, r3, #31
 800571c:	d438      	bmi.n	8005790 <_printf_float+0x39c>
 800571e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005720:	9b05      	ldr	r3, [sp, #20]
 8005722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	eba2 0901 	sub.w	r9, r2, r1
 800572a:	4599      	cmp	r9, r3
 800572c:	bfa8      	it	ge
 800572e:	4699      	movge	r9, r3
 8005730:	f1b9 0f00 	cmp.w	r9, #0
 8005734:	dc35      	bgt.n	80057a2 <_printf_float+0x3ae>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800573e:	f104 0a1a 	add.w	sl, r4, #26
 8005742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	eba3 0309 	sub.w	r3, r3, r9
 800574c:	4543      	cmp	r3, r8
 800574e:	f77f af79 	ble.w	8005644 <_printf_float+0x250>
 8005752:	2301      	movs	r3, #1
 8005754:	4652      	mov	r2, sl
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f aeaa 	beq.w	80054b6 <_printf_float+0xc2>
 8005762:	f108 0801 	add.w	r8, r8, #1
 8005766:	e7ec      	b.n	8005742 <_printf_float+0x34e>
 8005768:	4613      	mov	r3, r2
 800576a:	4631      	mov	r1, r6
 800576c:	4642      	mov	r2, r8
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c0      	bne.n	80056f8 <_printf_float+0x304>
 8005776:	e69e      	b.n	80054b6 <_printf_float+0xc2>
 8005778:	2301      	movs	r3, #1
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	9205      	str	r2, [sp, #20]
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f ae97 	beq.w	80054b6 <_printf_float+0xc2>
 8005788:	9a05      	ldr	r2, [sp, #20]
 800578a:	f10b 0b01 	add.w	fp, fp, #1
 800578e:	e7b9      	b.n	8005704 <_printf_float+0x310>
 8005790:	ee18 3a10 	vmov	r3, s16
 8005794:	4652      	mov	r2, sl
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d1be      	bne.n	800571e <_printf_float+0x32a>
 80057a0:	e689      	b.n	80054b6 <_printf_float+0xc2>
 80057a2:	9a05      	ldr	r2, [sp, #20]
 80057a4:	464b      	mov	r3, r9
 80057a6:	4442      	add	r2, r8
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	d1c1      	bne.n	8005736 <_printf_float+0x342>
 80057b2:	e680      	b.n	80054b6 <_printf_float+0xc2>
 80057b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b6:	2a01      	cmp	r2, #1
 80057b8:	dc01      	bgt.n	80057be <_printf_float+0x3ca>
 80057ba:	07db      	lsls	r3, r3, #31
 80057bc:	d538      	bpl.n	8005830 <_printf_float+0x43c>
 80057be:	2301      	movs	r3, #1
 80057c0:	4642      	mov	r2, r8
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f ae74 	beq.w	80054b6 <_printf_float+0xc2>
 80057ce:	ee18 3a10 	vmov	r3, s16
 80057d2:	4652      	mov	r2, sl
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f ae6b 	beq.w	80054b6 <_printf_float+0xc2>
 80057e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	f7fb f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ec:	b9d8      	cbnz	r0, 8005826 <_printf_float+0x432>
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	f108 0201 	add.w	r2, r8, #1
 80057f4:	3b01      	subs	r3, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	d10e      	bne.n	800581e <_printf_float+0x42a>
 8005800:	e659      	b.n	80054b6 <_printf_float+0xc2>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	f43f ae52 	beq.w	80054b6 <_printf_float+0xc2>
 8005812:	f108 0801 	add.w	r8, r8, #1
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	4543      	cmp	r3, r8
 800581c:	dcf1      	bgt.n	8005802 <_printf_float+0x40e>
 800581e:	464b      	mov	r3, r9
 8005820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005824:	e6dc      	b.n	80055e0 <_printf_float+0x1ec>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0a1a 	add.w	sl, r4, #26
 800582e:	e7f2      	b.n	8005816 <_printf_float+0x422>
 8005830:	2301      	movs	r3, #1
 8005832:	4642      	mov	r2, r8
 8005834:	e7df      	b.n	80057f6 <_printf_float+0x402>
 8005836:	2301      	movs	r3, #1
 8005838:	464a      	mov	r2, r9
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae38 	beq.w	80054b6 <_printf_float+0xc2>
 8005846:	f108 0801 	add.w	r8, r8, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	4543      	cmp	r3, r8
 8005852:	dcf0      	bgt.n	8005836 <_printf_float+0x442>
 8005854:	e6fa      	b.n	800564c <_printf_float+0x258>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f104 0919 	add.w	r9, r4, #25
 800585e:	e7f4      	b.n	800584a <_printf_float+0x456>

08005860 <_printf_common>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	4616      	mov	r6, r2
 8005866:	4699      	mov	r9, r3
 8005868:	688a      	ldr	r2, [r1, #8]
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005870:	4293      	cmp	r3, r2
 8005872:	bfb8      	it	lt
 8005874:	4613      	movlt	r3, r2
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800587c:	4607      	mov	r7, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b10a      	cbz	r2, 8005886 <_printf_common+0x26>
 8005882:	3301      	adds	r3, #1
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	0699      	lsls	r1, r3, #26
 800588a:	bf42      	ittt	mi
 800588c:	6833      	ldrmi	r3, [r6, #0]
 800588e:	3302      	addmi	r3, #2
 8005890:	6033      	strmi	r3, [r6, #0]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d106      	bne.n	80058a8 <_printf_common+0x48>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dc26      	bgt.n	80058f6 <_printf_common+0x96>
 80058a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058ac:	1e13      	subs	r3, r2, #0
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	bf18      	it	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	0692      	lsls	r2, r2, #26
 80058b6:	d42b      	bmi.n	8005910 <_printf_common+0xb0>
 80058b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d01e      	beq.n	8005904 <_printf_common+0xa4>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	68e5      	ldr	r5, [r4, #12]
 80058ca:	6832      	ldr	r2, [r6, #0]
 80058cc:	f003 0306 	and.w	r3, r3, #6
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	bf08      	it	eq
 80058d4:	1aad      	subeq	r5, r5, r2
 80058d6:	68a3      	ldr	r3, [r4, #8]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	bf0c      	ite	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	2500      	movne	r5, #0
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bfc4      	itt	gt
 80058e6:	1a9b      	subgt	r3, r3, r2
 80058e8:	18ed      	addgt	r5, r5, r3
 80058ea:	2600      	movs	r6, #0
 80058ec:	341a      	adds	r4, #26
 80058ee:	42b5      	cmp	r5, r6
 80058f0:	d11a      	bne.n	8005928 <_printf_common+0xc8>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e008      	b.n	8005908 <_printf_common+0xa8>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4652      	mov	r2, sl
 80058fa:	4649      	mov	r1, r9
 80058fc:	4638      	mov	r0, r7
 80058fe:	47c0      	blx	r8
 8005900:	3001      	adds	r0, #1
 8005902:	d103      	bne.n	800590c <_printf_common+0xac>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	3501      	adds	r5, #1
 800590e:	e7c6      	b.n	800589e <_printf_common+0x3e>
 8005910:	18e1      	adds	r1, r4, r3
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	2030      	movs	r0, #48	; 0x30
 8005916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591a:	4422      	add	r2, r4
 800591c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005924:	3302      	adds	r3, #2
 8005926:	e7c7      	b.n	80058b8 <_printf_common+0x58>
 8005928:	2301      	movs	r3, #1
 800592a:	4622      	mov	r2, r4
 800592c:	4649      	mov	r1, r9
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	3001      	adds	r0, #1
 8005934:	d0e6      	beq.n	8005904 <_printf_common+0xa4>
 8005936:	3601      	adds	r6, #1
 8005938:	e7d9      	b.n	80058ee <_printf_common+0x8e>
	...

0800593c <_printf_i>:
 800593c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	460c      	mov	r4, r1
 8005942:	4691      	mov	r9, r2
 8005944:	7e27      	ldrb	r7, [r4, #24]
 8005946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005948:	2f78      	cmp	r7, #120	; 0x78
 800594a:	4680      	mov	r8, r0
 800594c:	469a      	mov	sl, r3
 800594e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005952:	d807      	bhi.n	8005964 <_printf_i+0x28>
 8005954:	2f62      	cmp	r7, #98	; 0x62
 8005956:	d80a      	bhi.n	800596e <_printf_i+0x32>
 8005958:	2f00      	cmp	r7, #0
 800595a:	f000 80d8 	beq.w	8005b0e <_printf_i+0x1d2>
 800595e:	2f58      	cmp	r7, #88	; 0x58
 8005960:	f000 80a3 	beq.w	8005aaa <_printf_i+0x16e>
 8005964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800596c:	e03a      	b.n	80059e4 <_printf_i+0xa8>
 800596e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005972:	2b15      	cmp	r3, #21
 8005974:	d8f6      	bhi.n	8005964 <_printf_i+0x28>
 8005976:	a001      	add	r0, pc, #4	; (adr r0, 800597c <_printf_i+0x40>)
 8005978:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059e9 	.word	0x080059e9
 8005984:	08005965 	.word	0x08005965
 8005988:	08005965 	.word	0x08005965
 800598c:	08005965 	.word	0x08005965
 8005990:	08005965 	.word	0x08005965
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005965 	.word	0x08005965
 800599c:	08005965 	.word	0x08005965
 80059a0:	08005965 	.word	0x08005965
 80059a4:	08005965 	.word	0x08005965
 80059a8:	08005af5 	.word	0x08005af5
 80059ac:	08005a19 	.word	0x08005a19
 80059b0:	08005ad7 	.word	0x08005ad7
 80059b4:	08005965 	.word	0x08005965
 80059b8:	08005965 	.word	0x08005965
 80059bc:	08005b17 	.word	0x08005b17
 80059c0:	08005965 	.word	0x08005965
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005965 	.word	0x08005965
 80059cc:	08005965 	.word	0x08005965
 80059d0:	08005adf 	.word	0x08005adf
 80059d4:	680b      	ldr	r3, [r1, #0]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	600a      	str	r2, [r1, #0]
 80059dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0a3      	b.n	8005b30 <_printf_i+0x1f4>
 80059e8:	6825      	ldr	r5, [r4, #0]
 80059ea:	6808      	ldr	r0, [r1, #0]
 80059ec:	062e      	lsls	r6, r5, #24
 80059ee:	f100 0304 	add.w	r3, r0, #4
 80059f2:	d50a      	bpl.n	8005a0a <_printf_i+0xce>
 80059f4:	6805      	ldr	r5, [r0, #0]
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	da03      	bge.n	8005a04 <_printf_i+0xc8>
 80059fc:	232d      	movs	r3, #45	; 0x2d
 80059fe:	426d      	negs	r5, r5
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	485e      	ldr	r0, [pc, #376]	; (8005b80 <_printf_i+0x244>)
 8005a06:	230a      	movs	r3, #10
 8005a08:	e019      	b.n	8005a3e <_printf_i+0x102>
 8005a0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a0e:	6805      	ldr	r5, [r0, #0]
 8005a10:	600b      	str	r3, [r1, #0]
 8005a12:	bf18      	it	ne
 8005a14:	b22d      	sxthne	r5, r5
 8005a16:	e7ef      	b.n	80059f8 <_printf_i+0xbc>
 8005a18:	680b      	ldr	r3, [r1, #0]
 8005a1a:	6825      	ldr	r5, [r4, #0]
 8005a1c:	1d18      	adds	r0, r3, #4
 8005a1e:	6008      	str	r0, [r1, #0]
 8005a20:	0628      	lsls	r0, r5, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xec>
 8005a24:	681d      	ldr	r5, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0xf2>
 8005a28:	0669      	lsls	r1, r5, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xe8>
 8005a2c:	881d      	ldrh	r5, [r3, #0]
 8005a2e:	4854      	ldr	r0, [pc, #336]	; (8005b80 <_printf_i+0x244>)
 8005a30:	2f6f      	cmp	r7, #111	; 0x6f
 8005a32:	bf0c      	ite	eq
 8005a34:	2308      	moveq	r3, #8
 8005a36:	230a      	movne	r3, #10
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3e:	6866      	ldr	r6, [r4, #4]
 8005a40:	60a6      	str	r6, [r4, #8]
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	bfa2      	ittt	ge
 8005a46:	6821      	ldrge	r1, [r4, #0]
 8005a48:	f021 0104 	bicge.w	r1, r1, #4
 8005a4c:	6021      	strge	r1, [r4, #0]
 8005a4e:	b90d      	cbnz	r5, 8005a54 <_printf_i+0x118>
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	d04d      	beq.n	8005af0 <_printf_i+0x1b4>
 8005a54:	4616      	mov	r6, r2
 8005a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a5e:	5dc7      	ldrb	r7, [r0, r7]
 8005a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a64:	462f      	mov	r7, r5
 8005a66:	42bb      	cmp	r3, r7
 8005a68:	460d      	mov	r5, r1
 8005a6a:	d9f4      	bls.n	8005a56 <_printf_i+0x11a>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d10b      	bne.n	8005a88 <_printf_i+0x14c>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	07df      	lsls	r7, r3, #31
 8005a74:	d508      	bpl.n	8005a88 <_printf_i+0x14c>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	bfde      	ittt	le
 8005a7e:	2330      	movle	r3, #48	; 0x30
 8005a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a88:	1b92      	subs	r2, r2, r6
 8005a8a:	6122      	str	r2, [r4, #16]
 8005a8c:	f8cd a000 	str.w	sl, [sp]
 8005a90:	464b      	mov	r3, r9
 8005a92:	aa03      	add	r2, sp, #12
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fee2 	bl	8005860 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d14c      	bne.n	8005b3a <_printf_i+0x1fe>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	b004      	add	sp, #16
 8005aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aaa:	4835      	ldr	r0, [pc, #212]	; (8005b80 <_printf_i+0x244>)
 8005aac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	680e      	ldr	r6, [r1, #0]
 8005ab4:	061f      	lsls	r7, r3, #24
 8005ab6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005aba:	600e      	str	r6, [r1, #0]
 8005abc:	d514      	bpl.n	8005ae8 <_printf_i+0x1ac>
 8005abe:	07d9      	lsls	r1, r3, #31
 8005ac0:	bf44      	itt	mi
 8005ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac6:	6023      	strmi	r3, [r4, #0]
 8005ac8:	b91d      	cbnz	r5, 8005ad2 <_printf_i+0x196>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	f023 0320 	bic.w	r3, r3, #32
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	e7b0      	b.n	8005a38 <_printf_i+0xfc>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f043 0320 	orr.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2378      	movs	r3, #120	; 0x78
 8005ae0:	4828      	ldr	r0, [pc, #160]	; (8005b84 <_printf_i+0x248>)
 8005ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ae6:	e7e3      	b.n	8005ab0 <_printf_i+0x174>
 8005ae8:	065e      	lsls	r6, r3, #25
 8005aea:	bf48      	it	mi
 8005aec:	b2ad      	uxthmi	r5, r5
 8005aee:	e7e6      	b.n	8005abe <_printf_i+0x182>
 8005af0:	4616      	mov	r6, r2
 8005af2:	e7bb      	b.n	8005a6c <_printf_i+0x130>
 8005af4:	680b      	ldr	r3, [r1, #0]
 8005af6:	6826      	ldr	r6, [r4, #0]
 8005af8:	6960      	ldr	r0, [r4, #20]
 8005afa:	1d1d      	adds	r5, r3, #4
 8005afc:	600d      	str	r5, [r1, #0]
 8005afe:	0635      	lsls	r5, r6, #24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	d501      	bpl.n	8005b08 <_printf_i+0x1cc>
 8005b04:	6018      	str	r0, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <_printf_i+0x1d2>
 8005b08:	0671      	lsls	r1, r6, #25
 8005b0a:	d5fb      	bpl.n	8005b04 <_printf_i+0x1c8>
 8005b0c:	8018      	strh	r0, [r3, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	4616      	mov	r6, r2
 8005b14:	e7ba      	b.n	8005a8c <_printf_i+0x150>
 8005b16:	680b      	ldr	r3, [r1, #0]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	600a      	str	r2, [r1, #0]
 8005b1c:	681e      	ldr	r6, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	2100      	movs	r1, #0
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fa fb5c 	bl	80001e0 <memchr>
 8005b28:	b108      	cbz	r0, 8005b2e <_printf_i+0x1f2>
 8005b2a:	1b80      	subs	r0, r0, r6
 8005b2c:	6060      	str	r0, [r4, #4]
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	2300      	movs	r3, #0
 8005b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b38:	e7a8      	b.n	8005a8c <_printf_i+0x150>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d0ab      	beq.n	8005aa0 <_printf_i+0x164>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	079b      	lsls	r3, r3, #30
 8005b4c:	d413      	bmi.n	8005b76 <_printf_i+0x23a>
 8005b4e:	68e0      	ldr	r0, [r4, #12]
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	4298      	cmp	r0, r3
 8005b54:	bfb8      	it	lt
 8005b56:	4618      	movlt	r0, r3
 8005b58:	e7a4      	b.n	8005aa4 <_printf_i+0x168>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	47d0      	blx	sl
 8005b64:	3001      	adds	r0, #1
 8005b66:	d09b      	beq.n	8005aa0 <_printf_i+0x164>
 8005b68:	3501      	adds	r5, #1
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	9903      	ldr	r1, [sp, #12]
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dcf2      	bgt.n	8005b5a <_printf_i+0x21e>
 8005b74:	e7eb      	b.n	8005b4e <_printf_i+0x212>
 8005b76:	2500      	movs	r5, #0
 8005b78:	f104 0619 	add.w	r6, r4, #25
 8005b7c:	e7f5      	b.n	8005b6a <_printf_i+0x22e>
 8005b7e:	bf00      	nop
 8005b80:	08007fda 	.word	0x08007fda
 8005b84:	08007feb 	.word	0x08007feb

08005b88 <iprintf>:
 8005b88:	b40f      	push	{r0, r1, r2, r3}
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <iprintf+0x2c>)
 8005b8c:	b513      	push	{r0, r1, r4, lr}
 8005b8e:	681c      	ldr	r4, [r3, #0]
 8005b90:	b124      	cbz	r4, 8005b9c <iprintf+0x14>
 8005b92:	69a3      	ldr	r3, [r4, #24]
 8005b94:	b913      	cbnz	r3, 8005b9c <iprintf+0x14>
 8005b96:	4620      	mov	r0, r4
 8005b98:	f001 f9a4 	bl	8006ee4 <__sinit>
 8005b9c:	ab05      	add	r3, sp, #20
 8005b9e:	9a04      	ldr	r2, [sp, #16]
 8005ba0:	68a1      	ldr	r1, [r4, #8]
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f001 ff1f 	bl	80079e8 <_vfiprintf_r>
 8005baa:	b002      	add	sp, #8
 8005bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb0:	b004      	add	sp, #16
 8005bb2:	4770      	bx	lr
 8005bb4:	2000000c 	.word	0x2000000c

08005bb8 <_puts_r>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	460e      	mov	r6, r1
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b118      	cbz	r0, 8005bc8 <_puts_r+0x10>
 8005bc0:	6983      	ldr	r3, [r0, #24]
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <_puts_r+0x10>
 8005bc4:	f001 f98e 	bl	8006ee4 <__sinit>
 8005bc8:	69ab      	ldr	r3, [r5, #24]
 8005bca:	68ac      	ldr	r4, [r5, #8]
 8005bcc:	b913      	cbnz	r3, 8005bd4 <_puts_r+0x1c>
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f001 f988 	bl	8006ee4 <__sinit>
 8005bd4:	4b2c      	ldr	r3, [pc, #176]	; (8005c88 <_puts_r+0xd0>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d120      	bne.n	8005c1c <_puts_r+0x64>
 8005bda:	686c      	ldr	r4, [r5, #4]
 8005bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bde:	07db      	lsls	r3, r3, #31
 8005be0:	d405      	bmi.n	8005bee <_puts_r+0x36>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	0598      	lsls	r0, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_puts_r+0x36>
 8005be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bea:	f001 fa1e 	bl	800702a <__retarget_lock_acquire_recursive>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	0719      	lsls	r1, r3, #28
 8005bf2:	d51d      	bpl.n	8005c30 <_puts_r+0x78>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	b1db      	cbz	r3, 8005c30 <_puts_r+0x78>
 8005bf8:	3e01      	subs	r6, #1
 8005bfa:	68a3      	ldr	r3, [r4, #8]
 8005bfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	bb39      	cbnz	r1, 8005c56 <_puts_r+0x9e>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da38      	bge.n	8005c7c <_puts_r+0xc4>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	210a      	movs	r1, #10
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f916 	bl	8005e40 <__swbuf_r>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d011      	beq.n	8005c3c <_puts_r+0x84>
 8005c18:	250a      	movs	r5, #10
 8005c1a:	e011      	b.n	8005c40 <_puts_r+0x88>
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <_puts_r+0xd4>)
 8005c1e:	429c      	cmp	r4, r3
 8005c20:	d101      	bne.n	8005c26 <_puts_r+0x6e>
 8005c22:	68ac      	ldr	r4, [r5, #8]
 8005c24:	e7da      	b.n	8005bdc <_puts_r+0x24>
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <_puts_r+0xd8>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	bf08      	it	eq
 8005c2c:	68ec      	ldreq	r4, [r5, #12]
 8005c2e:	e7d5      	b.n	8005bdc <_puts_r+0x24>
 8005c30:	4621      	mov	r1, r4
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f956 	bl	8005ee4 <__swsetup_r>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d0dd      	beq.n	8005bf8 <_puts_r+0x40>
 8005c3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c42:	07da      	lsls	r2, r3, #31
 8005c44:	d405      	bmi.n	8005c52 <_puts_r+0x9a>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	d402      	bmi.n	8005c52 <_puts_r+0x9a>
 8005c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4e:	f001 f9ed 	bl	800702c <__retarget_lock_release_recursive>
 8005c52:	4628      	mov	r0, r5
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da04      	bge.n	8005c64 <_puts_r+0xac>
 8005c5a:	69a2      	ldr	r2, [r4, #24]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	dc06      	bgt.n	8005c6e <_puts_r+0xb6>
 8005c60:	290a      	cmp	r1, #10
 8005c62:	d004      	beq.n	8005c6e <_puts_r+0xb6>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	6022      	str	r2, [r4, #0]
 8005c6a:	7019      	strb	r1, [r3, #0]
 8005c6c:	e7c5      	b.n	8005bfa <_puts_r+0x42>
 8005c6e:	4622      	mov	r2, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f8e5 	bl	8005e40 <__swbuf_r>
 8005c76:	3001      	adds	r0, #1
 8005c78:	d1bf      	bne.n	8005bfa <_puts_r+0x42>
 8005c7a:	e7df      	b.n	8005c3c <_puts_r+0x84>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	250a      	movs	r5, #10
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	6022      	str	r2, [r4, #0]
 8005c84:	701d      	strb	r5, [r3, #0]
 8005c86:	e7db      	b.n	8005c40 <_puts_r+0x88>
 8005c88:	080080b0 	.word	0x080080b0
 8005c8c:	080080d0 	.word	0x080080d0
 8005c90:	08008090 	.word	0x08008090

08005c94 <puts>:
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <puts+0xc>)
 8005c96:	4601      	mov	r1, r0
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f7ff bf8d 	b.w	8005bb8 <_puts_r>
 8005c9e:	bf00      	nop
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <setbuf>:
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005caa:	bf0c      	ite	eq
 8005cac:	2202      	moveq	r2, #2
 8005cae:	2200      	movne	r2, #0
 8005cb0:	f000 b800 	b.w	8005cb4 <setvbuf>

08005cb4 <setvbuf>:
 8005cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	461d      	mov	r5, r3
 8005cba:	4b5d      	ldr	r3, [pc, #372]	; (8005e30 <setvbuf+0x17c>)
 8005cbc:	681f      	ldr	r7, [r3, #0]
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	4690      	mov	r8, r2
 8005cc4:	b127      	cbz	r7, 8005cd0 <setvbuf+0x1c>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	b913      	cbnz	r3, 8005cd0 <setvbuf+0x1c>
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f001 f90a 	bl	8006ee4 <__sinit>
 8005cd0:	4b58      	ldr	r3, [pc, #352]	; (8005e34 <setvbuf+0x180>)
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	d167      	bne.n	8005da6 <setvbuf+0xf2>
 8005cd6:	687c      	ldr	r4, [r7, #4]
 8005cd8:	f1b8 0f02 	cmp.w	r8, #2
 8005cdc:	d006      	beq.n	8005cec <setvbuf+0x38>
 8005cde:	f1b8 0f01 	cmp.w	r8, #1
 8005ce2:	f200 809f 	bhi.w	8005e24 <setvbuf+0x170>
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	f2c0 809c 	blt.w	8005e24 <setvbuf+0x170>
 8005cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cee:	07db      	lsls	r3, r3, #31
 8005cf0:	d405      	bmi.n	8005cfe <setvbuf+0x4a>
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	0598      	lsls	r0, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <setvbuf+0x4a>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfa:	f001 f996 	bl	800702a <__retarget_lock_acquire_recursive>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4638      	mov	r0, r7
 8005d02:	f001 f85b 	bl	8006dbc <_fflush_r>
 8005d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d08:	b141      	cbz	r1, 8005d1c <setvbuf+0x68>
 8005d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	d002      	beq.n	8005d18 <setvbuf+0x64>
 8005d12:	4638      	mov	r0, r7
 8005d14:	f001 fd94 	bl	8007840 <_free_r>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61a3      	str	r3, [r4, #24]
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	0619      	lsls	r1, r3, #24
 8005d26:	d503      	bpl.n	8005d30 <setvbuf+0x7c>
 8005d28:	6921      	ldr	r1, [r4, #16]
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f001 fd88 	bl	8007840 <_free_r>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	f1b8 0f02 	cmp.w	r8, #2
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	d06c      	beq.n	8005e1c <setvbuf+0x168>
 8005d42:	ab01      	add	r3, sp, #4
 8005d44:	466a      	mov	r2, sp
 8005d46:	4621      	mov	r1, r4
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f001 f970 	bl	800702e <__swhatbuf_r>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	4318      	orrs	r0, r3
 8005d52:	81a0      	strh	r0, [r4, #12]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d130      	bne.n	8005dba <setvbuf+0x106>
 8005d58:	9d00      	ldr	r5, [sp, #0]
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f001 f9cc 	bl	80070f8 <malloc>
 8005d60:	4606      	mov	r6, r0
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d155      	bne.n	8005e12 <setvbuf+0x15e>
 8005d66:	f8dd 9000 	ldr.w	r9, [sp]
 8005d6a:	45a9      	cmp	r9, r5
 8005d6c:	d14a      	bne.n	8005e04 <setvbuf+0x150>
 8005d6e:	f04f 35ff 	mov.w	r5, #4294967295
 8005d72:	2200      	movs	r2, #0
 8005d74:	60a2      	str	r2, [r4, #8]
 8005d76:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d7a:	6022      	str	r2, [r4, #0]
 8005d7c:	6122      	str	r2, [r4, #16]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d84:	6162      	str	r2, [r4, #20]
 8005d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	07d2      	lsls	r2, r2, #31
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	d405      	bmi.n	8005d9e <setvbuf+0xea>
 8005d92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005d96:	d102      	bne.n	8005d9e <setvbuf+0xea>
 8005d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9a:	f001 f947 	bl	800702c <__retarget_lock_release_recursive>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	b003      	add	sp, #12
 8005da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005da6:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <setvbuf+0x184>)
 8005da8:	429c      	cmp	r4, r3
 8005daa:	d101      	bne.n	8005db0 <setvbuf+0xfc>
 8005dac:	68bc      	ldr	r4, [r7, #8]
 8005dae:	e793      	b.n	8005cd8 <setvbuf+0x24>
 8005db0:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <setvbuf+0x188>)
 8005db2:	429c      	cmp	r4, r3
 8005db4:	bf08      	it	eq
 8005db6:	68fc      	ldreq	r4, [r7, #12]
 8005db8:	e78e      	b.n	8005cd8 <setvbuf+0x24>
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	d0cd      	beq.n	8005d5a <setvbuf+0xa6>
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	b913      	cbnz	r3, 8005dc8 <setvbuf+0x114>
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f001 f88e 	bl	8006ee4 <__sinit>
 8005dc8:	f1b8 0f01 	cmp.w	r8, #1
 8005dcc:	bf08      	it	eq
 8005dce:	89a3      	ldrheq	r3, [r4, #12]
 8005dd0:	6026      	str	r6, [r4, #0]
 8005dd2:	bf04      	itt	eq
 8005dd4:	f043 0301 	orreq.w	r3, r3, #1
 8005dd8:	81a3      	strheq	r3, [r4, #12]
 8005dda:	89a2      	ldrh	r2, [r4, #12]
 8005ddc:	f012 0308 	ands.w	r3, r2, #8
 8005de0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005de4:	d01c      	beq.n	8005e20 <setvbuf+0x16c>
 8005de6:	07d3      	lsls	r3, r2, #31
 8005de8:	bf41      	itttt	mi
 8005dea:	2300      	movmi	r3, #0
 8005dec:	426d      	negmi	r5, r5
 8005dee:	60a3      	strmi	r3, [r4, #8]
 8005df0:	61a5      	strmi	r5, [r4, #24]
 8005df2:	bf58      	it	pl
 8005df4:	60a5      	strpl	r5, [r4, #8]
 8005df6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005df8:	f015 0501 	ands.w	r5, r5, #1
 8005dfc:	d115      	bne.n	8005e2a <setvbuf+0x176>
 8005dfe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005e02:	e7c8      	b.n	8005d96 <setvbuf+0xe2>
 8005e04:	4648      	mov	r0, r9
 8005e06:	f001 f977 	bl	80070f8 <malloc>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d0ae      	beq.n	8005d6e <setvbuf+0xba>
 8005e10:	464d      	mov	r5, r9
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	e7d0      	b.n	8005dbe <setvbuf+0x10a>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	e7a8      	b.n	8005d72 <setvbuf+0xbe>
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	e7e8      	b.n	8005df6 <setvbuf+0x142>
 8005e24:	f04f 35ff 	mov.w	r5, #4294967295
 8005e28:	e7b9      	b.n	8005d9e <setvbuf+0xea>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	e7b7      	b.n	8005d9e <setvbuf+0xea>
 8005e2e:	bf00      	nop
 8005e30:	2000000c 	.word	0x2000000c
 8005e34:	080080b0 	.word	0x080080b0
 8005e38:	080080d0 	.word	0x080080d0
 8005e3c:	08008090 	.word	0x08008090

08005e40 <__swbuf_r>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	460e      	mov	r6, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	4605      	mov	r5, r0
 8005e48:	b118      	cbz	r0, 8005e52 <__swbuf_r+0x12>
 8005e4a:	6983      	ldr	r3, [r0, #24]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <__swbuf_r+0x12>
 8005e4e:	f001 f849 	bl	8006ee4 <__sinit>
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <__swbuf_r+0x98>)
 8005e54:	429c      	cmp	r4, r3
 8005e56:	d12b      	bne.n	8005eb0 <__swbuf_r+0x70>
 8005e58:	686c      	ldr	r4, [r5, #4]
 8005e5a:	69a3      	ldr	r3, [r4, #24]
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	071a      	lsls	r2, r3, #28
 8005e62:	d52f      	bpl.n	8005ec4 <__swbuf_r+0x84>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	b36b      	cbz	r3, 8005ec4 <__swbuf_r+0x84>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	1ac0      	subs	r0, r0, r3
 8005e6e:	6963      	ldr	r3, [r4, #20]
 8005e70:	b2f6      	uxtb	r6, r6
 8005e72:	4283      	cmp	r3, r0
 8005e74:	4637      	mov	r7, r6
 8005e76:	dc04      	bgt.n	8005e82 <__swbuf_r+0x42>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 ff9e 	bl	8006dbc <_fflush_r>
 8005e80:	bb30      	cbnz	r0, 8005ed0 <__swbuf_r+0x90>
 8005e82:	68a3      	ldr	r3, [r4, #8]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	60a3      	str	r3, [r4, #8]
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	6022      	str	r2, [r4, #0]
 8005e8e:	701e      	strb	r6, [r3, #0]
 8005e90:	6963      	ldr	r3, [r4, #20]
 8005e92:	3001      	adds	r0, #1
 8005e94:	4283      	cmp	r3, r0
 8005e96:	d004      	beq.n	8005ea2 <__swbuf_r+0x62>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	07db      	lsls	r3, r3, #31
 8005e9c:	d506      	bpl.n	8005eac <__swbuf_r+0x6c>
 8005e9e:	2e0a      	cmp	r6, #10
 8005ea0:	d104      	bne.n	8005eac <__swbuf_r+0x6c>
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 ff89 	bl	8006dbc <_fflush_r>
 8005eaa:	b988      	cbnz	r0, 8005ed0 <__swbuf_r+0x90>
 8005eac:	4638      	mov	r0, r7
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <__swbuf_r+0x9c>)
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	d101      	bne.n	8005eba <__swbuf_r+0x7a>
 8005eb6:	68ac      	ldr	r4, [r5, #8]
 8005eb8:	e7cf      	b.n	8005e5a <__swbuf_r+0x1a>
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <__swbuf_r+0xa0>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	bf08      	it	eq
 8005ec0:	68ec      	ldreq	r4, [r5, #12]
 8005ec2:	e7ca      	b.n	8005e5a <__swbuf_r+0x1a>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f80c 	bl	8005ee4 <__swsetup_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d0cb      	beq.n	8005e68 <__swbuf_r+0x28>
 8005ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ed4:	e7ea      	b.n	8005eac <__swbuf_r+0x6c>
 8005ed6:	bf00      	nop
 8005ed8:	080080b0 	.word	0x080080b0
 8005edc:	080080d0 	.word	0x080080d0
 8005ee0:	08008090 	.word	0x08008090

08005ee4 <__swsetup_r>:
 8005ee4:	4b32      	ldr	r3, [pc, #200]	; (8005fb0 <__swsetup_r+0xcc>)
 8005ee6:	b570      	push	{r4, r5, r6, lr}
 8005ee8:	681d      	ldr	r5, [r3, #0]
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	b125      	cbz	r5, 8005efa <__swsetup_r+0x16>
 8005ef0:	69ab      	ldr	r3, [r5, #24]
 8005ef2:	b913      	cbnz	r3, 8005efa <__swsetup_r+0x16>
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f000 fff5 	bl	8006ee4 <__sinit>
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <__swsetup_r+0xd0>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d10f      	bne.n	8005f20 <__swsetup_r+0x3c>
 8005f00:	686c      	ldr	r4, [r5, #4]
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f08:	0719      	lsls	r1, r3, #28
 8005f0a:	d42c      	bmi.n	8005f66 <__swsetup_r+0x82>
 8005f0c:	06dd      	lsls	r5, r3, #27
 8005f0e:	d411      	bmi.n	8005f34 <__swsetup_r+0x50>
 8005f10:	2309      	movs	r3, #9
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1e:	e03e      	b.n	8005f9e <__swsetup_r+0xba>
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <__swsetup_r+0xd4>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d101      	bne.n	8005f2a <__swsetup_r+0x46>
 8005f26:	68ac      	ldr	r4, [r5, #8]
 8005f28:	e7eb      	b.n	8005f02 <__swsetup_r+0x1e>
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <__swsetup_r+0xd8>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	bf08      	it	eq
 8005f30:	68ec      	ldreq	r4, [r5, #12]
 8005f32:	e7e6      	b.n	8005f02 <__swsetup_r+0x1e>
 8005f34:	0758      	lsls	r0, r3, #29
 8005f36:	d512      	bpl.n	8005f5e <__swsetup_r+0x7a>
 8005f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3a:	b141      	cbz	r1, 8005f4e <__swsetup_r+0x6a>
 8005f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d002      	beq.n	8005f4a <__swsetup_r+0x66>
 8005f44:	4630      	mov	r0, r6
 8005f46:	f001 fc7b 	bl	8007840 <_free_r>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	2300      	movs	r3, #0
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f043 0308 	orr.w	r3, r3, #8
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	b94b      	cbnz	r3, 8005f7e <__swsetup_r+0x9a>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f74:	d003      	beq.n	8005f7e <__swsetup_r+0x9a>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f001 f87d 	bl	8007078 <__smakebuf_r>
 8005f7e:	89a0      	ldrh	r0, [r4, #12]
 8005f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f84:	f010 0301 	ands.w	r3, r0, #1
 8005f88:	d00a      	beq.n	8005fa0 <__swsetup_r+0xbc>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60a3      	str	r3, [r4, #8]
 8005f8e:	6963      	ldr	r3, [r4, #20]
 8005f90:	425b      	negs	r3, r3
 8005f92:	61a3      	str	r3, [r4, #24]
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	b943      	cbnz	r3, 8005faa <__swsetup_r+0xc6>
 8005f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f9c:	d1ba      	bne.n	8005f14 <__swsetup_r+0x30>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	0781      	lsls	r1, r0, #30
 8005fa2:	bf58      	it	pl
 8005fa4:	6963      	ldrpl	r3, [r4, #20]
 8005fa6:	60a3      	str	r3, [r4, #8]
 8005fa8:	e7f4      	b.n	8005f94 <__swsetup_r+0xb0>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e7f7      	b.n	8005f9e <__swsetup_r+0xba>
 8005fae:	bf00      	nop
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	080080b0 	.word	0x080080b0
 8005fb8:	080080d0 	.word	0x080080d0
 8005fbc:	08008090 	.word	0x08008090

08005fc0 <quorem>:
 8005fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	6903      	ldr	r3, [r0, #16]
 8005fc6:	690c      	ldr	r4, [r1, #16]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	4607      	mov	r7, r0
 8005fcc:	f2c0 8081 	blt.w	80060d2 <quorem+0x112>
 8005fd0:	3c01      	subs	r4, #1
 8005fd2:	f101 0814 	add.w	r8, r1, #20
 8005fd6:	f100 0514 	add.w	r5, r0, #20
 8005fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	429a      	cmp	r2, r3
 8005fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ff8:	d331      	bcc.n	800605e <quorem+0x9e>
 8005ffa:	f04f 0e00 	mov.w	lr, #0
 8005ffe:	4640      	mov	r0, r8
 8006000:	46ac      	mov	ip, r5
 8006002:	46f2      	mov	sl, lr
 8006004:	f850 2b04 	ldr.w	r2, [r0], #4
 8006008:	b293      	uxth	r3, r2
 800600a:	fb06 e303 	mla	r3, r6, r3, lr
 800600e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006012:	b29b      	uxth	r3, r3
 8006014:	ebaa 0303 	sub.w	r3, sl, r3
 8006018:	0c12      	lsrs	r2, r2, #16
 800601a:	f8dc a000 	ldr.w	sl, [ip]
 800601e:	fb06 e202 	mla	r2, r6, r2, lr
 8006022:	fa13 f38a 	uxtah	r3, r3, sl
 8006026:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800602a:	fa1f fa82 	uxth.w	sl, r2
 800602e:	f8dc 2000 	ldr.w	r2, [ip]
 8006032:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006036:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006040:	4581      	cmp	r9, r0
 8006042:	f84c 3b04 	str.w	r3, [ip], #4
 8006046:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800604a:	d2db      	bcs.n	8006004 <quorem+0x44>
 800604c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006050:	b92b      	cbnz	r3, 800605e <quorem+0x9e>
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	3b04      	subs	r3, #4
 8006056:	429d      	cmp	r5, r3
 8006058:	461a      	mov	r2, r3
 800605a:	d32e      	bcc.n	80060ba <quorem+0xfa>
 800605c:	613c      	str	r4, [r7, #16]
 800605e:	4638      	mov	r0, r7
 8006060:	f001 fade 	bl	8007620 <__mcmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	db24      	blt.n	80060b2 <quorem+0xf2>
 8006068:	3601      	adds	r6, #1
 800606a:	4628      	mov	r0, r5
 800606c:	f04f 0c00 	mov.w	ip, #0
 8006070:	f858 2b04 	ldr.w	r2, [r8], #4
 8006074:	f8d0 e000 	ldr.w	lr, [r0]
 8006078:	b293      	uxth	r3, r2
 800607a:	ebac 0303 	sub.w	r3, ip, r3
 800607e:	0c12      	lsrs	r2, r2, #16
 8006080:	fa13 f38e 	uxtah	r3, r3, lr
 8006084:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800608c:	b29b      	uxth	r3, r3
 800608e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006092:	45c1      	cmp	r9, r8
 8006094:	f840 3b04 	str.w	r3, [r0], #4
 8006098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800609c:	d2e8      	bcs.n	8006070 <quorem+0xb0>
 800609e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060a6:	b922      	cbnz	r2, 80060b2 <quorem+0xf2>
 80060a8:	3b04      	subs	r3, #4
 80060aa:	429d      	cmp	r5, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	d30a      	bcc.n	80060c6 <quorem+0x106>
 80060b0:	613c      	str	r4, [r7, #16]
 80060b2:	4630      	mov	r0, r6
 80060b4:	b003      	add	sp, #12
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	3b04      	subs	r3, #4
 80060be:	2a00      	cmp	r2, #0
 80060c0:	d1cc      	bne.n	800605c <quorem+0x9c>
 80060c2:	3c01      	subs	r4, #1
 80060c4:	e7c7      	b.n	8006056 <quorem+0x96>
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	3b04      	subs	r3, #4
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d1f0      	bne.n	80060b0 <quorem+0xf0>
 80060ce:	3c01      	subs	r4, #1
 80060d0:	e7eb      	b.n	80060aa <quorem+0xea>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e7ee      	b.n	80060b4 <quorem+0xf4>
	...

080060d8 <_dtoa_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	ed2d 8b02 	vpush	{d8}
 80060e0:	ec57 6b10 	vmov	r6, r7, d0
 80060e4:	b095      	sub	sp, #84	; 0x54
 80060e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060ec:	9105      	str	r1, [sp, #20]
 80060ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060f2:	4604      	mov	r4, r0
 80060f4:	9209      	str	r2, [sp, #36]	; 0x24
 80060f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060f8:	b975      	cbnz	r5, 8006118 <_dtoa_r+0x40>
 80060fa:	2010      	movs	r0, #16
 80060fc:	f000 fffc 	bl	80070f8 <malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	6260      	str	r0, [r4, #36]	; 0x24
 8006104:	b920      	cbnz	r0, 8006110 <_dtoa_r+0x38>
 8006106:	4bb2      	ldr	r3, [pc, #712]	; (80063d0 <_dtoa_r+0x2f8>)
 8006108:	21ea      	movs	r1, #234	; 0xea
 800610a:	48b2      	ldr	r0, [pc, #712]	; (80063d4 <_dtoa_r+0x2fc>)
 800610c:	f001 fe02 	bl	8007d14 <__assert_func>
 8006110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006114:	6005      	str	r5, [r0, #0]
 8006116:	60c5      	str	r5, [r0, #12]
 8006118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800611a:	6819      	ldr	r1, [r3, #0]
 800611c:	b151      	cbz	r1, 8006134 <_dtoa_r+0x5c>
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	604a      	str	r2, [r1, #4]
 8006122:	2301      	movs	r3, #1
 8006124:	4093      	lsls	r3, r2
 8006126:	608b      	str	r3, [r1, #8]
 8006128:	4620      	mov	r0, r4
 800612a:	f001 f83b 	bl	80071a4 <_Bfree>
 800612e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	1e3b      	subs	r3, r7, #0
 8006136:	bfb9      	ittee	lt
 8006138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800613c:	9303      	strlt	r3, [sp, #12]
 800613e:	2300      	movge	r3, #0
 8006140:	f8c8 3000 	strge.w	r3, [r8]
 8006144:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006148:	4ba3      	ldr	r3, [pc, #652]	; (80063d8 <_dtoa_r+0x300>)
 800614a:	bfbc      	itt	lt
 800614c:	2201      	movlt	r2, #1
 800614e:	f8c8 2000 	strlt.w	r2, [r8]
 8006152:	ea33 0309 	bics.w	r3, r3, r9
 8006156:	d11b      	bne.n	8006190 <_dtoa_r+0xb8>
 8006158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800615a:	f242 730f 	movw	r3, #9999	; 0x270f
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006164:	4333      	orrs	r3, r6
 8006166:	f000 857a 	beq.w	8006c5e <_dtoa_r+0xb86>
 800616a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800616c:	b963      	cbnz	r3, 8006188 <_dtoa_r+0xb0>
 800616e:	4b9b      	ldr	r3, [pc, #620]	; (80063dc <_dtoa_r+0x304>)
 8006170:	e024      	b.n	80061bc <_dtoa_r+0xe4>
 8006172:	4b9b      	ldr	r3, [pc, #620]	; (80063e0 <_dtoa_r+0x308>)
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	9800      	ldr	r0, [sp, #0]
 800617e:	b015      	add	sp, #84	; 0x54
 8006180:	ecbd 8b02 	vpop	{d8}
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	4b94      	ldr	r3, [pc, #592]	; (80063dc <_dtoa_r+0x304>)
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	3303      	adds	r3, #3
 800618e:	e7f3      	b.n	8006178 <_dtoa_r+0xa0>
 8006190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	ec51 0b17 	vmov	r0, r1, d7
 800619a:	2300      	movs	r3, #0
 800619c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80061a0:	f7fa fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80061a4:	4680      	mov	r8, r0
 80061a6:	b158      	cbz	r0, 80061c0 <_dtoa_r+0xe8>
 80061a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061aa:	2301      	movs	r3, #1
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8551 	beq.w	8006c58 <_dtoa_r+0xb80>
 80061b6:	488b      	ldr	r0, [pc, #556]	; (80063e4 <_dtoa_r+0x30c>)
 80061b8:	6018      	str	r0, [r3, #0]
 80061ba:	1e43      	subs	r3, r0, #1
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	e7dd      	b.n	800617c <_dtoa_r+0xa4>
 80061c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80061c4:	aa12      	add	r2, sp, #72	; 0x48
 80061c6:	a913      	add	r1, sp, #76	; 0x4c
 80061c8:	4620      	mov	r0, r4
 80061ca:	f001 facd 	bl	8007768 <__d2b>
 80061ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061d2:	4683      	mov	fp, r0
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d07c      	beq.n	80062d2 <_dtoa_r+0x1fa>
 80061d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80061de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80061e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061f2:	4b7d      	ldr	r3, [pc, #500]	; (80063e8 <_dtoa_r+0x310>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	a36e      	add	r3, pc, #440	; (adr r3, 80063b8 <_dtoa_r+0x2e0>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	a36d      	add	r3, pc, #436	; (adr r3, 80063c0 <_dtoa_r+0x2e8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f83d 	bl	800028c <__adddf3>
 8006212:	4606      	mov	r6, r0
 8006214:	4628      	mov	r0, r5
 8006216:	460f      	mov	r7, r1
 8006218:	f7fa f984 	bl	8000524 <__aeabi_i2d>
 800621c:	a36a      	add	r3, pc, #424	; (adr r3, 80063c8 <_dtoa_r+0x2f0>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa f9e9 	bl	80005f8 <__aeabi_dmul>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa f82d 	bl	800028c <__adddf3>
 8006232:	4606      	mov	r6, r0
 8006234:	460f      	mov	r7, r1
 8006236:	f7fa fc8f 	bl	8000b58 <__aeabi_d2iz>
 800623a:	2200      	movs	r2, #0
 800623c:	4682      	mov	sl, r0
 800623e:	2300      	movs	r3, #0
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa fc4a 	bl	8000adc <__aeabi_dcmplt>
 8006248:	b148      	cbz	r0, 800625e <_dtoa_r+0x186>
 800624a:	4650      	mov	r0, sl
 800624c:	f7fa f96a 	bl	8000524 <__aeabi_i2d>
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	f7fa fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006258:	b908      	cbnz	r0, 800625e <_dtoa_r+0x186>
 800625a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625e:	f1ba 0f16 	cmp.w	sl, #22
 8006262:	d854      	bhi.n	800630e <_dtoa_r+0x236>
 8006264:	4b61      	ldr	r3, [pc, #388]	; (80063ec <_dtoa_r+0x314>)
 8006266:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006272:	f7fa fc33 	bl	8000adc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	d04b      	beq.n	8006312 <_dtoa_r+0x23a>
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627e:	2300      	movs	r3, #0
 8006280:	930e      	str	r3, [sp, #56]	; 0x38
 8006282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006284:	1b5d      	subs	r5, r3, r5
 8006286:	1e6b      	subs	r3, r5, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	bf43      	ittte	mi
 800628c:	2300      	movmi	r3, #0
 800628e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006292:	9304      	strmi	r3, [sp, #16]
 8006294:	f04f 0800 	movpl.w	r8, #0
 8006298:	f1ba 0f00 	cmp.w	sl, #0
 800629c:	db3b      	blt.n	8006316 <_dtoa_r+0x23e>
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80062a4:	4453      	add	r3, sl
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9306      	str	r3, [sp, #24]
 80062ac:	9b05      	ldr	r3, [sp, #20]
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	d869      	bhi.n	8006386 <_dtoa_r+0x2ae>
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	bfc4      	itt	gt
 80062b6:	3b04      	subgt	r3, #4
 80062b8:	9305      	strgt	r3, [sp, #20]
 80062ba:	9b05      	ldr	r3, [sp, #20]
 80062bc:	f1a3 0302 	sub.w	r3, r3, #2
 80062c0:	bfcc      	ite	gt
 80062c2:	2500      	movgt	r5, #0
 80062c4:	2501      	movle	r5, #1
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d869      	bhi.n	800639e <_dtoa_r+0x2c6>
 80062ca:	e8df f003 	tbb	[pc, r3]
 80062ce:	4e2c      	.short	0x4e2c
 80062d0:	5a4c      	.short	0x5a4c
 80062d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80062d6:	441d      	add	r5, r3
 80062d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062dc:	2b20      	cmp	r3, #32
 80062de:	bfc1      	itttt	gt
 80062e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80062ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062f0:	bfda      	itte	le
 80062f2:	f1c3 0320 	rsble	r3, r3, #32
 80062f6:	fa06 f003 	lslle.w	r0, r6, r3
 80062fa:	4318      	orrgt	r0, r3
 80062fc:	f7fa f902 	bl	8000504 <__aeabi_ui2d>
 8006300:	2301      	movs	r3, #1
 8006302:	4606      	mov	r6, r0
 8006304:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006308:	3d01      	subs	r5, #1
 800630a:	9310      	str	r3, [sp, #64]	; 0x40
 800630c:	e771      	b.n	80061f2 <_dtoa_r+0x11a>
 800630e:	2301      	movs	r3, #1
 8006310:	e7b6      	b.n	8006280 <_dtoa_r+0x1a8>
 8006312:	900e      	str	r0, [sp, #56]	; 0x38
 8006314:	e7b5      	b.n	8006282 <_dtoa_r+0x1aa>
 8006316:	f1ca 0300 	rsb	r3, sl, #0
 800631a:	9306      	str	r3, [sp, #24]
 800631c:	2300      	movs	r3, #0
 800631e:	eba8 080a 	sub.w	r8, r8, sl
 8006322:	930d      	str	r3, [sp, #52]	; 0x34
 8006324:	e7c2      	b.n	80062ac <_dtoa_r+0x1d4>
 8006326:	2300      	movs	r3, #0
 8006328:	9308      	str	r3, [sp, #32]
 800632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	dc39      	bgt.n	80063a4 <_dtoa_r+0x2cc>
 8006330:	f04f 0901 	mov.w	r9, #1
 8006334:	f8cd 9004 	str.w	r9, [sp, #4]
 8006338:	464b      	mov	r3, r9
 800633a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800633e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006340:	2200      	movs	r2, #0
 8006342:	6042      	str	r2, [r0, #4]
 8006344:	2204      	movs	r2, #4
 8006346:	f102 0614 	add.w	r6, r2, #20
 800634a:	429e      	cmp	r6, r3
 800634c:	6841      	ldr	r1, [r0, #4]
 800634e:	d92f      	bls.n	80063b0 <_dtoa_r+0x2d8>
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fee7 	bl	8007124 <_Balloc>
 8006356:	9000      	str	r0, [sp, #0]
 8006358:	2800      	cmp	r0, #0
 800635a:	d14b      	bne.n	80063f4 <_dtoa_r+0x31c>
 800635c:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <_dtoa_r+0x318>)
 800635e:	4602      	mov	r2, r0
 8006360:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006364:	e6d1      	b.n	800610a <_dtoa_r+0x32>
 8006366:	2301      	movs	r3, #1
 8006368:	e7de      	b.n	8006328 <_dtoa_r+0x250>
 800636a:	2300      	movs	r3, #0
 800636c:	9308      	str	r3, [sp, #32]
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	eb0a 0903 	add.w	r9, sl, r3
 8006374:	f109 0301 	add.w	r3, r9, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	bfb8      	it	lt
 800637e:	2301      	movlt	r3, #1
 8006380:	e7dd      	b.n	800633e <_dtoa_r+0x266>
 8006382:	2301      	movs	r3, #1
 8006384:	e7f2      	b.n	800636c <_dtoa_r+0x294>
 8006386:	2501      	movs	r5, #1
 8006388:	2300      	movs	r3, #0
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	9508      	str	r5, [sp, #32]
 800638e:	f04f 39ff 	mov.w	r9, #4294967295
 8006392:	2200      	movs	r2, #0
 8006394:	f8cd 9004 	str.w	r9, [sp, #4]
 8006398:	2312      	movs	r3, #18
 800639a:	9209      	str	r2, [sp, #36]	; 0x24
 800639c:	e7cf      	b.n	800633e <_dtoa_r+0x266>
 800639e:	2301      	movs	r3, #1
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	e7f4      	b.n	800638e <_dtoa_r+0x2b6>
 80063a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80063ac:	464b      	mov	r3, r9
 80063ae:	e7c6      	b.n	800633e <_dtoa_r+0x266>
 80063b0:	3101      	adds	r1, #1
 80063b2:	6041      	str	r1, [r0, #4]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	e7c6      	b.n	8006346 <_dtoa_r+0x26e>
 80063b8:	636f4361 	.word	0x636f4361
 80063bc:	3fd287a7 	.word	0x3fd287a7
 80063c0:	8b60c8b3 	.word	0x8b60c8b3
 80063c4:	3fc68a28 	.word	0x3fc68a28
 80063c8:	509f79fb 	.word	0x509f79fb
 80063cc:	3fd34413 	.word	0x3fd34413
 80063d0:	08008009 	.word	0x08008009
 80063d4:	08008020 	.word	0x08008020
 80063d8:	7ff00000 	.word	0x7ff00000
 80063dc:	08008005 	.word	0x08008005
 80063e0:	08007ffc 	.word	0x08007ffc
 80063e4:	08007fd9 	.word	0x08007fd9
 80063e8:	3ff80000 	.word	0x3ff80000
 80063ec:	08008178 	.word	0x08008178
 80063f0:	0800807f 	.word	0x0800807f
 80063f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f6:	9a00      	ldr	r2, [sp, #0]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	2b0e      	cmp	r3, #14
 80063fe:	f200 80ad 	bhi.w	800655c <_dtoa_r+0x484>
 8006402:	2d00      	cmp	r5, #0
 8006404:	f000 80aa 	beq.w	800655c <_dtoa_r+0x484>
 8006408:	f1ba 0f00 	cmp.w	sl, #0
 800640c:	dd36      	ble.n	800647c <_dtoa_r+0x3a4>
 800640e:	4ac3      	ldr	r2, [pc, #780]	; (800671c <_dtoa_r+0x644>)
 8006410:	f00a 030f 	and.w	r3, sl, #15
 8006414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006418:	ed93 7b00 	vldr	d7, [r3]
 800641c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006420:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006424:	eeb0 8a47 	vmov.f32	s16, s14
 8006428:	eef0 8a67 	vmov.f32	s17, s15
 800642c:	d016      	beq.n	800645c <_dtoa_r+0x384>
 800642e:	4bbc      	ldr	r3, [pc, #752]	; (8006720 <_dtoa_r+0x648>)
 8006430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006438:	f7fa fa08 	bl	800084c <__aeabi_ddiv>
 800643c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006440:	f007 070f 	and.w	r7, r7, #15
 8006444:	2503      	movs	r5, #3
 8006446:	4eb6      	ldr	r6, [pc, #728]	; (8006720 <_dtoa_r+0x648>)
 8006448:	b957      	cbnz	r7, 8006460 <_dtoa_r+0x388>
 800644a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644e:	ec53 2b18 	vmov	r2, r3, d8
 8006452:	f7fa f9fb 	bl	800084c <__aeabi_ddiv>
 8006456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645a:	e029      	b.n	80064b0 <_dtoa_r+0x3d8>
 800645c:	2502      	movs	r5, #2
 800645e:	e7f2      	b.n	8006446 <_dtoa_r+0x36e>
 8006460:	07f9      	lsls	r1, r7, #31
 8006462:	d508      	bpl.n	8006476 <_dtoa_r+0x39e>
 8006464:	ec51 0b18 	vmov	r0, r1, d8
 8006468:	e9d6 2300 	ldrd	r2, r3, [r6]
 800646c:	f7fa f8c4 	bl	80005f8 <__aeabi_dmul>
 8006470:	ec41 0b18 	vmov	d8, r0, r1
 8006474:	3501      	adds	r5, #1
 8006476:	107f      	asrs	r7, r7, #1
 8006478:	3608      	adds	r6, #8
 800647a:	e7e5      	b.n	8006448 <_dtoa_r+0x370>
 800647c:	f000 80a6 	beq.w	80065cc <_dtoa_r+0x4f4>
 8006480:	f1ca 0600 	rsb	r6, sl, #0
 8006484:	4ba5      	ldr	r3, [pc, #660]	; (800671c <_dtoa_r+0x644>)
 8006486:	4fa6      	ldr	r7, [pc, #664]	; (8006720 <_dtoa_r+0x648>)
 8006488:	f006 020f 	and.w	r2, r6, #15
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006498:	f7fa f8ae 	bl	80005f8 <__aeabi_dmul>
 800649c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a0:	1136      	asrs	r6, r6, #4
 80064a2:	2300      	movs	r3, #0
 80064a4:	2502      	movs	r5, #2
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	f040 8085 	bne.w	80065b6 <_dtoa_r+0x4de>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1d2      	bne.n	8006456 <_dtoa_r+0x37e>
 80064b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 808c 	beq.w	80065d0 <_dtoa_r+0x4f8>
 80064b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064bc:	4b99      	ldr	r3, [pc, #612]	; (8006724 <_dtoa_r+0x64c>)
 80064be:	2200      	movs	r2, #0
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7fa fb0a 	bl	8000adc <__aeabi_dcmplt>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f000 8081 	beq.w	80065d0 <_dtoa_r+0x4f8>
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d07d      	beq.n	80065d0 <_dtoa_r+0x4f8>
 80064d4:	f1b9 0f00 	cmp.w	r9, #0
 80064d8:	dd3c      	ble.n	8006554 <_dtoa_r+0x47c>
 80064da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064de:	9307      	str	r3, [sp, #28]
 80064e0:	2200      	movs	r2, #0
 80064e2:	4b91      	ldr	r3, [pc, #580]	; (8006728 <_dtoa_r+0x650>)
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f0:	3501      	adds	r5, #1
 80064f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80064f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064fa:	4628      	mov	r0, r5
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	4632      	mov	r2, r6
 8006502:	463b      	mov	r3, r7
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	4b88      	ldr	r3, [pc, #544]	; (800672c <_dtoa_r+0x654>)
 800650a:	2200      	movs	r2, #0
 800650c:	f7f9 febe 	bl	800028c <__adddf3>
 8006510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	d15c      	bne.n	80065da <_dtoa_r+0x502>
 8006520:	4b83      	ldr	r3, [pc, #524]	; (8006730 <_dtoa_r+0x658>)
 8006522:	2200      	movs	r2, #0
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7f9 feae 	bl	8000288 <__aeabi_dsub>
 800652c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	f7fa faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8006538:	2800      	cmp	r0, #0
 800653a:	f040 8296 	bne.w	8006a6a <_dtoa_r+0x992>
 800653e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006542:	4630      	mov	r0, r6
 8006544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa fac7 	bl	8000adc <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f040 8288 	bne.w	8006a64 <_dtoa_r+0x98c>
 8006554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800655c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800655e:	2b00      	cmp	r3, #0
 8006560:	f2c0 8158 	blt.w	8006814 <_dtoa_r+0x73c>
 8006564:	f1ba 0f0e 	cmp.w	sl, #14
 8006568:	f300 8154 	bgt.w	8006814 <_dtoa_r+0x73c>
 800656c:	4b6b      	ldr	r3, [pc, #428]	; (800671c <_dtoa_r+0x644>)
 800656e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006572:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	f280 80e3 	bge.w	8006744 <_dtoa_r+0x66c>
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f300 80df 	bgt.w	8006744 <_dtoa_r+0x66c>
 8006586:	f040 826d 	bne.w	8006a64 <_dtoa_r+0x98c>
 800658a:	4b69      	ldr	r3, [pc, #420]	; (8006730 <_dtoa_r+0x658>)
 800658c:	2200      	movs	r2, #0
 800658e:	4640      	mov	r0, r8
 8006590:	4649      	mov	r1, r9
 8006592:	f7fa f831 	bl	80005f8 <__aeabi_dmul>
 8006596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659a:	f7fa fab3 	bl	8000b04 <__aeabi_dcmpge>
 800659e:	9e01      	ldr	r6, [sp, #4]
 80065a0:	4637      	mov	r7, r6
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f040 8243 	bne.w	8006a2e <_dtoa_r+0x956>
 80065a8:	9d00      	ldr	r5, [sp, #0]
 80065aa:	2331      	movs	r3, #49	; 0x31
 80065ac:	f805 3b01 	strb.w	r3, [r5], #1
 80065b0:	f10a 0a01 	add.w	sl, sl, #1
 80065b4:	e23f      	b.n	8006a36 <_dtoa_r+0x95e>
 80065b6:	07f2      	lsls	r2, r6, #31
 80065b8:	d505      	bpl.n	80065c6 <_dtoa_r+0x4ee>
 80065ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065be:	f7fa f81b 	bl	80005f8 <__aeabi_dmul>
 80065c2:	3501      	adds	r5, #1
 80065c4:	2301      	movs	r3, #1
 80065c6:	1076      	asrs	r6, r6, #1
 80065c8:	3708      	adds	r7, #8
 80065ca:	e76c      	b.n	80064a6 <_dtoa_r+0x3ce>
 80065cc:	2502      	movs	r5, #2
 80065ce:	e76f      	b.n	80064b0 <_dtoa_r+0x3d8>
 80065d0:	9b01      	ldr	r3, [sp, #4]
 80065d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80065d6:	930c      	str	r3, [sp, #48]	; 0x30
 80065d8:	e78d      	b.n	80064f6 <_dtoa_r+0x41e>
 80065da:	9900      	ldr	r1, [sp, #0]
 80065dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065e0:	4b4e      	ldr	r3, [pc, #312]	; (800671c <_dtoa_r+0x644>)
 80065e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065e6:	4401      	add	r1, r0
 80065e8:	9102      	str	r1, [sp, #8]
 80065ea:	9908      	ldr	r1, [sp, #32]
 80065ec:	eeb0 8a47 	vmov.f32	s16, s14
 80065f0:	eef0 8a67 	vmov.f32	s17, s15
 80065f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d045      	beq.n	800668c <_dtoa_r+0x5b4>
 8006600:	494c      	ldr	r1, [pc, #304]	; (8006734 <_dtoa_r+0x65c>)
 8006602:	2000      	movs	r0, #0
 8006604:	f7fa f922 	bl	800084c <__aeabi_ddiv>
 8006608:	ec53 2b18 	vmov	r2, r3, d8
 800660c:	f7f9 fe3c 	bl	8000288 <__aeabi_dsub>
 8006610:	9d00      	ldr	r5, [sp, #0]
 8006612:	ec41 0b18 	vmov	d8, r0, r1
 8006616:	4639      	mov	r1, r7
 8006618:	4630      	mov	r0, r6
 800661a:	f7fa fa9d 	bl	8000b58 <__aeabi_d2iz>
 800661e:	900c      	str	r0, [sp, #48]	; 0x30
 8006620:	f7f9 ff80 	bl	8000524 <__aeabi_i2d>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7f9 fe2c 	bl	8000288 <__aeabi_dsub>
 8006630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006632:	3330      	adds	r3, #48	; 0x30
 8006634:	f805 3b01 	strb.w	r3, [r5], #1
 8006638:	ec53 2b18 	vmov	r2, r3, d8
 800663c:	4606      	mov	r6, r0
 800663e:	460f      	mov	r7, r1
 8006640:	f7fa fa4c 	bl	8000adc <__aeabi_dcmplt>
 8006644:	2800      	cmp	r0, #0
 8006646:	d165      	bne.n	8006714 <_dtoa_r+0x63c>
 8006648:	4632      	mov	r2, r6
 800664a:	463b      	mov	r3, r7
 800664c:	4935      	ldr	r1, [pc, #212]	; (8006724 <_dtoa_r+0x64c>)
 800664e:	2000      	movs	r0, #0
 8006650:	f7f9 fe1a 	bl	8000288 <__aeabi_dsub>
 8006654:	ec53 2b18 	vmov	r2, r3, d8
 8006658:	f7fa fa40 	bl	8000adc <__aeabi_dcmplt>
 800665c:	2800      	cmp	r0, #0
 800665e:	f040 80b9 	bne.w	80067d4 <_dtoa_r+0x6fc>
 8006662:	9b02      	ldr	r3, [sp, #8]
 8006664:	429d      	cmp	r5, r3
 8006666:	f43f af75 	beq.w	8006554 <_dtoa_r+0x47c>
 800666a:	4b2f      	ldr	r3, [pc, #188]	; (8006728 <_dtoa_r+0x650>)
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	2200      	movs	r2, #0
 8006672:	f7f9 ffc1 	bl	80005f8 <__aeabi_dmul>
 8006676:	4b2c      	ldr	r3, [pc, #176]	; (8006728 <_dtoa_r+0x650>)
 8006678:	ec41 0b18 	vmov	d8, r0, r1
 800667c:	2200      	movs	r2, #0
 800667e:	4630      	mov	r0, r6
 8006680:	4639      	mov	r1, r7
 8006682:	f7f9 ffb9 	bl	80005f8 <__aeabi_dmul>
 8006686:	4606      	mov	r6, r0
 8006688:	460f      	mov	r7, r1
 800668a:	e7c4      	b.n	8006616 <_dtoa_r+0x53e>
 800668c:	ec51 0b17 	vmov	r0, r1, d7
 8006690:	f7f9 ffb2 	bl	80005f8 <__aeabi_dmul>
 8006694:	9b02      	ldr	r3, [sp, #8]
 8006696:	9d00      	ldr	r5, [sp, #0]
 8006698:	930c      	str	r3, [sp, #48]	; 0x30
 800669a:	ec41 0b18 	vmov	d8, r0, r1
 800669e:	4639      	mov	r1, r7
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7fa fa59 	bl	8000b58 <__aeabi_d2iz>
 80066a6:	9011      	str	r0, [sp, #68]	; 0x44
 80066a8:	f7f9 ff3c 	bl	8000524 <__aeabi_i2d>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7f9 fde8 	bl	8000288 <__aeabi_dsub>
 80066b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ba:	3330      	adds	r3, #48	; 0x30
 80066bc:	f805 3b01 	strb.w	r3, [r5], #1
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	429d      	cmp	r5, r3
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	d134      	bne.n	8006738 <_dtoa_r+0x660>
 80066ce:	4b19      	ldr	r3, [pc, #100]	; (8006734 <_dtoa_r+0x65c>)
 80066d0:	ec51 0b18 	vmov	r0, r1, d8
 80066d4:	f7f9 fdda 	bl	800028c <__adddf3>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa fa1a 	bl	8000b18 <__aeabi_dcmpgt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d175      	bne.n	80067d4 <_dtoa_r+0x6fc>
 80066e8:	ec53 2b18 	vmov	r2, r3, d8
 80066ec:	4911      	ldr	r1, [pc, #68]	; (8006734 <_dtoa_r+0x65c>)
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7f9 fdca 	bl	8000288 <__aeabi_dsub>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa f9ee 	bl	8000adc <__aeabi_dcmplt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f43f af27 	beq.w	8006554 <_dtoa_r+0x47c>
 8006706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006708:	1e6b      	subs	r3, r5, #1
 800670a:	930c      	str	r3, [sp, #48]	; 0x30
 800670c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d0f8      	beq.n	8006706 <_dtoa_r+0x62e>
 8006714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006718:	e04a      	b.n	80067b0 <_dtoa_r+0x6d8>
 800671a:	bf00      	nop
 800671c:	08008178 	.word	0x08008178
 8006720:	08008150 	.word	0x08008150
 8006724:	3ff00000 	.word	0x3ff00000
 8006728:	40240000 	.word	0x40240000
 800672c:	401c0000 	.word	0x401c0000
 8006730:	40140000 	.word	0x40140000
 8006734:	3fe00000 	.word	0x3fe00000
 8006738:	4baf      	ldr	r3, [pc, #700]	; (80069f8 <_dtoa_r+0x920>)
 800673a:	f7f9 ff5d 	bl	80005f8 <__aeabi_dmul>
 800673e:	4606      	mov	r6, r0
 8006740:	460f      	mov	r7, r1
 8006742:	e7ac      	b.n	800669e <_dtoa_r+0x5c6>
 8006744:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006748:	9d00      	ldr	r5, [sp, #0]
 800674a:	4642      	mov	r2, r8
 800674c:	464b      	mov	r3, r9
 800674e:	4630      	mov	r0, r6
 8006750:	4639      	mov	r1, r7
 8006752:	f7fa f87b 	bl	800084c <__aeabi_ddiv>
 8006756:	f7fa f9ff 	bl	8000b58 <__aeabi_d2iz>
 800675a:	9002      	str	r0, [sp, #8]
 800675c:	f7f9 fee2 	bl	8000524 <__aeabi_i2d>
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f7f9 fd8a 	bl	8000288 <__aeabi_dsub>
 8006774:	9e02      	ldr	r6, [sp, #8]
 8006776:	9f01      	ldr	r7, [sp, #4]
 8006778:	3630      	adds	r6, #48	; 0x30
 800677a:	f805 6b01 	strb.w	r6, [r5], #1
 800677e:	9e00      	ldr	r6, [sp, #0]
 8006780:	1bae      	subs	r6, r5, r6
 8006782:	42b7      	cmp	r7, r6
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	d137      	bne.n	80067fa <_dtoa_r+0x722>
 800678a:	f7f9 fd7f 	bl	800028c <__adddf3>
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	4606      	mov	r6, r0
 8006794:	460f      	mov	r7, r1
 8006796:	f7fa f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800679a:	b9c8      	cbnz	r0, 80067d0 <_dtoa_r+0x6f8>
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a8:	b110      	cbz	r0, 80067b0 <_dtoa_r+0x6d8>
 80067aa:	9b02      	ldr	r3, [sp, #8]
 80067ac:	07d9      	lsls	r1, r3, #31
 80067ae:	d40f      	bmi.n	80067d0 <_dtoa_r+0x6f8>
 80067b0:	4620      	mov	r0, r4
 80067b2:	4659      	mov	r1, fp
 80067b4:	f000 fcf6 	bl	80071a4 <_Bfree>
 80067b8:	2300      	movs	r3, #0
 80067ba:	702b      	strb	r3, [r5, #0]
 80067bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067be:	f10a 0001 	add.w	r0, sl, #1
 80067c2:	6018      	str	r0, [r3, #0]
 80067c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f43f acd8 	beq.w	800617c <_dtoa_r+0xa4>
 80067cc:	601d      	str	r5, [r3, #0]
 80067ce:	e4d5      	b.n	800617c <_dtoa_r+0xa4>
 80067d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80067d4:	462b      	mov	r3, r5
 80067d6:	461d      	mov	r5, r3
 80067d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067dc:	2a39      	cmp	r2, #57	; 0x39
 80067de:	d108      	bne.n	80067f2 <_dtoa_r+0x71a>
 80067e0:	9a00      	ldr	r2, [sp, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d1f7      	bne.n	80067d6 <_dtoa_r+0x6fe>
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	9900      	ldr	r1, [sp, #0]
 80067ea:	3201      	adds	r2, #1
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	2230      	movs	r2, #48	; 0x30
 80067f0:	700a      	strb	r2, [r1, #0]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	3201      	adds	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e78c      	b.n	8006714 <_dtoa_r+0x63c>
 80067fa:	4b7f      	ldr	r3, [pc, #508]	; (80069f8 <_dtoa_r+0x920>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	f7fa f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800680e:	2800      	cmp	r0, #0
 8006810:	d09b      	beq.n	800674a <_dtoa_r+0x672>
 8006812:	e7cd      	b.n	80067b0 <_dtoa_r+0x6d8>
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	2a00      	cmp	r2, #0
 8006818:	f000 80c4 	beq.w	80069a4 <_dtoa_r+0x8cc>
 800681c:	9a05      	ldr	r2, [sp, #20]
 800681e:	2a01      	cmp	r2, #1
 8006820:	f300 80a8 	bgt.w	8006974 <_dtoa_r+0x89c>
 8006824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006826:	2a00      	cmp	r2, #0
 8006828:	f000 80a0 	beq.w	800696c <_dtoa_r+0x894>
 800682c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006830:	9e06      	ldr	r6, [sp, #24]
 8006832:	4645      	mov	r5, r8
 8006834:	9a04      	ldr	r2, [sp, #16]
 8006836:	2101      	movs	r1, #1
 8006838:	441a      	add	r2, r3
 800683a:	4620      	mov	r0, r4
 800683c:	4498      	add	r8, r3
 800683e:	9204      	str	r2, [sp, #16]
 8006840:	f000 fd6c 	bl	800731c <__i2b>
 8006844:	4607      	mov	r7, r0
 8006846:	2d00      	cmp	r5, #0
 8006848:	dd0b      	ble.n	8006862 <_dtoa_r+0x78a>
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd08      	ble.n	8006862 <_dtoa_r+0x78a>
 8006850:	42ab      	cmp	r3, r5
 8006852:	9a04      	ldr	r2, [sp, #16]
 8006854:	bfa8      	it	ge
 8006856:	462b      	movge	r3, r5
 8006858:	eba8 0803 	sub.w	r8, r8, r3
 800685c:	1aed      	subs	r5, r5, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	b1fb      	cbz	r3, 80068a6 <_dtoa_r+0x7ce>
 8006866:	9b08      	ldr	r3, [sp, #32]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 809f 	beq.w	80069ac <_dtoa_r+0x8d4>
 800686e:	2e00      	cmp	r6, #0
 8006870:	dd11      	ble.n	8006896 <_dtoa_r+0x7be>
 8006872:	4639      	mov	r1, r7
 8006874:	4632      	mov	r2, r6
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fe0c 	bl	8007494 <__pow5mult>
 800687c:	465a      	mov	r2, fp
 800687e:	4601      	mov	r1, r0
 8006880:	4607      	mov	r7, r0
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fd60 	bl	8007348 <__multiply>
 8006888:	4659      	mov	r1, fp
 800688a:	9007      	str	r0, [sp, #28]
 800688c:	4620      	mov	r0, r4
 800688e:	f000 fc89 	bl	80071a4 <_Bfree>
 8006892:	9b07      	ldr	r3, [sp, #28]
 8006894:	469b      	mov	fp, r3
 8006896:	9b06      	ldr	r3, [sp, #24]
 8006898:	1b9a      	subs	r2, r3, r6
 800689a:	d004      	beq.n	80068a6 <_dtoa_r+0x7ce>
 800689c:	4659      	mov	r1, fp
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fdf8 	bl	8007494 <__pow5mult>
 80068a4:	4683      	mov	fp, r0
 80068a6:	2101      	movs	r1, #1
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fd37 	bl	800731c <__i2b>
 80068ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	4606      	mov	r6, r0
 80068b4:	dd7c      	ble.n	80069b0 <_dtoa_r+0x8d8>
 80068b6:	461a      	mov	r2, r3
 80068b8:	4601      	mov	r1, r0
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 fdea 	bl	8007494 <__pow5mult>
 80068c0:	9b05      	ldr	r3, [sp, #20]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	4606      	mov	r6, r0
 80068c6:	dd76      	ble.n	80069b6 <_dtoa_r+0x8de>
 80068c8:	2300      	movs	r3, #0
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	6933      	ldr	r3, [r6, #16]
 80068ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068d2:	6918      	ldr	r0, [r3, #16]
 80068d4:	f000 fcd2 	bl	800727c <__hi0bits>
 80068d8:	f1c0 0020 	rsb	r0, r0, #32
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	4418      	add	r0, r3
 80068e0:	f010 001f 	ands.w	r0, r0, #31
 80068e4:	f000 8086 	beq.w	80069f4 <_dtoa_r+0x91c>
 80068e8:	f1c0 0320 	rsb	r3, r0, #32
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	dd7f      	ble.n	80069f0 <_dtoa_r+0x918>
 80068f0:	f1c0 001c 	rsb	r0, r0, #28
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	4403      	add	r3, r0
 80068f8:	4480      	add	r8, r0
 80068fa:	4405      	add	r5, r0
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	f1b8 0f00 	cmp.w	r8, #0
 8006902:	dd05      	ble.n	8006910 <_dtoa_r+0x838>
 8006904:	4659      	mov	r1, fp
 8006906:	4642      	mov	r2, r8
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fe1d 	bl	8007548 <__lshift>
 800690e:	4683      	mov	fp, r0
 8006910:	9b04      	ldr	r3, [sp, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd05      	ble.n	8006922 <_dtoa_r+0x84a>
 8006916:	4631      	mov	r1, r6
 8006918:	461a      	mov	r2, r3
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fe14 	bl	8007548 <__lshift>
 8006920:	4606      	mov	r6, r0
 8006922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d069      	beq.n	80069fc <_dtoa_r+0x924>
 8006928:	4631      	mov	r1, r6
 800692a:	4658      	mov	r0, fp
 800692c:	f000 fe78 	bl	8007620 <__mcmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	da63      	bge.n	80069fc <_dtoa_r+0x924>
 8006934:	2300      	movs	r3, #0
 8006936:	4659      	mov	r1, fp
 8006938:	220a      	movs	r2, #10
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fc54 	bl	80071e8 <__multadd>
 8006940:	9b08      	ldr	r3, [sp, #32]
 8006942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006946:	4683      	mov	fp, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 818f 	beq.w	8006c6c <_dtoa_r+0xb94>
 800694e:	4639      	mov	r1, r7
 8006950:	2300      	movs	r3, #0
 8006952:	220a      	movs	r2, #10
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fc47 	bl	80071e8 <__multadd>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	4607      	mov	r7, r0
 8006960:	f300 808e 	bgt.w	8006a80 <_dtoa_r+0x9a8>
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	2b02      	cmp	r3, #2
 8006968:	dc50      	bgt.n	8006a0c <_dtoa_r+0x934>
 800696a:	e089      	b.n	8006a80 <_dtoa_r+0x9a8>
 800696c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800696e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006972:	e75d      	b.n	8006830 <_dtoa_r+0x758>
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	1e5e      	subs	r6, r3, #1
 8006978:	9b06      	ldr	r3, [sp, #24]
 800697a:	42b3      	cmp	r3, r6
 800697c:	bfbf      	itttt	lt
 800697e:	9b06      	ldrlt	r3, [sp, #24]
 8006980:	9606      	strlt	r6, [sp, #24]
 8006982:	1af2      	sublt	r2, r6, r3
 8006984:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006986:	bfb6      	itet	lt
 8006988:	189b      	addlt	r3, r3, r2
 800698a:	1b9e      	subge	r6, r3, r6
 800698c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	bfb8      	it	lt
 8006992:	2600      	movlt	r6, #0
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfb5      	itete	lt
 8006998:	eba8 0503 	sublt.w	r5, r8, r3
 800699c:	9b01      	ldrge	r3, [sp, #4]
 800699e:	2300      	movlt	r3, #0
 80069a0:	4645      	movge	r5, r8
 80069a2:	e747      	b.n	8006834 <_dtoa_r+0x75c>
 80069a4:	9e06      	ldr	r6, [sp, #24]
 80069a6:	9f08      	ldr	r7, [sp, #32]
 80069a8:	4645      	mov	r5, r8
 80069aa:	e74c      	b.n	8006846 <_dtoa_r+0x76e>
 80069ac:	9a06      	ldr	r2, [sp, #24]
 80069ae:	e775      	b.n	800689c <_dtoa_r+0x7c4>
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	dc18      	bgt.n	80069e8 <_dtoa_r+0x910>
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	b9b3      	cbnz	r3, 80069e8 <_dtoa_r+0x910>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c0:	b9a3      	cbnz	r3, 80069ec <_dtoa_r+0x914>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	051b      	lsls	r3, r3, #20
 80069cc:	b12b      	cbz	r3, 80069da <_dtoa_r+0x902>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	f108 0801 	add.w	r8, r8, #1
 80069d8:	2301      	movs	r3, #1
 80069da:	9306      	str	r3, [sp, #24]
 80069dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f47f af74 	bne.w	80068cc <_dtoa_r+0x7f4>
 80069e4:	2001      	movs	r0, #1
 80069e6:	e779      	b.n	80068dc <_dtoa_r+0x804>
 80069e8:	2300      	movs	r3, #0
 80069ea:	e7f6      	b.n	80069da <_dtoa_r+0x902>
 80069ec:	9b02      	ldr	r3, [sp, #8]
 80069ee:	e7f4      	b.n	80069da <_dtoa_r+0x902>
 80069f0:	d085      	beq.n	80068fe <_dtoa_r+0x826>
 80069f2:	4618      	mov	r0, r3
 80069f4:	301c      	adds	r0, #28
 80069f6:	e77d      	b.n	80068f4 <_dtoa_r+0x81c>
 80069f8:	40240000 	.word	0x40240000
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dc38      	bgt.n	8006a74 <_dtoa_r+0x99c>
 8006a02:	9b05      	ldr	r3, [sp, #20]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	dd35      	ble.n	8006a74 <_dtoa_r+0x99c>
 8006a08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	d10d      	bne.n	8006a2e <_dtoa_r+0x956>
 8006a12:	4631      	mov	r1, r6
 8006a14:	464b      	mov	r3, r9
 8006a16:	2205      	movs	r2, #5
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fbe5 	bl	80071e8 <__multadd>
 8006a1e:	4601      	mov	r1, r0
 8006a20:	4606      	mov	r6, r0
 8006a22:	4658      	mov	r0, fp
 8006a24:	f000 fdfc 	bl	8007620 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f73f adbd 	bgt.w	80065a8 <_dtoa_r+0x4d0>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	9d00      	ldr	r5, [sp, #0]
 8006a32:	ea6f 0a03 	mvn.w	sl, r3
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fbb1 	bl	80071a4 <_Bfree>
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	f43f aeb4 	beq.w	80067b0 <_dtoa_r+0x6d8>
 8006a48:	f1b8 0f00 	cmp.w	r8, #0
 8006a4c:	d005      	beq.n	8006a5a <_dtoa_r+0x982>
 8006a4e:	45b8      	cmp	r8, r7
 8006a50:	d003      	beq.n	8006a5a <_dtoa_r+0x982>
 8006a52:	4641      	mov	r1, r8
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fba5 	bl	80071a4 <_Bfree>
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fba1 	bl	80071a4 <_Bfree>
 8006a62:	e6a5      	b.n	80067b0 <_dtoa_r+0x6d8>
 8006a64:	2600      	movs	r6, #0
 8006a66:	4637      	mov	r7, r6
 8006a68:	e7e1      	b.n	8006a2e <_dtoa_r+0x956>
 8006a6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a70:	4637      	mov	r7, r6
 8006a72:	e599      	b.n	80065a8 <_dtoa_r+0x4d0>
 8006a74:	9b08      	ldr	r3, [sp, #32]
 8006a76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80fd 	beq.w	8006c7a <_dtoa_r+0xba2>
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	dd05      	ble.n	8006a90 <_dtoa_r+0x9b8>
 8006a84:	4639      	mov	r1, r7
 8006a86:	462a      	mov	r2, r5
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fd5d 	bl	8007548 <__lshift>
 8006a8e:	4607      	mov	r7, r0
 8006a90:	9b06      	ldr	r3, [sp, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d05c      	beq.n	8006b50 <_dtoa_r+0xa78>
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fb43 	bl	8007124 <_Balloc>
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <_dtoa_r+0x9d6>
 8006aa2:	4b80      	ldr	r3, [pc, #512]	; (8006ca4 <_dtoa_r+0xbcc>)
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aaa:	f7ff bb2e 	b.w	800610a <_dtoa_r+0x32>
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	3202      	adds	r2, #2
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	f107 010c 	add.w	r1, r7, #12
 8006ab8:	300c      	adds	r0, #12
 8006aba:	f000 fb25 	bl	8007108 <memcpy>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fd40 	bl	8007548 <__lshift>
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	444b      	add	r3, r9
 8006ad2:	9307      	str	r3, [sp, #28]
 8006ad4:	9b02      	ldr	r3, [sp, #8]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	46b8      	mov	r8, r7
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	4607      	mov	r7, r0
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	f7ff fa69 	bl	8005fc0 <quorem>
 8006aee:	4603      	mov	r3, r0
 8006af0:	3330      	adds	r3, #48	; 0x30
 8006af2:	9004      	str	r0, [sp, #16]
 8006af4:	4641      	mov	r1, r8
 8006af6:	4658      	mov	r0, fp
 8006af8:	9308      	str	r3, [sp, #32]
 8006afa:	f000 fd91 	bl	8007620 <__mcmp>
 8006afe:	463a      	mov	r2, r7
 8006b00:	4681      	mov	r9, r0
 8006b02:	4631      	mov	r1, r6
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fda7 	bl	8007658 <__mdiff>
 8006b0a:	68c2      	ldr	r2, [r0, #12]
 8006b0c:	9b08      	ldr	r3, [sp, #32]
 8006b0e:	4605      	mov	r5, r0
 8006b10:	bb02      	cbnz	r2, 8006b54 <_dtoa_r+0xa7c>
 8006b12:	4601      	mov	r1, r0
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fd83 	bl	8007620 <__mcmp>
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b26:	f000 fb3d 	bl	80071a4 <_Bfree>
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2e:	9d01      	ldr	r5, [sp, #4]
 8006b30:	ea43 0102 	orr.w	r1, r3, r2
 8006b34:	9b06      	ldr	r3, [sp, #24]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	d10d      	bne.n	8006b58 <_dtoa_r+0xa80>
 8006b3c:	2b39      	cmp	r3, #57	; 0x39
 8006b3e:	d029      	beq.n	8006b94 <_dtoa_r+0xabc>
 8006b40:	f1b9 0f00 	cmp.w	r9, #0
 8006b44:	dd01      	ble.n	8006b4a <_dtoa_r+0xa72>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	3331      	adds	r3, #49	; 0x31
 8006b4a:	9a02      	ldr	r2, [sp, #8]
 8006b4c:	7013      	strb	r3, [r2, #0]
 8006b4e:	e774      	b.n	8006a3a <_dtoa_r+0x962>
 8006b50:	4638      	mov	r0, r7
 8006b52:	e7b9      	b.n	8006ac8 <_dtoa_r+0x9f0>
 8006b54:	2201      	movs	r2, #1
 8006b56:	e7e2      	b.n	8006b1e <_dtoa_r+0xa46>
 8006b58:	f1b9 0f00 	cmp.w	r9, #0
 8006b5c:	db06      	blt.n	8006b6c <_dtoa_r+0xa94>
 8006b5e:	9905      	ldr	r1, [sp, #20]
 8006b60:	ea41 0909 	orr.w	r9, r1, r9
 8006b64:	9906      	ldr	r1, [sp, #24]
 8006b66:	ea59 0101 	orrs.w	r1, r9, r1
 8006b6a:	d120      	bne.n	8006bae <_dtoa_r+0xad6>
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	ddec      	ble.n	8006b4a <_dtoa_r+0xa72>
 8006b70:	4659      	mov	r1, fp
 8006b72:	2201      	movs	r2, #1
 8006b74:	4620      	mov	r0, r4
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	f000 fce6 	bl	8007548 <__lshift>
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4683      	mov	fp, r0
 8006b80:	f000 fd4e 	bl	8007620 <__mcmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	dc02      	bgt.n	8006b90 <_dtoa_r+0xab8>
 8006b8a:	d1de      	bne.n	8006b4a <_dtoa_r+0xa72>
 8006b8c:	07da      	lsls	r2, r3, #31
 8006b8e:	d5dc      	bpl.n	8006b4a <_dtoa_r+0xa72>
 8006b90:	2b39      	cmp	r3, #57	; 0x39
 8006b92:	d1d8      	bne.n	8006b46 <_dtoa_r+0xa6e>
 8006b94:	9a02      	ldr	r2, [sp, #8]
 8006b96:	2339      	movs	r3, #57	; 0x39
 8006b98:	7013      	strb	r3, [r2, #0]
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	461d      	mov	r5, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ba4:	2a39      	cmp	r2, #57	; 0x39
 8006ba6:	d050      	beq.n	8006c4a <_dtoa_r+0xb72>
 8006ba8:	3201      	adds	r2, #1
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e745      	b.n	8006a3a <_dtoa_r+0x962>
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	dd03      	ble.n	8006bba <_dtoa_r+0xae2>
 8006bb2:	2b39      	cmp	r3, #57	; 0x39
 8006bb4:	d0ee      	beq.n	8006b94 <_dtoa_r+0xabc>
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	e7c7      	b.n	8006b4a <_dtoa_r+0xa72>
 8006bba:	9a01      	ldr	r2, [sp, #4]
 8006bbc:	9907      	ldr	r1, [sp, #28]
 8006bbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bc2:	428a      	cmp	r2, r1
 8006bc4:	d02a      	beq.n	8006c1c <_dtoa_r+0xb44>
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	2300      	movs	r3, #0
 8006bca:	220a      	movs	r2, #10
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fb0b 	bl	80071e8 <__multadd>
 8006bd2:	45b8      	cmp	r8, r7
 8006bd4:	4683      	mov	fp, r0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	f04f 020a 	mov.w	r2, #10
 8006bde:	4641      	mov	r1, r8
 8006be0:	4620      	mov	r0, r4
 8006be2:	d107      	bne.n	8006bf4 <_dtoa_r+0xb1c>
 8006be4:	f000 fb00 	bl	80071e8 <__multadd>
 8006be8:	4680      	mov	r8, r0
 8006bea:	4607      	mov	r7, r0
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	e775      	b.n	8006ae0 <_dtoa_r+0xa08>
 8006bf4:	f000 faf8 	bl	80071e8 <__multadd>
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	220a      	movs	r2, #10
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 faf1 	bl	80071e8 <__multadd>
 8006c06:	4607      	mov	r7, r0
 8006c08:	e7f0      	b.n	8006bec <_dtoa_r+0xb14>
 8006c0a:	f1b9 0f00 	cmp.w	r9, #0
 8006c0e:	9a00      	ldr	r2, [sp, #0]
 8006c10:	bfcc      	ite	gt
 8006c12:	464d      	movgt	r5, r9
 8006c14:	2501      	movle	r5, #1
 8006c16:	4415      	add	r5, r2
 8006c18:	f04f 0800 	mov.w	r8, #0
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4620      	mov	r0, r4
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	f000 fc90 	bl	8007548 <__lshift>
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4683      	mov	fp, r0
 8006c2c:	f000 fcf8 	bl	8007620 <__mcmp>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	dcb2      	bgt.n	8006b9a <_dtoa_r+0xac2>
 8006c34:	d102      	bne.n	8006c3c <_dtoa_r+0xb64>
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	07db      	lsls	r3, r3, #31
 8006c3a:	d4ae      	bmi.n	8006b9a <_dtoa_r+0xac2>
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	461d      	mov	r5, r3
 8006c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c44:	2a30      	cmp	r2, #48	; 0x30
 8006c46:	d0fa      	beq.n	8006c3e <_dtoa_r+0xb66>
 8006c48:	e6f7      	b.n	8006a3a <_dtoa_r+0x962>
 8006c4a:	9a00      	ldr	r2, [sp, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1a5      	bne.n	8006b9c <_dtoa_r+0xac4>
 8006c50:	f10a 0a01 	add.w	sl, sl, #1
 8006c54:	2331      	movs	r3, #49	; 0x31
 8006c56:	e779      	b.n	8006b4c <_dtoa_r+0xa74>
 8006c58:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <_dtoa_r+0xbd0>)
 8006c5a:	f7ff baaf 	b.w	80061bc <_dtoa_r+0xe4>
 8006c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f aa86 	bne.w	8006172 <_dtoa_r+0x9a>
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <_dtoa_r+0xbd4>)
 8006c68:	f7ff baa8 	b.w	80061bc <_dtoa_r+0xe4>
 8006c6c:	f1b9 0f00 	cmp.w	r9, #0
 8006c70:	dc03      	bgt.n	8006c7a <_dtoa_r+0xba2>
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	f73f aec9 	bgt.w	8006a0c <_dtoa_r+0x934>
 8006c7a:	9d00      	ldr	r5, [sp, #0]
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f7ff f99e 	bl	8005fc0 <quorem>
 8006c84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006c88:	f805 3b01 	strb.w	r3, [r5], #1
 8006c8c:	9a00      	ldr	r2, [sp, #0]
 8006c8e:	1aaa      	subs	r2, r5, r2
 8006c90:	4591      	cmp	r9, r2
 8006c92:	ddba      	ble.n	8006c0a <_dtoa_r+0xb32>
 8006c94:	4659      	mov	r1, fp
 8006c96:	2300      	movs	r3, #0
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 faa4 	bl	80071e8 <__multadd>
 8006ca0:	4683      	mov	fp, r0
 8006ca2:	e7eb      	b.n	8006c7c <_dtoa_r+0xba4>
 8006ca4:	0800807f 	.word	0x0800807f
 8006ca8:	08007fd8 	.word	0x08007fd8
 8006cac:	08007ffc 	.word	0x08007ffc

08006cb0 <__sflush_r>:
 8006cb0:	898a      	ldrh	r2, [r1, #12]
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	0710      	lsls	r0, r2, #28
 8006cba:	460c      	mov	r4, r1
 8006cbc:	d458      	bmi.n	8006d70 <__sflush_r+0xc0>
 8006cbe:	684b      	ldr	r3, [r1, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc05      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc02      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d0f9      	beq.n	8006cca <__sflush_r+0x1a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cdc:	682f      	ldr	r7, [r5, #0]
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	d032      	beq.n	8006d48 <__sflush_r+0x98>
 8006ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	075a      	lsls	r2, r3, #29
 8006ce8:	d505      	bpl.n	8006cf6 <__sflush_r+0x46>
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	1ac0      	subs	r0, r0, r3
 8006cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf0:	b10b      	cbz	r3, 8006cf6 <__sflush_r+0x46>
 8006cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfc:	6a21      	ldr	r1, [r4, #32]
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b0      	blx	r6
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	d106      	bne.n	8006d16 <__sflush_r+0x66>
 8006d08:	6829      	ldr	r1, [r5, #0]
 8006d0a:	291d      	cmp	r1, #29
 8006d0c:	d82c      	bhi.n	8006d68 <__sflush_r+0xb8>
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <__sflush_r+0x108>)
 8006d10:	40ca      	lsrs	r2, r1
 8006d12:	07d6      	lsls	r6, r2, #31
 8006d14:	d528      	bpl.n	8006d68 <__sflush_r+0xb8>
 8006d16:	2200      	movs	r2, #0
 8006d18:	6062      	str	r2, [r4, #4]
 8006d1a:	04d9      	lsls	r1, r3, #19
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	6022      	str	r2, [r4, #0]
 8006d20:	d504      	bpl.n	8006d2c <__sflush_r+0x7c>
 8006d22:	1c42      	adds	r2, r0, #1
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0x7a>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b903      	cbnz	r3, 8006d2c <__sflush_r+0x7c>
 8006d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d2e:	602f      	str	r7, [r5, #0]
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d0ca      	beq.n	8006cca <__sflush_r+0x1a>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__sflush_r+0x92>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 fd7f 	bl	8007840 <_free_r>
 8006d42:	2000      	movs	r0, #0
 8006d44:	6360      	str	r0, [r4, #52]	; 0x34
 8006d46:	e7c1      	b.n	8006ccc <__sflush_r+0x1c>
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b0      	blx	r6
 8006d50:	1c41      	adds	r1, r0, #1
 8006d52:	d1c7      	bne.n	8006ce4 <__sflush_r+0x34>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c4      	beq.n	8006ce4 <__sflush_r+0x34>
 8006d5a:	2b1d      	cmp	r3, #29
 8006d5c:	d001      	beq.n	8006d62 <__sflush_r+0xb2>
 8006d5e:	2b16      	cmp	r3, #22
 8006d60:	d101      	bne.n	8006d66 <__sflush_r+0xb6>
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	e7b1      	b.n	8006cca <__sflush_r+0x1a>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7ad      	b.n	8006ccc <__sflush_r+0x1c>
 8006d70:	690f      	ldr	r7, [r1, #16]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d0a9      	beq.n	8006cca <__sflush_r+0x1a>
 8006d76:	0793      	lsls	r3, r2, #30
 8006d78:	680e      	ldr	r6, [r1, #0]
 8006d7a:	bf08      	it	eq
 8006d7c:	694b      	ldreq	r3, [r1, #20]
 8006d7e:	600f      	str	r7, [r1, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2300      	movne	r3, #0
 8006d84:	eba6 0807 	sub.w	r8, r6, r7
 8006d88:	608b      	str	r3, [r1, #8]
 8006d8a:	f1b8 0f00 	cmp.w	r8, #0
 8006d8e:	dd9c      	ble.n	8006cca <__sflush_r+0x1a>
 8006d90:	6a21      	ldr	r1, [r4, #32]
 8006d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d94:	4643      	mov	r3, r8
 8006d96:	463a      	mov	r2, r7
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b0      	blx	r6
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	dc06      	bgt.n	8006dae <__sflush_r+0xfe>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e78e      	b.n	8006ccc <__sflush_r+0x1c>
 8006dae:	4407      	add	r7, r0
 8006db0:	eba8 0800 	sub.w	r8, r8, r0
 8006db4:	e7e9      	b.n	8006d8a <__sflush_r+0xda>
 8006db6:	bf00      	nop
 8006db8:	20400001 	.word	0x20400001

08006dbc <_fflush_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	690b      	ldr	r3, [r1, #16]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b913      	cbnz	r3, 8006dcc <_fflush_r+0x10>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	b118      	cbz	r0, 8006dd6 <_fflush_r+0x1a>
 8006dce:	6983      	ldr	r3, [r0, #24]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <_fflush_r+0x1a>
 8006dd2:	f000 f887 	bl	8006ee4 <__sinit>
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <_fflush_r+0x6c>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d11b      	bne.n	8006e14 <_fflush_r+0x58>
 8006ddc:	686c      	ldr	r4, [r5, #4]
 8006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0ef      	beq.n	8006dc6 <_fflush_r+0xa>
 8006de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006de8:	07d0      	lsls	r0, r2, #31
 8006dea:	d404      	bmi.n	8006df6 <_fflush_r+0x3a>
 8006dec:	0599      	lsls	r1, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_fflush_r+0x3a>
 8006df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df2:	f000 f91a 	bl	800702a <__retarget_lock_acquire_recursive>
 8006df6:	4628      	mov	r0, r5
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f7ff ff59 	bl	8006cb0 <__sflush_r>
 8006dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	4605      	mov	r5, r0
 8006e04:	d4e0      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	059b      	lsls	r3, r3, #22
 8006e0a:	d4dd      	bmi.n	8006dc8 <_fflush_r+0xc>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f000 f90d 	bl	800702c <__retarget_lock_release_recursive>
 8006e12:	e7d9      	b.n	8006dc8 <_fflush_r+0xc>
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <_fflush_r+0x70>)
 8006e16:	429c      	cmp	r4, r3
 8006e18:	d101      	bne.n	8006e1e <_fflush_r+0x62>
 8006e1a:	68ac      	ldr	r4, [r5, #8]
 8006e1c:	e7df      	b.n	8006dde <_fflush_r+0x22>
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <_fflush_r+0x74>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	bf08      	it	eq
 8006e24:	68ec      	ldreq	r4, [r5, #12]
 8006e26:	e7da      	b.n	8006dde <_fflush_r+0x22>
 8006e28:	080080b0 	.word	0x080080b0
 8006e2c:	080080d0 	.word	0x080080d0
 8006e30:	08008090 	.word	0x08008090

08006e34 <std>:
 8006e34:	2300      	movs	r3, #0
 8006e36:	b510      	push	{r4, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e42:	6083      	str	r3, [r0, #8]
 8006e44:	8181      	strh	r1, [r0, #12]
 8006e46:	6643      	str	r3, [r0, #100]	; 0x64
 8006e48:	81c2      	strh	r2, [r0, #14]
 8006e4a:	6183      	str	r3, [r0, #24]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	2208      	movs	r2, #8
 8006e50:	305c      	adds	r0, #92	; 0x5c
 8006e52:	f7fe fa27 	bl	80052a4 <memset>
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <std+0x38>)
 8006e58:	6263      	str	r3, [r4, #36]	; 0x24
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x3c>)
 8006e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x40>)
 8006e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x44>)
 8006e64:	6224      	str	r4, [r4, #32]
 8006e66:	6323      	str	r3, [r4, #48]	; 0x30
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	bf00      	nop
 8006e6c:	08007c69 	.word	0x08007c69
 8006e70:	08007c8b 	.word	0x08007c8b
 8006e74:	08007cc3 	.word	0x08007cc3
 8006e78:	08007ce7 	.word	0x08007ce7

08006e7c <_cleanup_r>:
 8006e7c:	4901      	ldr	r1, [pc, #4]	; (8006e84 <_cleanup_r+0x8>)
 8006e7e:	f000 b8af 	b.w	8006fe0 <_fwalk_reent>
 8006e82:	bf00      	nop
 8006e84:	08006dbd 	.word	0x08006dbd

08006e88 <__sfmoreglue>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	1e4a      	subs	r2, r1, #1
 8006e8c:	2568      	movs	r5, #104	; 0x68
 8006e8e:	4355      	muls	r5, r2
 8006e90:	460e      	mov	r6, r1
 8006e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e96:	f000 fd23 	bl	80078e0 <_malloc_r>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b140      	cbz	r0, 8006eb0 <__sfmoreglue+0x28>
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea4:	300c      	adds	r0, #12
 8006ea6:	60a0      	str	r0, [r4, #8]
 8006ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eac:	f7fe f9fa 	bl	80052a4 <memset>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}

08006eb4 <__sfp_lock_acquire>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__sfp_lock_acquire+0x8>)
 8006eb6:	f000 b8b8 	b.w	800702a <__retarget_lock_acquire_recursive>
 8006eba:	bf00      	nop
 8006ebc:	20000408 	.word	0x20000408

08006ec0 <__sfp_lock_release>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__sfp_lock_release+0x8>)
 8006ec2:	f000 b8b3 	b.w	800702c <__retarget_lock_release_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20000408 	.word	0x20000408

08006ecc <__sinit_lock_acquire>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__sinit_lock_acquire+0x8>)
 8006ece:	f000 b8ac 	b.w	800702a <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20000403 	.word	0x20000403

08006ed8 <__sinit_lock_release>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__sinit_lock_release+0x8>)
 8006eda:	f000 b8a7 	b.w	800702c <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	20000403 	.word	0x20000403

08006ee4 <__sinit>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	f7ff fff0 	bl	8006ecc <__sinit_lock_acquire>
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	b11b      	cbz	r3, 8006ef8 <__sinit+0x14>
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef4:	f7ff bff0 	b.w	8006ed8 <__sinit_lock_release>
 8006ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006efc:	6523      	str	r3, [r4, #80]	; 0x50
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <__sinit+0x68>)
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <__sinit+0x6c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	bf04      	itt	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	61a3      	streq	r3, [r4, #24]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f820 	bl	8006f54 <__sfp>
 8006f14:	6060      	str	r0, [r4, #4]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 f81c 	bl	8006f54 <__sfp>
 8006f1c:	60a0      	str	r0, [r4, #8]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f818 	bl	8006f54 <__sfp>
 8006f24:	2200      	movs	r2, #0
 8006f26:	60e0      	str	r0, [r4, #12]
 8006f28:	2104      	movs	r1, #4
 8006f2a:	6860      	ldr	r0, [r4, #4]
 8006f2c:	f7ff ff82 	bl	8006e34 <std>
 8006f30:	68a0      	ldr	r0, [r4, #8]
 8006f32:	2201      	movs	r2, #1
 8006f34:	2109      	movs	r1, #9
 8006f36:	f7ff ff7d 	bl	8006e34 <std>
 8006f3a:	68e0      	ldr	r0, [r4, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	2112      	movs	r1, #18
 8006f40:	f7ff ff78 	bl	8006e34 <std>
 8006f44:	2301      	movs	r3, #1
 8006f46:	61a3      	str	r3, [r4, #24]
 8006f48:	e7d2      	b.n	8006ef0 <__sinit+0xc>
 8006f4a:	bf00      	nop
 8006f4c:	08007fc4 	.word	0x08007fc4
 8006f50:	08006e7d 	.word	0x08006e7d

08006f54 <__sfp>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	4607      	mov	r7, r0
 8006f58:	f7ff ffac 	bl	8006eb4 <__sfp_lock_acquire>
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <__sfp+0x84>)
 8006f5e:	681e      	ldr	r6, [r3, #0]
 8006f60:	69b3      	ldr	r3, [r6, #24]
 8006f62:	b913      	cbnz	r3, 8006f6a <__sfp+0x16>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ffbd 	bl	8006ee4 <__sinit>
 8006f6a:	3648      	adds	r6, #72	; 0x48
 8006f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	d503      	bpl.n	8006f7c <__sfp+0x28>
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	b30b      	cbz	r3, 8006fbc <__sfp+0x68>
 8006f78:	6836      	ldr	r6, [r6, #0]
 8006f7a:	e7f7      	b.n	8006f6c <__sfp+0x18>
 8006f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f80:	b9d5      	cbnz	r5, 8006fb8 <__sfp+0x64>
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <__sfp+0x88>)
 8006f84:	60e3      	str	r3, [r4, #12]
 8006f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f8c:	f000 f84c 	bl	8007028 <__retarget_lock_init_recursive>
 8006f90:	f7ff ff96 	bl	8006ec0 <__sfp_lock_release>
 8006f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f9c:	6025      	str	r5, [r4, #0]
 8006f9e:	61a5      	str	r5, [r4, #24]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fa8:	f7fe f97c 	bl	80052a4 <memset>
 8006fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb8:	3468      	adds	r4, #104	; 0x68
 8006fba:	e7d9      	b.n	8006f70 <__sfp+0x1c>
 8006fbc:	2104      	movs	r1, #4
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7ff ff62 	bl	8006e88 <__sfmoreglue>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	6030      	str	r0, [r6, #0]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d1d5      	bne.n	8006f78 <__sfp+0x24>
 8006fcc:	f7ff ff78 	bl	8006ec0 <__sfp_lock_release>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	e7ee      	b.n	8006fb4 <__sfp+0x60>
 8006fd6:	bf00      	nop
 8006fd8:	08007fc4 	.word	0x08007fc4
 8006fdc:	ffff0001 	.word	0xffff0001

08006fe0 <_fwalk_reent>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	4688      	mov	r8, r1
 8006fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fec:	2700      	movs	r7, #0
 8006fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff6:	d505      	bpl.n	8007004 <_fwalk_reent+0x24>
 8006ff8:	6824      	ldr	r4, [r4, #0]
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	d1f7      	bne.n	8006fee <_fwalk_reent+0xe>
 8006ffe:	4638      	mov	r0, r7
 8007000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007004:	89ab      	ldrh	r3, [r5, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d907      	bls.n	800701a <_fwalk_reent+0x3a>
 800700a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800700e:	3301      	adds	r3, #1
 8007010:	d003      	beq.n	800701a <_fwalk_reent+0x3a>
 8007012:	4629      	mov	r1, r5
 8007014:	4630      	mov	r0, r6
 8007016:	47c0      	blx	r8
 8007018:	4307      	orrs	r7, r0
 800701a:	3568      	adds	r5, #104	; 0x68
 800701c:	e7e9      	b.n	8006ff2 <_fwalk_reent+0x12>
	...

08007020 <_localeconv_r>:
 8007020:	4800      	ldr	r0, [pc, #0]	; (8007024 <_localeconv_r+0x4>)
 8007022:	4770      	bx	lr
 8007024:	20000160 	.word	0x20000160

08007028 <__retarget_lock_init_recursive>:
 8007028:	4770      	bx	lr

0800702a <__retarget_lock_acquire_recursive>:
 800702a:	4770      	bx	lr

0800702c <__retarget_lock_release_recursive>:
 800702c:	4770      	bx	lr

0800702e <__swhatbuf_r>:
 800702e:	b570      	push	{r4, r5, r6, lr}
 8007030:	460e      	mov	r6, r1
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	2900      	cmp	r1, #0
 8007038:	b096      	sub	sp, #88	; 0x58
 800703a:	4614      	mov	r4, r2
 800703c:	461d      	mov	r5, r3
 800703e:	da07      	bge.n	8007050 <__swhatbuf_r+0x22>
 8007040:	2300      	movs	r3, #0
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	89b3      	ldrh	r3, [r6, #12]
 8007046:	061a      	lsls	r2, r3, #24
 8007048:	d410      	bmi.n	800706c <__swhatbuf_r+0x3e>
 800704a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704e:	e00e      	b.n	800706e <__swhatbuf_r+0x40>
 8007050:	466a      	mov	r2, sp
 8007052:	f000 fe9f 	bl	8007d94 <_fstat_r>
 8007056:	2800      	cmp	r0, #0
 8007058:	dbf2      	blt.n	8007040 <__swhatbuf_r+0x12>
 800705a:	9a01      	ldr	r2, [sp, #4]
 800705c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007060:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007064:	425a      	negs	r2, r3
 8007066:	415a      	adcs	r2, r3
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	e7ee      	b.n	800704a <__swhatbuf_r+0x1c>
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	2000      	movs	r0, #0
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	b016      	add	sp, #88	; 0x58
 8007074:	bd70      	pop	{r4, r5, r6, pc}
	...

08007078 <__smakebuf_r>:
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800707c:	079d      	lsls	r5, r3, #30
 800707e:	4606      	mov	r6, r0
 8007080:	460c      	mov	r4, r1
 8007082:	d507      	bpl.n	8007094 <__smakebuf_r+0x1c>
 8007084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	6123      	str	r3, [r4, #16]
 800708c:	2301      	movs	r3, #1
 800708e:	6163      	str	r3, [r4, #20]
 8007090:	b002      	add	sp, #8
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	ab01      	add	r3, sp, #4
 8007096:	466a      	mov	r2, sp
 8007098:	f7ff ffc9 	bl	800702e <__swhatbuf_r>
 800709c:	9900      	ldr	r1, [sp, #0]
 800709e:	4605      	mov	r5, r0
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 fc1d 	bl	80078e0 <_malloc_r>
 80070a6:	b948      	cbnz	r0, 80070bc <__smakebuf_r+0x44>
 80070a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ac:	059a      	lsls	r2, r3, #22
 80070ae:	d4ef      	bmi.n	8007090 <__smakebuf_r+0x18>
 80070b0:	f023 0303 	bic.w	r3, r3, #3
 80070b4:	f043 0302 	orr.w	r3, r3, #2
 80070b8:	81a3      	strh	r3, [r4, #12]
 80070ba:	e7e3      	b.n	8007084 <__smakebuf_r+0xc>
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <__smakebuf_r+0x7c>)
 80070be:	62b3      	str	r3, [r6, #40]	; 0x28
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	6020      	str	r0, [r4, #0]
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	6163      	str	r3, [r4, #20]
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	6120      	str	r0, [r4, #16]
 80070d2:	b15b      	cbz	r3, 80070ec <__smakebuf_r+0x74>
 80070d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 fe6d 	bl	8007db8 <_isatty_r>
 80070de:	b128      	cbz	r0, 80070ec <__smakebuf_r+0x74>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f023 0303 	bic.w	r3, r3, #3
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	89a0      	ldrh	r0, [r4, #12]
 80070ee:	4305      	orrs	r5, r0
 80070f0:	81a5      	strh	r5, [r4, #12]
 80070f2:	e7cd      	b.n	8007090 <__smakebuf_r+0x18>
 80070f4:	08006e7d 	.word	0x08006e7d

080070f8 <malloc>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <malloc+0xc>)
 80070fa:	4601      	mov	r1, r0
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f000 bbef 	b.w	80078e0 <_malloc_r>
 8007102:	bf00      	nop
 8007104:	2000000c 	.word	0x2000000c

08007108 <memcpy>:
 8007108:	440a      	add	r2, r1
 800710a:	4291      	cmp	r1, r2
 800710c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007110:	d100      	bne.n	8007114 <memcpy+0xc>
 8007112:	4770      	bx	lr
 8007114:	b510      	push	{r4, lr}
 8007116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800711e:	4291      	cmp	r1, r2
 8007120:	d1f9      	bne.n	8007116 <memcpy+0xe>
 8007122:	bd10      	pop	{r4, pc}

08007124 <_Balloc>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	b976      	cbnz	r6, 800714c <_Balloc+0x28>
 800712e:	2010      	movs	r0, #16
 8007130:	f7ff ffe2 	bl	80070f8 <malloc>
 8007134:	4602      	mov	r2, r0
 8007136:	6260      	str	r0, [r4, #36]	; 0x24
 8007138:	b920      	cbnz	r0, 8007144 <_Balloc+0x20>
 800713a:	4b18      	ldr	r3, [pc, #96]	; (800719c <_Balloc+0x78>)
 800713c:	4818      	ldr	r0, [pc, #96]	; (80071a0 <_Balloc+0x7c>)
 800713e:	2166      	movs	r1, #102	; 0x66
 8007140:	f000 fde8 	bl	8007d14 <__assert_func>
 8007144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007148:	6006      	str	r6, [r0, #0]
 800714a:	60c6      	str	r6, [r0, #12]
 800714c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800714e:	68f3      	ldr	r3, [r6, #12]
 8007150:	b183      	cbz	r3, 8007174 <_Balloc+0x50>
 8007152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800715a:	b9b8      	cbnz	r0, 800718c <_Balloc+0x68>
 800715c:	2101      	movs	r1, #1
 800715e:	fa01 f605 	lsl.w	r6, r1, r5
 8007162:	1d72      	adds	r2, r6, #5
 8007164:	0092      	lsls	r2, r2, #2
 8007166:	4620      	mov	r0, r4
 8007168:	f000 fb5a 	bl	8007820 <_calloc_r>
 800716c:	b160      	cbz	r0, 8007188 <_Balloc+0x64>
 800716e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007172:	e00e      	b.n	8007192 <_Balloc+0x6e>
 8007174:	2221      	movs	r2, #33	; 0x21
 8007176:	2104      	movs	r1, #4
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fb51 	bl	8007820 <_calloc_r>
 800717e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007180:	60f0      	str	r0, [r6, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e4      	bne.n	8007152 <_Balloc+0x2e>
 8007188:	2000      	movs	r0, #0
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	6802      	ldr	r2, [r0, #0]
 800718e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007192:	2300      	movs	r3, #0
 8007194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007198:	e7f7      	b.n	800718a <_Balloc+0x66>
 800719a:	bf00      	nop
 800719c:	08008009 	.word	0x08008009
 80071a0:	080080f0 	.word	0x080080f0

080071a4 <_Bfree>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071a8:	4605      	mov	r5, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	b976      	cbnz	r6, 80071cc <_Bfree+0x28>
 80071ae:	2010      	movs	r0, #16
 80071b0:	f7ff ffa2 	bl	80070f8 <malloc>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6268      	str	r0, [r5, #36]	; 0x24
 80071b8:	b920      	cbnz	r0, 80071c4 <_Bfree+0x20>
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <_Bfree+0x3c>)
 80071bc:	4809      	ldr	r0, [pc, #36]	; (80071e4 <_Bfree+0x40>)
 80071be:	218a      	movs	r1, #138	; 0x8a
 80071c0:	f000 fda8 	bl	8007d14 <__assert_func>
 80071c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c8:	6006      	str	r6, [r0, #0]
 80071ca:	60c6      	str	r6, [r0, #12]
 80071cc:	b13c      	cbz	r4, 80071de <_Bfree+0x3a>
 80071ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071d0:	6862      	ldr	r2, [r4, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d8:	6021      	str	r1, [r4, #0]
 80071da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	08008009 	.word	0x08008009
 80071e4:	080080f0 	.word	0x080080f0

080071e8 <__multadd>:
 80071e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ec:	690e      	ldr	r6, [r1, #16]
 80071ee:	4607      	mov	r7, r0
 80071f0:	4698      	mov	r8, r3
 80071f2:	460c      	mov	r4, r1
 80071f4:	f101 0014 	add.w	r0, r1, #20
 80071f8:	2300      	movs	r3, #0
 80071fa:	6805      	ldr	r5, [r0, #0]
 80071fc:	b2a9      	uxth	r1, r5
 80071fe:	fb02 8101 	mla	r1, r2, r1, r8
 8007202:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007206:	0c2d      	lsrs	r5, r5, #16
 8007208:	fb02 c505 	mla	r5, r2, r5, ip
 800720c:	b289      	uxth	r1, r1
 800720e:	3301      	adds	r3, #1
 8007210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007214:	429e      	cmp	r6, r3
 8007216:	f840 1b04 	str.w	r1, [r0], #4
 800721a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800721e:	dcec      	bgt.n	80071fa <__multadd+0x12>
 8007220:	f1b8 0f00 	cmp.w	r8, #0
 8007224:	d022      	beq.n	800726c <__multadd+0x84>
 8007226:	68a3      	ldr	r3, [r4, #8]
 8007228:	42b3      	cmp	r3, r6
 800722a:	dc19      	bgt.n	8007260 <__multadd+0x78>
 800722c:	6861      	ldr	r1, [r4, #4]
 800722e:	4638      	mov	r0, r7
 8007230:	3101      	adds	r1, #1
 8007232:	f7ff ff77 	bl	8007124 <_Balloc>
 8007236:	4605      	mov	r5, r0
 8007238:	b928      	cbnz	r0, 8007246 <__multadd+0x5e>
 800723a:	4602      	mov	r2, r0
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <__multadd+0x8c>)
 800723e:	480e      	ldr	r0, [pc, #56]	; (8007278 <__multadd+0x90>)
 8007240:	21b5      	movs	r1, #181	; 0xb5
 8007242:	f000 fd67 	bl	8007d14 <__assert_func>
 8007246:	6922      	ldr	r2, [r4, #16]
 8007248:	3202      	adds	r2, #2
 800724a:	f104 010c 	add.w	r1, r4, #12
 800724e:	0092      	lsls	r2, r2, #2
 8007250:	300c      	adds	r0, #12
 8007252:	f7ff ff59 	bl	8007108 <memcpy>
 8007256:	4621      	mov	r1, r4
 8007258:	4638      	mov	r0, r7
 800725a:	f7ff ffa3 	bl	80071a4 <_Bfree>
 800725e:	462c      	mov	r4, r5
 8007260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007264:	3601      	adds	r6, #1
 8007266:	f8c3 8014 	str.w	r8, [r3, #20]
 800726a:	6126      	str	r6, [r4, #16]
 800726c:	4620      	mov	r0, r4
 800726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007272:	bf00      	nop
 8007274:	0800807f 	.word	0x0800807f
 8007278:	080080f0 	.word	0x080080f0

0800727c <__hi0bits>:
 800727c:	0c03      	lsrs	r3, r0, #16
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	b9d3      	cbnz	r3, 80072b8 <__hi0bits+0x3c>
 8007282:	0400      	lsls	r0, r0, #16
 8007284:	2310      	movs	r3, #16
 8007286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800728a:	bf04      	itt	eq
 800728c:	0200      	lsleq	r0, r0, #8
 800728e:	3308      	addeq	r3, #8
 8007290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007294:	bf04      	itt	eq
 8007296:	0100      	lsleq	r0, r0, #4
 8007298:	3304      	addeq	r3, #4
 800729a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800729e:	bf04      	itt	eq
 80072a0:	0080      	lsleq	r0, r0, #2
 80072a2:	3302      	addeq	r3, #2
 80072a4:	2800      	cmp	r0, #0
 80072a6:	db05      	blt.n	80072b4 <__hi0bits+0x38>
 80072a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80072ac:	f103 0301 	add.w	r3, r3, #1
 80072b0:	bf08      	it	eq
 80072b2:	2320      	moveq	r3, #32
 80072b4:	4618      	mov	r0, r3
 80072b6:	4770      	bx	lr
 80072b8:	2300      	movs	r3, #0
 80072ba:	e7e4      	b.n	8007286 <__hi0bits+0xa>

080072bc <__lo0bits>:
 80072bc:	6803      	ldr	r3, [r0, #0]
 80072be:	f013 0207 	ands.w	r2, r3, #7
 80072c2:	4601      	mov	r1, r0
 80072c4:	d00b      	beq.n	80072de <__lo0bits+0x22>
 80072c6:	07da      	lsls	r2, r3, #31
 80072c8:	d424      	bmi.n	8007314 <__lo0bits+0x58>
 80072ca:	0798      	lsls	r0, r3, #30
 80072cc:	bf49      	itett	mi
 80072ce:	085b      	lsrmi	r3, r3, #1
 80072d0:	089b      	lsrpl	r3, r3, #2
 80072d2:	2001      	movmi	r0, #1
 80072d4:	600b      	strmi	r3, [r1, #0]
 80072d6:	bf5c      	itt	pl
 80072d8:	600b      	strpl	r3, [r1, #0]
 80072da:	2002      	movpl	r0, #2
 80072dc:	4770      	bx	lr
 80072de:	b298      	uxth	r0, r3
 80072e0:	b9b0      	cbnz	r0, 8007310 <__lo0bits+0x54>
 80072e2:	0c1b      	lsrs	r3, r3, #16
 80072e4:	2010      	movs	r0, #16
 80072e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072ea:	bf04      	itt	eq
 80072ec:	0a1b      	lsreq	r3, r3, #8
 80072ee:	3008      	addeq	r0, #8
 80072f0:	071a      	lsls	r2, r3, #28
 80072f2:	bf04      	itt	eq
 80072f4:	091b      	lsreq	r3, r3, #4
 80072f6:	3004      	addeq	r0, #4
 80072f8:	079a      	lsls	r2, r3, #30
 80072fa:	bf04      	itt	eq
 80072fc:	089b      	lsreq	r3, r3, #2
 80072fe:	3002      	addeq	r0, #2
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	d403      	bmi.n	800730c <__lo0bits+0x50>
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	f100 0001 	add.w	r0, r0, #1
 800730a:	d005      	beq.n	8007318 <__lo0bits+0x5c>
 800730c:	600b      	str	r3, [r1, #0]
 800730e:	4770      	bx	lr
 8007310:	4610      	mov	r0, r2
 8007312:	e7e8      	b.n	80072e6 <__lo0bits+0x2a>
 8007314:	2000      	movs	r0, #0
 8007316:	4770      	bx	lr
 8007318:	2020      	movs	r0, #32
 800731a:	4770      	bx	lr

0800731c <__i2b>:
 800731c:	b510      	push	{r4, lr}
 800731e:	460c      	mov	r4, r1
 8007320:	2101      	movs	r1, #1
 8007322:	f7ff feff 	bl	8007124 <_Balloc>
 8007326:	4602      	mov	r2, r0
 8007328:	b928      	cbnz	r0, 8007336 <__i2b+0x1a>
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <__i2b+0x24>)
 800732c:	4805      	ldr	r0, [pc, #20]	; (8007344 <__i2b+0x28>)
 800732e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007332:	f000 fcef 	bl	8007d14 <__assert_func>
 8007336:	2301      	movs	r3, #1
 8007338:	6144      	str	r4, [r0, #20]
 800733a:	6103      	str	r3, [r0, #16]
 800733c:	bd10      	pop	{r4, pc}
 800733e:	bf00      	nop
 8007340:	0800807f 	.word	0x0800807f
 8007344:	080080f0 	.word	0x080080f0

08007348 <__multiply>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	4614      	mov	r4, r2
 800734e:	690a      	ldr	r2, [r1, #16]
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	bfb8      	it	lt
 8007356:	460b      	movlt	r3, r1
 8007358:	460d      	mov	r5, r1
 800735a:	bfbc      	itt	lt
 800735c:	4625      	movlt	r5, r4
 800735e:	461c      	movlt	r4, r3
 8007360:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007368:	68ab      	ldr	r3, [r5, #8]
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	eb0a 0709 	add.w	r7, sl, r9
 8007370:	42bb      	cmp	r3, r7
 8007372:	b085      	sub	sp, #20
 8007374:	bfb8      	it	lt
 8007376:	3101      	addlt	r1, #1
 8007378:	f7ff fed4 	bl	8007124 <_Balloc>
 800737c:	b930      	cbnz	r0, 800738c <__multiply+0x44>
 800737e:	4602      	mov	r2, r0
 8007380:	4b42      	ldr	r3, [pc, #264]	; (800748c <__multiply+0x144>)
 8007382:	4843      	ldr	r0, [pc, #268]	; (8007490 <__multiply+0x148>)
 8007384:	f240 115d 	movw	r1, #349	; 0x15d
 8007388:	f000 fcc4 	bl	8007d14 <__assert_func>
 800738c:	f100 0614 	add.w	r6, r0, #20
 8007390:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007394:	4633      	mov	r3, r6
 8007396:	2200      	movs	r2, #0
 8007398:	4543      	cmp	r3, r8
 800739a:	d31e      	bcc.n	80073da <__multiply+0x92>
 800739c:	f105 0c14 	add.w	ip, r5, #20
 80073a0:	f104 0314 	add.w	r3, r4, #20
 80073a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80073a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	ebac 0205 	sub.w	r2, ip, r5
 80073b2:	3a15      	subs	r2, #21
 80073b4:	f022 0203 	bic.w	r2, r2, #3
 80073b8:	3204      	adds	r2, #4
 80073ba:	f105 0115 	add.w	r1, r5, #21
 80073be:	458c      	cmp	ip, r1
 80073c0:	bf38      	it	cc
 80073c2:	2204      	movcc	r2, #4
 80073c4:	9201      	str	r2, [sp, #4]
 80073c6:	9a02      	ldr	r2, [sp, #8]
 80073c8:	9303      	str	r3, [sp, #12]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d808      	bhi.n	80073e0 <__multiply+0x98>
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	dc55      	bgt.n	800747e <__multiply+0x136>
 80073d2:	6107      	str	r7, [r0, #16]
 80073d4:	b005      	add	sp, #20
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	f843 2b04 	str.w	r2, [r3], #4
 80073de:	e7db      	b.n	8007398 <__multiply+0x50>
 80073e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80073e4:	f1ba 0f00 	cmp.w	sl, #0
 80073e8:	d020      	beq.n	800742c <__multiply+0xe4>
 80073ea:	f105 0e14 	add.w	lr, r5, #20
 80073ee:	46b1      	mov	r9, r6
 80073f0:	2200      	movs	r2, #0
 80073f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80073f6:	f8d9 b000 	ldr.w	fp, [r9]
 80073fa:	b2a1      	uxth	r1, r4
 80073fc:	fa1f fb8b 	uxth.w	fp, fp
 8007400:	fb0a b101 	mla	r1, sl, r1, fp
 8007404:	4411      	add	r1, r2
 8007406:	f8d9 2000 	ldr.w	r2, [r9]
 800740a:	0c24      	lsrs	r4, r4, #16
 800740c:	0c12      	lsrs	r2, r2, #16
 800740e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007412:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007416:	b289      	uxth	r1, r1
 8007418:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800741c:	45f4      	cmp	ip, lr
 800741e:	f849 1b04 	str.w	r1, [r9], #4
 8007422:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007426:	d8e4      	bhi.n	80073f2 <__multiply+0xaa>
 8007428:	9901      	ldr	r1, [sp, #4]
 800742a:	5072      	str	r2, [r6, r1]
 800742c:	9a03      	ldr	r2, [sp, #12]
 800742e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007432:	3304      	adds	r3, #4
 8007434:	f1b9 0f00 	cmp.w	r9, #0
 8007438:	d01f      	beq.n	800747a <__multiply+0x132>
 800743a:	6834      	ldr	r4, [r6, #0]
 800743c:	f105 0114 	add.w	r1, r5, #20
 8007440:	46b6      	mov	lr, r6
 8007442:	f04f 0a00 	mov.w	sl, #0
 8007446:	880a      	ldrh	r2, [r1, #0]
 8007448:	f8be b002 	ldrh.w	fp, [lr, #2]
 800744c:	fb09 b202 	mla	r2, r9, r2, fp
 8007450:	4492      	add	sl, r2
 8007452:	b2a4      	uxth	r4, r4
 8007454:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007458:	f84e 4b04 	str.w	r4, [lr], #4
 800745c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007460:	f8be 2000 	ldrh.w	r2, [lr]
 8007464:	0c24      	lsrs	r4, r4, #16
 8007466:	fb09 2404 	mla	r4, r9, r4, r2
 800746a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800746e:	458c      	cmp	ip, r1
 8007470:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007474:	d8e7      	bhi.n	8007446 <__multiply+0xfe>
 8007476:	9a01      	ldr	r2, [sp, #4]
 8007478:	50b4      	str	r4, [r6, r2]
 800747a:	3604      	adds	r6, #4
 800747c:	e7a3      	b.n	80073c6 <__multiply+0x7e>
 800747e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1a5      	bne.n	80073d2 <__multiply+0x8a>
 8007486:	3f01      	subs	r7, #1
 8007488:	e7a1      	b.n	80073ce <__multiply+0x86>
 800748a:	bf00      	nop
 800748c:	0800807f 	.word	0x0800807f
 8007490:	080080f0 	.word	0x080080f0

08007494 <__pow5mult>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	4615      	mov	r5, r2
 800749a:	f012 0203 	ands.w	r2, r2, #3
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	d007      	beq.n	80074b4 <__pow5mult+0x20>
 80074a4:	4c25      	ldr	r4, [pc, #148]	; (800753c <__pow5mult+0xa8>)
 80074a6:	3a01      	subs	r2, #1
 80074a8:	2300      	movs	r3, #0
 80074aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ae:	f7ff fe9b 	bl	80071e8 <__multadd>
 80074b2:	4607      	mov	r7, r0
 80074b4:	10ad      	asrs	r5, r5, #2
 80074b6:	d03d      	beq.n	8007534 <__pow5mult+0xa0>
 80074b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ba:	b97c      	cbnz	r4, 80074dc <__pow5mult+0x48>
 80074bc:	2010      	movs	r0, #16
 80074be:	f7ff fe1b 	bl	80070f8 <malloc>
 80074c2:	4602      	mov	r2, r0
 80074c4:	6270      	str	r0, [r6, #36]	; 0x24
 80074c6:	b928      	cbnz	r0, 80074d4 <__pow5mult+0x40>
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <__pow5mult+0xac>)
 80074ca:	481e      	ldr	r0, [pc, #120]	; (8007544 <__pow5mult+0xb0>)
 80074cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074d0:	f000 fc20 	bl	8007d14 <__assert_func>
 80074d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074d8:	6004      	str	r4, [r0, #0]
 80074da:	60c4      	str	r4, [r0, #12]
 80074dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074e4:	b94c      	cbnz	r4, 80074fa <__pow5mult+0x66>
 80074e6:	f240 2171 	movw	r1, #625	; 0x271
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff16 	bl	800731c <__i2b>
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80074f6:	4604      	mov	r4, r0
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	07eb      	lsls	r3, r5, #31
 8007500:	d50a      	bpl.n	8007518 <__pow5mult+0x84>
 8007502:	4639      	mov	r1, r7
 8007504:	4622      	mov	r2, r4
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ff1e 	bl	8007348 <__multiply>
 800750c:	4639      	mov	r1, r7
 800750e:	4680      	mov	r8, r0
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fe47 	bl	80071a4 <_Bfree>
 8007516:	4647      	mov	r7, r8
 8007518:	106d      	asrs	r5, r5, #1
 800751a:	d00b      	beq.n	8007534 <__pow5mult+0xa0>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	b938      	cbnz	r0, 8007530 <__pow5mult+0x9c>
 8007520:	4622      	mov	r2, r4
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff ff0f 	bl	8007348 <__multiply>
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	f8c0 9000 	str.w	r9, [r0]
 8007530:	4604      	mov	r4, r0
 8007532:	e7e4      	b.n	80074fe <__pow5mult+0x6a>
 8007534:	4638      	mov	r0, r7
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	bf00      	nop
 800753c:	08008240 	.word	0x08008240
 8007540:	08008009 	.word	0x08008009
 8007544:	080080f0 	.word	0x080080f0

08007548 <__lshift>:
 8007548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	6849      	ldr	r1, [r1, #4]
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	4607      	mov	r7, r0
 800755a:	4691      	mov	r9, r2
 800755c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007560:	f108 0601 	add.w	r6, r8, #1
 8007564:	42b3      	cmp	r3, r6
 8007566:	db0b      	blt.n	8007580 <__lshift+0x38>
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff fddb 	bl	8007124 <_Balloc>
 800756e:	4605      	mov	r5, r0
 8007570:	b948      	cbnz	r0, 8007586 <__lshift+0x3e>
 8007572:	4602      	mov	r2, r0
 8007574:	4b28      	ldr	r3, [pc, #160]	; (8007618 <__lshift+0xd0>)
 8007576:	4829      	ldr	r0, [pc, #164]	; (800761c <__lshift+0xd4>)
 8007578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800757c:	f000 fbca 	bl	8007d14 <__assert_func>
 8007580:	3101      	adds	r1, #1
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	e7ee      	b.n	8007564 <__lshift+0x1c>
 8007586:	2300      	movs	r3, #0
 8007588:	f100 0114 	add.w	r1, r0, #20
 800758c:	f100 0210 	add.w	r2, r0, #16
 8007590:	4618      	mov	r0, r3
 8007592:	4553      	cmp	r3, sl
 8007594:	db33      	blt.n	80075fe <__lshift+0xb6>
 8007596:	6920      	ldr	r0, [r4, #16]
 8007598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800759c:	f104 0314 	add.w	r3, r4, #20
 80075a0:	f019 091f 	ands.w	r9, r9, #31
 80075a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075ac:	d02b      	beq.n	8007606 <__lshift+0xbe>
 80075ae:	f1c9 0e20 	rsb	lr, r9, #32
 80075b2:	468a      	mov	sl, r1
 80075b4:	2200      	movs	r2, #0
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	fa00 f009 	lsl.w	r0, r0, r9
 80075bc:	4302      	orrs	r2, r0
 80075be:	f84a 2b04 	str.w	r2, [sl], #4
 80075c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c6:	459c      	cmp	ip, r3
 80075c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075cc:	d8f3      	bhi.n	80075b6 <__lshift+0x6e>
 80075ce:	ebac 0304 	sub.w	r3, ip, r4
 80075d2:	3b15      	subs	r3, #21
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	3304      	adds	r3, #4
 80075da:	f104 0015 	add.w	r0, r4, #21
 80075de:	4584      	cmp	ip, r0
 80075e0:	bf38      	it	cc
 80075e2:	2304      	movcc	r3, #4
 80075e4:	50ca      	str	r2, [r1, r3]
 80075e6:	b10a      	cbz	r2, 80075ec <__lshift+0xa4>
 80075e8:	f108 0602 	add.w	r6, r8, #2
 80075ec:	3e01      	subs	r6, #1
 80075ee:	4638      	mov	r0, r7
 80075f0:	612e      	str	r6, [r5, #16]
 80075f2:	4621      	mov	r1, r4
 80075f4:	f7ff fdd6 	bl	80071a4 <_Bfree>
 80075f8:	4628      	mov	r0, r5
 80075fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007602:	3301      	adds	r3, #1
 8007604:	e7c5      	b.n	8007592 <__lshift+0x4a>
 8007606:	3904      	subs	r1, #4
 8007608:	f853 2b04 	ldr.w	r2, [r3], #4
 800760c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007610:	459c      	cmp	ip, r3
 8007612:	d8f9      	bhi.n	8007608 <__lshift+0xc0>
 8007614:	e7ea      	b.n	80075ec <__lshift+0xa4>
 8007616:	bf00      	nop
 8007618:	0800807f 	.word	0x0800807f
 800761c:	080080f0 	.word	0x080080f0

08007620 <__mcmp>:
 8007620:	b530      	push	{r4, r5, lr}
 8007622:	6902      	ldr	r2, [r0, #16]
 8007624:	690c      	ldr	r4, [r1, #16]
 8007626:	1b12      	subs	r2, r2, r4
 8007628:	d10e      	bne.n	8007648 <__mcmp+0x28>
 800762a:	f100 0314 	add.w	r3, r0, #20
 800762e:	3114      	adds	r1, #20
 8007630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800763c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007640:	42a5      	cmp	r5, r4
 8007642:	d003      	beq.n	800764c <__mcmp+0x2c>
 8007644:	d305      	bcc.n	8007652 <__mcmp+0x32>
 8007646:	2201      	movs	r2, #1
 8007648:	4610      	mov	r0, r2
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	4283      	cmp	r3, r0
 800764e:	d3f3      	bcc.n	8007638 <__mcmp+0x18>
 8007650:	e7fa      	b.n	8007648 <__mcmp+0x28>
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	e7f7      	b.n	8007648 <__mcmp+0x28>

08007658 <__mdiff>:
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	4606      	mov	r6, r0
 8007660:	4611      	mov	r1, r2
 8007662:	4620      	mov	r0, r4
 8007664:	4617      	mov	r7, r2
 8007666:	f7ff ffdb 	bl	8007620 <__mcmp>
 800766a:	1e05      	subs	r5, r0, #0
 800766c:	d110      	bne.n	8007690 <__mdiff+0x38>
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	f7ff fd57 	bl	8007124 <_Balloc>
 8007676:	b930      	cbnz	r0, 8007686 <__mdiff+0x2e>
 8007678:	4b39      	ldr	r3, [pc, #228]	; (8007760 <__mdiff+0x108>)
 800767a:	4602      	mov	r2, r0
 800767c:	f240 2132 	movw	r1, #562	; 0x232
 8007680:	4838      	ldr	r0, [pc, #224]	; (8007764 <__mdiff+0x10c>)
 8007682:	f000 fb47 	bl	8007d14 <__assert_func>
 8007686:	2301      	movs	r3, #1
 8007688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800768c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	bfa4      	itt	ge
 8007692:	463b      	movge	r3, r7
 8007694:	4627      	movge	r7, r4
 8007696:	4630      	mov	r0, r6
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	bfa6      	itte	ge
 800769c:	461c      	movge	r4, r3
 800769e:	2500      	movge	r5, #0
 80076a0:	2501      	movlt	r5, #1
 80076a2:	f7ff fd3f 	bl	8007124 <_Balloc>
 80076a6:	b920      	cbnz	r0, 80076b2 <__mdiff+0x5a>
 80076a8:	4b2d      	ldr	r3, [pc, #180]	; (8007760 <__mdiff+0x108>)
 80076aa:	4602      	mov	r2, r0
 80076ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076b0:	e7e6      	b.n	8007680 <__mdiff+0x28>
 80076b2:	693e      	ldr	r6, [r7, #16]
 80076b4:	60c5      	str	r5, [r0, #12]
 80076b6:	6925      	ldr	r5, [r4, #16]
 80076b8:	f107 0114 	add.w	r1, r7, #20
 80076bc:	f104 0914 	add.w	r9, r4, #20
 80076c0:	f100 0e14 	add.w	lr, r0, #20
 80076c4:	f107 0210 	add.w	r2, r7, #16
 80076c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80076cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80076d0:	46f2      	mov	sl, lr
 80076d2:	2700      	movs	r7, #0
 80076d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076dc:	fa1f f883 	uxth.w	r8, r3
 80076e0:	fa17 f78b 	uxtah	r7, r7, fp
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	eba7 0808 	sub.w	r8, r7, r8
 80076ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076f2:	fa1f f888 	uxth.w	r8, r8
 80076f6:	141f      	asrs	r7, r3, #16
 80076f8:	454d      	cmp	r5, r9
 80076fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007702:	d8e7      	bhi.n	80076d4 <__mdiff+0x7c>
 8007704:	1b2b      	subs	r3, r5, r4
 8007706:	3b15      	subs	r3, #21
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	3304      	adds	r3, #4
 800770e:	3415      	adds	r4, #21
 8007710:	42a5      	cmp	r5, r4
 8007712:	bf38      	it	cc
 8007714:	2304      	movcc	r3, #4
 8007716:	4419      	add	r1, r3
 8007718:	4473      	add	r3, lr
 800771a:	469e      	mov	lr, r3
 800771c:	460d      	mov	r5, r1
 800771e:	4565      	cmp	r5, ip
 8007720:	d30e      	bcc.n	8007740 <__mdiff+0xe8>
 8007722:	f10c 0203 	add.w	r2, ip, #3
 8007726:	1a52      	subs	r2, r2, r1
 8007728:	f022 0203 	bic.w	r2, r2, #3
 800772c:	3903      	subs	r1, #3
 800772e:	458c      	cmp	ip, r1
 8007730:	bf38      	it	cc
 8007732:	2200      	movcc	r2, #0
 8007734:	441a      	add	r2, r3
 8007736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800773a:	b17b      	cbz	r3, 800775c <__mdiff+0x104>
 800773c:	6106      	str	r6, [r0, #16]
 800773e:	e7a5      	b.n	800768c <__mdiff+0x34>
 8007740:	f855 8b04 	ldr.w	r8, [r5], #4
 8007744:	fa17 f488 	uxtah	r4, r7, r8
 8007748:	1422      	asrs	r2, r4, #16
 800774a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800774e:	b2a4      	uxth	r4, r4
 8007750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007754:	f84e 4b04 	str.w	r4, [lr], #4
 8007758:	1417      	asrs	r7, r2, #16
 800775a:	e7e0      	b.n	800771e <__mdiff+0xc6>
 800775c:	3e01      	subs	r6, #1
 800775e:	e7ea      	b.n	8007736 <__mdiff+0xde>
 8007760:	0800807f 	.word	0x0800807f
 8007764:	080080f0 	.word	0x080080f0

08007768 <__d2b>:
 8007768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4689      	mov	r9, r1
 800776e:	2101      	movs	r1, #1
 8007770:	ec57 6b10 	vmov	r6, r7, d0
 8007774:	4690      	mov	r8, r2
 8007776:	f7ff fcd5 	bl	8007124 <_Balloc>
 800777a:	4604      	mov	r4, r0
 800777c:	b930      	cbnz	r0, 800778c <__d2b+0x24>
 800777e:	4602      	mov	r2, r0
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <__d2b+0xb0>)
 8007782:	4826      	ldr	r0, [pc, #152]	; (800781c <__d2b+0xb4>)
 8007784:	f240 310a 	movw	r1, #778	; 0x30a
 8007788:	f000 fac4 	bl	8007d14 <__assert_func>
 800778c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007794:	bb35      	cbnz	r5, 80077e4 <__d2b+0x7c>
 8007796:	2e00      	cmp	r6, #0
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	d028      	beq.n	80077ee <__d2b+0x86>
 800779c:	4668      	mov	r0, sp
 800779e:	9600      	str	r6, [sp, #0]
 80077a0:	f7ff fd8c 	bl	80072bc <__lo0bits>
 80077a4:	9900      	ldr	r1, [sp, #0]
 80077a6:	b300      	cbz	r0, 80077ea <__d2b+0x82>
 80077a8:	9a01      	ldr	r2, [sp, #4]
 80077aa:	f1c0 0320 	rsb	r3, r0, #32
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	430b      	orrs	r3, r1
 80077b4:	40c2      	lsrs	r2, r0
 80077b6:	6163      	str	r3, [r4, #20]
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	61a3      	str	r3, [r4, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf14      	ite	ne
 80077c2:	2202      	movne	r2, #2
 80077c4:	2201      	moveq	r2, #1
 80077c6:	6122      	str	r2, [r4, #16]
 80077c8:	b1d5      	cbz	r5, 8007800 <__d2b+0x98>
 80077ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077ce:	4405      	add	r5, r0
 80077d0:	f8c9 5000 	str.w	r5, [r9]
 80077d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077d8:	f8c8 0000 	str.w	r0, [r8]
 80077dc:	4620      	mov	r0, r4
 80077de:	b003      	add	sp, #12
 80077e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e8:	e7d5      	b.n	8007796 <__d2b+0x2e>
 80077ea:	6161      	str	r1, [r4, #20]
 80077ec:	e7e5      	b.n	80077ba <__d2b+0x52>
 80077ee:	a801      	add	r0, sp, #4
 80077f0:	f7ff fd64 	bl	80072bc <__lo0bits>
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	6163      	str	r3, [r4, #20]
 80077f8:	2201      	movs	r2, #1
 80077fa:	6122      	str	r2, [r4, #16]
 80077fc:	3020      	adds	r0, #32
 80077fe:	e7e3      	b.n	80077c8 <__d2b+0x60>
 8007800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007808:	f8c9 0000 	str.w	r0, [r9]
 800780c:	6918      	ldr	r0, [r3, #16]
 800780e:	f7ff fd35 	bl	800727c <__hi0bits>
 8007812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007816:	e7df      	b.n	80077d8 <__d2b+0x70>
 8007818:	0800807f 	.word	0x0800807f
 800781c:	080080f0 	.word	0x080080f0

08007820 <_calloc_r>:
 8007820:	b513      	push	{r0, r1, r4, lr}
 8007822:	434a      	muls	r2, r1
 8007824:	4611      	mov	r1, r2
 8007826:	9201      	str	r2, [sp, #4]
 8007828:	f000 f85a 	bl	80078e0 <_malloc_r>
 800782c:	4604      	mov	r4, r0
 800782e:	b118      	cbz	r0, 8007838 <_calloc_r+0x18>
 8007830:	9a01      	ldr	r2, [sp, #4]
 8007832:	2100      	movs	r1, #0
 8007834:	f7fd fd36 	bl	80052a4 <memset>
 8007838:	4620      	mov	r0, r4
 800783a:	b002      	add	sp, #8
 800783c:	bd10      	pop	{r4, pc}
	...

08007840 <_free_r>:
 8007840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007842:	2900      	cmp	r1, #0
 8007844:	d048      	beq.n	80078d8 <_free_r+0x98>
 8007846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f1a1 0404 	sub.w	r4, r1, #4
 8007852:	bfb8      	it	lt
 8007854:	18e4      	addlt	r4, r4, r3
 8007856:	f000 fae3 	bl	8007e20 <__malloc_lock>
 800785a:	4a20      	ldr	r2, [pc, #128]	; (80078dc <_free_r+0x9c>)
 800785c:	9801      	ldr	r0, [sp, #4]
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	4615      	mov	r5, r2
 8007862:	b933      	cbnz	r3, 8007872 <_free_r+0x32>
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	6014      	str	r4, [r2, #0]
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786e:	f000 badd 	b.w	8007e2c <__malloc_unlock>
 8007872:	42a3      	cmp	r3, r4
 8007874:	d90b      	bls.n	800788e <_free_r+0x4e>
 8007876:	6821      	ldr	r1, [r4, #0]
 8007878:	1862      	adds	r2, r4, r1
 800787a:	4293      	cmp	r3, r2
 800787c:	bf04      	itt	eq
 800787e:	681a      	ldreq	r2, [r3, #0]
 8007880:	685b      	ldreq	r3, [r3, #4]
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	bf04      	itt	eq
 8007886:	1852      	addeq	r2, r2, r1
 8007888:	6022      	streq	r2, [r4, #0]
 800788a:	602c      	str	r4, [r5, #0]
 800788c:	e7ec      	b.n	8007868 <_free_r+0x28>
 800788e:	461a      	mov	r2, r3
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b10b      	cbz	r3, 8007898 <_free_r+0x58>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x4e>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	1855      	adds	r5, r2, r1
 800789c:	42a5      	cmp	r5, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x78>
 80078a0:	6824      	ldr	r4, [r4, #0]
 80078a2:	4421      	add	r1, r4
 80078a4:	1854      	adds	r4, r2, r1
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	d1dd      	bne.n	8007868 <_free_r+0x28>
 80078ac:	681c      	ldr	r4, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	4421      	add	r1, r4
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	e7d7      	b.n	8007868 <_free_r+0x28>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x80>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	e7d3      	b.n	8007868 <_free_r+0x28>
 80078c0:	6825      	ldr	r5, [r4, #0]
 80078c2:	1961      	adds	r1, r4, r5
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1949      	addeq	r1, r1, r5
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	6054      	str	r4, [r2, #4]
 80078d6:	e7c7      	b.n	8007868 <_free_r+0x28>
 80078d8:	b003      	add	sp, #12
 80078da:	bd30      	pop	{r4, r5, pc}
 80078dc:	200003f4 	.word	0x200003f4

080078e0 <_malloc_r>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	1ccd      	adds	r5, r1, #3
 80078e4:	f025 0503 	bic.w	r5, r5, #3
 80078e8:	3508      	adds	r5, #8
 80078ea:	2d0c      	cmp	r5, #12
 80078ec:	bf38      	it	cc
 80078ee:	250c      	movcc	r5, #12
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	db01      	blt.n	80078fa <_malloc_r+0x1a>
 80078f6:	42a9      	cmp	r1, r5
 80078f8:	d903      	bls.n	8007902 <_malloc_r+0x22>
 80078fa:	230c      	movs	r3, #12
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	2000      	movs	r0, #0
 8007900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007902:	f000 fa8d 	bl	8007e20 <__malloc_lock>
 8007906:	4921      	ldr	r1, [pc, #132]	; (800798c <_malloc_r+0xac>)
 8007908:	680a      	ldr	r2, [r1, #0]
 800790a:	4614      	mov	r4, r2
 800790c:	b99c      	cbnz	r4, 8007936 <_malloc_r+0x56>
 800790e:	4f20      	ldr	r7, [pc, #128]	; (8007990 <_malloc_r+0xb0>)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	b923      	cbnz	r3, 800791e <_malloc_r+0x3e>
 8007914:	4621      	mov	r1, r4
 8007916:	4630      	mov	r0, r6
 8007918:	f000 f996 	bl	8007c48 <_sbrk_r>
 800791c:	6038      	str	r0, [r7, #0]
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f991 	bl	8007c48 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d123      	bne.n	8007972 <_malloc_r+0x92>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	4630      	mov	r0, r6
 8007930:	f000 fa7c 	bl	8007e2c <__malloc_unlock>
 8007934:	e7e3      	b.n	80078fe <_malloc_r+0x1e>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	1b5b      	subs	r3, r3, r5
 800793a:	d417      	bmi.n	800796c <_malloc_r+0x8c>
 800793c:	2b0b      	cmp	r3, #11
 800793e:	d903      	bls.n	8007948 <_malloc_r+0x68>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	441c      	add	r4, r3
 8007944:	6025      	str	r5, [r4, #0]
 8007946:	e004      	b.n	8007952 <_malloc_r+0x72>
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	42a2      	cmp	r2, r4
 800794c:	bf0c      	ite	eq
 800794e:	600b      	streq	r3, [r1, #0]
 8007950:	6053      	strne	r3, [r2, #4]
 8007952:	4630      	mov	r0, r6
 8007954:	f000 fa6a 	bl	8007e2c <__malloc_unlock>
 8007958:	f104 000b 	add.w	r0, r4, #11
 800795c:	1d23      	adds	r3, r4, #4
 800795e:	f020 0007 	bic.w	r0, r0, #7
 8007962:	1ac2      	subs	r2, r0, r3
 8007964:	d0cc      	beq.n	8007900 <_malloc_r+0x20>
 8007966:	1a1b      	subs	r3, r3, r0
 8007968:	50a3      	str	r3, [r4, r2]
 800796a:	e7c9      	b.n	8007900 <_malloc_r+0x20>
 800796c:	4622      	mov	r2, r4
 800796e:	6864      	ldr	r4, [r4, #4]
 8007970:	e7cc      	b.n	800790c <_malloc_r+0x2c>
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d0e3      	beq.n	8007944 <_malloc_r+0x64>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f962 	bl	8007c48 <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d1dd      	bne.n	8007944 <_malloc_r+0x64>
 8007988:	e7cf      	b.n	800792a <_malloc_r+0x4a>
 800798a:	bf00      	nop
 800798c:	200003f4 	.word	0x200003f4
 8007990:	200003f8 	.word	0x200003f8

08007994 <__sfputc_r>:
 8007994:	6893      	ldr	r3, [r2, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	b410      	push	{r4}
 800799c:	6093      	str	r3, [r2, #8]
 800799e:	da08      	bge.n	80079b2 <__sfputc_r+0x1e>
 80079a0:	6994      	ldr	r4, [r2, #24]
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	db01      	blt.n	80079aa <__sfputc_r+0x16>
 80079a6:	290a      	cmp	r1, #10
 80079a8:	d103      	bne.n	80079b2 <__sfputc_r+0x1e>
 80079aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ae:	f7fe ba47 	b.w	8005e40 <__swbuf_r>
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	1c58      	adds	r0, r3, #1
 80079b6:	6010      	str	r0, [r2, #0]
 80079b8:	7019      	strb	r1, [r3, #0]
 80079ba:	4608      	mov	r0, r1
 80079bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <__sfputs_r>:
 80079c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	18d5      	adds	r5, r2, r3
 80079cc:	42ac      	cmp	r4, r5
 80079ce:	d101      	bne.n	80079d4 <__sfputs_r+0x12>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e007      	b.n	80079e4 <__sfputs_r+0x22>
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	463a      	mov	r2, r7
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffda 	bl	8007994 <__sfputc_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d1f3      	bne.n	80079cc <__sfputs_r+0xa>
 80079e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e8 <_vfiprintf_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460d      	mov	r5, r1
 80079ee:	b09d      	sub	sp, #116	; 0x74
 80079f0:	4614      	mov	r4, r2
 80079f2:	4698      	mov	r8, r3
 80079f4:	4606      	mov	r6, r0
 80079f6:	b118      	cbz	r0, 8007a00 <_vfiprintf_r+0x18>
 80079f8:	6983      	ldr	r3, [r0, #24]
 80079fa:	b90b      	cbnz	r3, 8007a00 <_vfiprintf_r+0x18>
 80079fc:	f7ff fa72 	bl	8006ee4 <__sinit>
 8007a00:	4b89      	ldr	r3, [pc, #548]	; (8007c28 <_vfiprintf_r+0x240>)
 8007a02:	429d      	cmp	r5, r3
 8007a04:	d11b      	bne.n	8007a3e <_vfiprintf_r+0x56>
 8007a06:	6875      	ldr	r5, [r6, #4]
 8007a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d405      	bmi.n	8007a1a <_vfiprintf_r+0x32>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_vfiprintf_r+0x32>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f7ff fb08 	bl	800702a <__retarget_lock_acquire_recursive>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	071b      	lsls	r3, r3, #28
 8007a1e:	d501      	bpl.n	8007a24 <_vfiprintf_r+0x3c>
 8007a20:	692b      	ldr	r3, [r5, #16]
 8007a22:	b9eb      	cbnz	r3, 8007a60 <_vfiprintf_r+0x78>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7fe fa5c 	bl	8005ee4 <__swsetup_r>
 8007a2c:	b1c0      	cbz	r0, 8007a60 <_vfiprintf_r+0x78>
 8007a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a30:	07dc      	lsls	r4, r3, #31
 8007a32:	d50e      	bpl.n	8007a52 <_vfiprintf_r+0x6a>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b01d      	add	sp, #116	; 0x74
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	4b7b      	ldr	r3, [pc, #492]	; (8007c2c <_vfiprintf_r+0x244>)
 8007a40:	429d      	cmp	r5, r3
 8007a42:	d101      	bne.n	8007a48 <_vfiprintf_r+0x60>
 8007a44:	68b5      	ldr	r5, [r6, #8]
 8007a46:	e7df      	b.n	8007a08 <_vfiprintf_r+0x20>
 8007a48:	4b79      	ldr	r3, [pc, #484]	; (8007c30 <_vfiprintf_r+0x248>)
 8007a4a:	429d      	cmp	r5, r3
 8007a4c:	bf08      	it	eq
 8007a4e:	68f5      	ldreq	r5, [r6, #12]
 8007a50:	e7da      	b.n	8007a08 <_vfiprintf_r+0x20>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	0598      	lsls	r0, r3, #22
 8007a56:	d4ed      	bmi.n	8007a34 <_vfiprintf_r+0x4c>
 8007a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5a:	f7ff fae7 	bl	800702c <__retarget_lock_release_recursive>
 8007a5e:	e7e9      	b.n	8007a34 <_vfiprintf_r+0x4c>
 8007a60:	2300      	movs	r3, #0
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	2320      	movs	r3, #32
 8007a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a6e:	2330      	movs	r3, #48	; 0x30
 8007a70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c34 <_vfiprintf_r+0x24c>
 8007a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a78:	f04f 0901 	mov.w	r9, #1
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	469a      	mov	sl, r3
 8007a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a84:	b10a      	cbz	r2, 8007a8a <_vfiprintf_r+0xa2>
 8007a86:	2a25      	cmp	r2, #37	; 0x25
 8007a88:	d1f9      	bne.n	8007a7e <_vfiprintf_r+0x96>
 8007a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8e:	d00b      	beq.n	8007aa8 <_vfiprintf_r+0xc0>
 8007a90:	465b      	mov	r3, fp
 8007a92:	4622      	mov	r2, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ff93 	bl	80079c2 <__sfputs_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f000 80aa 	beq.w	8007bf6 <_vfiprintf_r+0x20e>
 8007aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa4:	445a      	add	r2, fp
 8007aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80a2 	beq.w	8007bf6 <_vfiprintf_r+0x20e>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007abc:	f10a 0a01 	add.w	sl, sl, #1
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8007aca:	4654      	mov	r4, sl
 8007acc:	2205      	movs	r2, #5
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4858      	ldr	r0, [pc, #352]	; (8007c34 <_vfiprintf_r+0x24c>)
 8007ad4:	f7f8 fb84 	bl	80001e0 <memchr>
 8007ad8:	9a04      	ldr	r2, [sp, #16]
 8007ada:	b9d8      	cbnz	r0, 8007b14 <_vfiprintf_r+0x12c>
 8007adc:	06d1      	lsls	r1, r2, #27
 8007ade:	bf44      	itt	mi
 8007ae0:	2320      	movmi	r3, #32
 8007ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae6:	0713      	lsls	r3, r2, #28
 8007ae8:	bf44      	itt	mi
 8007aea:	232b      	movmi	r3, #43	; 0x2b
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af0:	f89a 3000 	ldrb.w	r3, [sl]
 8007af4:	2b2a      	cmp	r3, #42	; 0x2a
 8007af6:	d015      	beq.n	8007b24 <_vfiprintf_r+0x13c>
 8007af8:	9a07      	ldr	r2, [sp, #28]
 8007afa:	4654      	mov	r4, sl
 8007afc:	2000      	movs	r0, #0
 8007afe:	f04f 0c0a 	mov.w	ip, #10
 8007b02:	4621      	mov	r1, r4
 8007b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b08:	3b30      	subs	r3, #48	; 0x30
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d94e      	bls.n	8007bac <_vfiprintf_r+0x1c4>
 8007b0e:	b1b0      	cbz	r0, 8007b3e <_vfiprintf_r+0x156>
 8007b10:	9207      	str	r2, [sp, #28]
 8007b12:	e014      	b.n	8007b3e <_vfiprintf_r+0x156>
 8007b14:	eba0 0308 	sub.w	r3, r0, r8
 8007b18:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	46a2      	mov	sl, r4
 8007b22:	e7d2      	b.n	8007aca <_vfiprintf_r+0xe2>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d19      	adds	r1, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbb      	ittet	lt
 8007b30:	425b      	neglt	r3, r3
 8007b32:	f042 0202 	orrlt.w	r2, r2, #2
 8007b36:	9307      	strge	r3, [sp, #28]
 8007b38:	9307      	strlt	r3, [sp, #28]
 8007b3a:	bfb8      	it	lt
 8007b3c:	9204      	strlt	r2, [sp, #16]
 8007b3e:	7823      	ldrb	r3, [r4, #0]
 8007b40:	2b2e      	cmp	r3, #46	; 0x2e
 8007b42:	d10c      	bne.n	8007b5e <_vfiprintf_r+0x176>
 8007b44:	7863      	ldrb	r3, [r4, #1]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d135      	bne.n	8007bb6 <_vfiprintf_r+0x1ce>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5a:	3402      	adds	r4, #2
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c44 <_vfiprintf_r+0x25c>
 8007b62:	7821      	ldrb	r1, [r4, #0]
 8007b64:	2203      	movs	r2, #3
 8007b66:	4650      	mov	r0, sl
 8007b68:	f7f8 fb3a 	bl	80001e0 <memchr>
 8007b6c:	b140      	cbz	r0, 8007b80 <_vfiprintf_r+0x198>
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	eba0 000a 	sub.w	r0, r0, sl
 8007b74:	fa03 f000 	lsl.w	r0, r3, r0
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	4303      	orrs	r3, r0
 8007b7c:	3401      	adds	r4, #1
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b84:	482c      	ldr	r0, [pc, #176]	; (8007c38 <_vfiprintf_r+0x250>)
 8007b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	f7f8 fb28 	bl	80001e0 <memchr>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d03f      	beq.n	8007c14 <_vfiprintf_r+0x22c>
 8007b94:	4b29      	ldr	r3, [pc, #164]	; (8007c3c <_vfiprintf_r+0x254>)
 8007b96:	bb1b      	cbnz	r3, 8007be0 <_vfiprintf_r+0x1f8>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	3307      	adds	r3, #7
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	443b      	add	r3, r7
 8007ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8007baa:	e767      	b.n	8007a7c <_vfiprintf_r+0x94>
 8007bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e7a5      	b.n	8007b02 <_vfiprintf_r+0x11a>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	3401      	adds	r4, #1
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f04f 0c0a 	mov.w	ip, #10
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc8:	3a30      	subs	r2, #48	; 0x30
 8007bca:	2a09      	cmp	r2, #9
 8007bcc:	d903      	bls.n	8007bd6 <_vfiprintf_r+0x1ee>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0c5      	beq.n	8007b5e <_vfiprintf_r+0x176>
 8007bd2:	9105      	str	r1, [sp, #20]
 8007bd4:	e7c3      	b.n	8007b5e <_vfiprintf_r+0x176>
 8007bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e7f0      	b.n	8007bc2 <_vfiprintf_r+0x1da>
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <_vfiprintf_r+0x258>)
 8007be8:	a904      	add	r1, sp, #16
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7fd fc02 	bl	80053f4 <_printf_float>
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	1c78      	adds	r0, r7, #1
 8007bf4:	d1d6      	bne.n	8007ba4 <_vfiprintf_r+0x1bc>
 8007bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bf8:	07d9      	lsls	r1, r3, #31
 8007bfa:	d405      	bmi.n	8007c08 <_vfiprintf_r+0x220>
 8007bfc:	89ab      	ldrh	r3, [r5, #12]
 8007bfe:	059a      	lsls	r2, r3, #22
 8007c00:	d402      	bmi.n	8007c08 <_vfiprintf_r+0x220>
 8007c02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c04:	f7ff fa12 	bl	800702c <__retarget_lock_release_recursive>
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	065b      	lsls	r3, r3, #25
 8007c0c:	f53f af12 	bmi.w	8007a34 <_vfiprintf_r+0x4c>
 8007c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c12:	e711      	b.n	8007a38 <_vfiprintf_r+0x50>
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <_vfiprintf_r+0x258>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7fd fe8c 	bl	800593c <_printf_i>
 8007c24:	e7e4      	b.n	8007bf0 <_vfiprintf_r+0x208>
 8007c26:	bf00      	nop
 8007c28:	080080b0 	.word	0x080080b0
 8007c2c:	080080d0 	.word	0x080080d0
 8007c30:	08008090 	.word	0x08008090
 8007c34:	0800824c 	.word	0x0800824c
 8007c38:	08008256 	.word	0x08008256
 8007c3c:	080053f5 	.word	0x080053f5
 8007c40:	080079c3 	.word	0x080079c3
 8007c44:	08008252 	.word	0x08008252

08007c48 <_sbrk_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	; (8007c64 <_sbrk_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7fa f906 	bl	8001e64 <_sbrk>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_sbrk_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_sbrk_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	2000040c 	.word	0x2000040c

08007c68 <__sread>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	f000 f8e2 	bl	8007e38 <_read_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	bfab      	itete	ge
 8007c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c7c:	181b      	addge	r3, r3, r0
 8007c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c82:	bfac      	ite	ge
 8007c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c86:	81a3      	strhlt	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__swrite>:
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	461f      	mov	r7, r3
 8007c90:	898b      	ldrh	r3, [r1, #12]
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	4616      	mov	r6, r2
 8007c9a:	d505      	bpl.n	8007ca8 <__swrite+0x1e>
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f000 f898 	bl	8007dd8 <_lseek_r>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	f000 b817 	b.w	8007cf0 <_write_r>

08007cc2 <__sseek>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 f885 	bl	8007dd8 <_lseek_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	bf15      	itete	ne
 8007cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cde:	81a3      	strheq	r3, [r4, #12]
 8007ce0:	bf18      	it	ne
 8007ce2:	81a3      	strhne	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__sclose>:
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 b831 	b.w	8007d50 <_close_r>
	...

08007cf0 <_write_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_write_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7fa f89c 	bl	8001e3c <_write>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_write_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_write_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	2000040c 	.word	0x2000040c

08007d14 <__assert_func>:
 8007d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d16:	4614      	mov	r4, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <__assert_func+0x2c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4605      	mov	r5, r0
 8007d20:	68d8      	ldr	r0, [r3, #12]
 8007d22:	b14c      	cbz	r4, 8007d38 <__assert_func+0x24>
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <__assert_func+0x30>)
 8007d26:	9100      	str	r1, [sp, #0]
 8007d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d2c:	4906      	ldr	r1, [pc, #24]	; (8007d48 <__assert_func+0x34>)
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f000 f81e 	bl	8007d70 <fiprintf>
 8007d34:	f000 f89f 	bl	8007e76 <abort>
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <__assert_func+0x38>)
 8007d3a:	461c      	mov	r4, r3
 8007d3c:	e7f3      	b.n	8007d26 <__assert_func+0x12>
 8007d3e:	bf00      	nop
 8007d40:	2000000c 	.word	0x2000000c
 8007d44:	0800825d 	.word	0x0800825d
 8007d48:	0800826a 	.word	0x0800826a
 8007d4c:	08008298 	.word	0x08008298

08007d50 <_close_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	; (8007d6c <_close_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7fa f839 	bl	8001dd2 <_close>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_close_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_close_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	2000040c 	.word	0x2000040c

08007d70 <fiprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b503      	push	{r0, r1, lr}
 8007d74:	4601      	mov	r1, r0
 8007d76:	ab03      	add	r3, sp, #12
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <fiprintf+0x20>)
 8007d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7e:	6800      	ldr	r0, [r0, #0]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	f7ff fe31 	bl	80079e8 <_vfiprintf_r>
 8007d86:	b002      	add	sp, #8
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	2000000c 	.word	0x2000000c

08007d94 <_fstat_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_fstat_r+0x20>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f7fa f822 	bl	8001dea <_fstat>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d102      	bne.n	8007db0 <_fstat_r+0x1c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b103      	cbz	r3, 8007db0 <_fstat_r+0x1c>
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	2000040c 	.word	0x2000040c

08007db8 <_isatty_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d06      	ldr	r5, [pc, #24]	; (8007dd4 <_isatty_r+0x1c>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7fa f821 	bl	8001e0a <_isatty>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_isatty_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_isatty_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	2000040c 	.word	0x2000040c

08007dd8 <_lseek_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	; (8007df8 <_lseek_r+0x20>)
 8007ddc:	4604      	mov	r4, r0
 8007dde:	4608      	mov	r0, r1
 8007de0:	4611      	mov	r1, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f7fa f81a 	bl	8001e20 <_lseek>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_lseek_r+0x1e>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_lseek_r+0x1e>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	2000040c 	.word	0x2000040c

08007dfc <__ascii_mbtowc>:
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	b901      	cbnz	r1, 8007e02 <__ascii_mbtowc+0x6>
 8007e00:	a901      	add	r1, sp, #4
 8007e02:	b142      	cbz	r2, 8007e16 <__ascii_mbtowc+0x1a>
 8007e04:	b14b      	cbz	r3, 8007e1a <__ascii_mbtowc+0x1e>
 8007e06:	7813      	ldrb	r3, [r2, #0]
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	7812      	ldrb	r2, [r2, #0]
 8007e0c:	1e10      	subs	r0, r2, #0
 8007e0e:	bf18      	it	ne
 8007e10:	2001      	movne	r0, #1
 8007e12:	b002      	add	sp, #8
 8007e14:	4770      	bx	lr
 8007e16:	4610      	mov	r0, r2
 8007e18:	e7fb      	b.n	8007e12 <__ascii_mbtowc+0x16>
 8007e1a:	f06f 0001 	mvn.w	r0, #1
 8007e1e:	e7f8      	b.n	8007e12 <__ascii_mbtowc+0x16>

08007e20 <__malloc_lock>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__malloc_lock+0x8>)
 8007e22:	f7ff b902 	b.w	800702a <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000404 	.word	0x20000404

08007e2c <__malloc_unlock>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__malloc_unlock+0x8>)
 8007e2e:	f7ff b8fd 	b.w	800702c <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000404 	.word	0x20000404

08007e38 <_read_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d07      	ldr	r5, [pc, #28]	; (8007e58 <_read_r+0x20>)
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4611      	mov	r1, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f7f9 ffa6 	bl	8001d98 <_read>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_read_r+0x1e>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_read_r+0x1e>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	2000040c 	.word	0x2000040c

08007e5c <__ascii_wctomb>:
 8007e5c:	b149      	cbz	r1, 8007e72 <__ascii_wctomb+0x16>
 8007e5e:	2aff      	cmp	r2, #255	; 0xff
 8007e60:	bf85      	ittet	hi
 8007e62:	238a      	movhi	r3, #138	; 0x8a
 8007e64:	6003      	strhi	r3, [r0, #0]
 8007e66:	700a      	strbls	r2, [r1, #0]
 8007e68:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e6c:	bf98      	it	ls
 8007e6e:	2001      	movls	r0, #1
 8007e70:	4770      	bx	lr
 8007e72:	4608      	mov	r0, r1
 8007e74:	4770      	bx	lr

08007e76 <abort>:
 8007e76:	b508      	push	{r3, lr}
 8007e78:	2006      	movs	r0, #6
 8007e7a:	f000 f82b 	bl	8007ed4 <raise>
 8007e7e:	2001      	movs	r0, #1
 8007e80:	f7f9 ff80 	bl	8001d84 <_exit>

08007e84 <_raise_r>:
 8007e84:	291f      	cmp	r1, #31
 8007e86:	b538      	push	{r3, r4, r5, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	d904      	bls.n	8007e98 <_raise_r+0x14>
 8007e8e:	2316      	movs	r3, #22
 8007e90:	6003      	str	r3, [r0, #0]
 8007e92:	f04f 30ff 	mov.w	r0, #4294967295
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e9a:	b112      	cbz	r2, 8007ea2 <_raise_r+0x1e>
 8007e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ea0:	b94b      	cbnz	r3, 8007eb6 <_raise_r+0x32>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f830 	bl	8007f08 <_getpid_r>
 8007ea8:	462a      	mov	r2, r5
 8007eaa:	4601      	mov	r1, r0
 8007eac:	4620      	mov	r0, r4
 8007eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb2:	f000 b817 	b.w	8007ee4 <_kill_r>
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d00a      	beq.n	8007ed0 <_raise_r+0x4c>
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	d103      	bne.n	8007ec6 <_raise_r+0x42>
 8007ebe:	2316      	movs	r3, #22
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	e7e7      	b.n	8007e96 <_raise_r+0x12>
 8007ec6:	2400      	movs	r4, #0
 8007ec8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ecc:	4628      	mov	r0, r5
 8007ece:	4798      	blx	r3
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e7e0      	b.n	8007e96 <_raise_r+0x12>

08007ed4 <raise>:
 8007ed4:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <raise+0xc>)
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	f7ff bfd3 	b.w	8007e84 <_raise_r>
 8007ede:	bf00      	nop
 8007ee0:	2000000c 	.word	0x2000000c

08007ee4 <_kill_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4d07      	ldr	r5, [pc, #28]	; (8007f04 <_kill_r+0x20>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	f7f9 ff37 	bl	8001d64 <_kill>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	d102      	bne.n	8007f00 <_kill_r+0x1c>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	b103      	cbz	r3, 8007f00 <_kill_r+0x1c>
 8007efe:	6023      	str	r3, [r4, #0]
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	bf00      	nop
 8007f04:	2000040c 	.word	0x2000040c

08007f08 <_getpid_r>:
 8007f08:	f7f9 bf24 	b.w	8001d54 <_getpid>

08007f0c <_init>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

08007f18 <_fini>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr
