
NUCLEO-F303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008e28  08008e28  00018e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a4  080092a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080092a4  080092a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092a4  080092a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001dc  0800948c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800948c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250c7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003802  00000000  00000000  000452d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00048ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00049bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224af  00000000  00000000  0004ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173e6  00000000  00000000  0006d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba7b3  00000000  00000000  000844a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ec58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c8  00000000  00000000  0013ecac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e0c 	.word	0x08008e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008e0c 	.word	0x08008e0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c52:	ed97 0a01 	vldr	s0, [r7, #4]
 8000c56:	f005 f99d 	bl	8005f94 <atanf>
 8000c5a:	eef0 7a40 	vmov.f32	s15, s0
 8000c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_ZN8AttitudeC1Ev>:
#include "attitude_est.hpp"

Attitude::Attitude() :
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
		mpu1(1), mpu2(2), init_flag(false) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f926 	bl	8000ec4 <_ZN6KalmanC1Ev>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3328      	adds	r3, #40	; 0x28
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fc3c 	bl	80014fc <_ZN7MPU6500C1Ei>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	335c      	adds	r3, #92	; 0x5c
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fc36 	bl	80014fc <_ZN7MPU6500C1Ei>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <_ZN8AttitudeC1Ev+0x44>)
 8000c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	41100000 	.word	0x41100000

08000cb0 <_ZN8Attitude4InitEv>:

void Attitude::Init() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4834      	ldr	r0, [pc, #208]	; (8000d90 <_ZN8Attitude4InitEv+0xe0>)
 8000cbe:	f002 faa9 	bl	8003214 <HAL_GPIO_WritePin>
	mpu1.MPU6500_Init();
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3328      	adds	r3, #40	; 0x28
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fcba 	bl	8001640 <_ZN7MPU650012MPU6500_InitEv>
	mpu2.MPU6500_Init();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	335c      	adds	r3, #92	; 0x5c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fcb5 	bl	8001640 <_ZN7MPU650012MPU6500_InitEv>
	mpu1.MPU6500_OffsetCalc();
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3328      	adds	r3, #40	; 0x28
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fd1c 	bl	8001718 <_ZN7MPU650018MPU6500_OffsetCalcEv>
	mpu2.MPU6500_OffsetCalc();
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	335c      	adds	r3, #92	; 0x5c
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fd17 	bl	8001718 <_ZN7MPU650018MPU6500_OffsetCalcEv>
	mpu1.Get_MPU6500_Data();
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3328      	adds	r3, #40	; 0x28
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fe92 	bl	8001a18 <_ZN7MPU650016Get_MPU6500_DataEv>
	mpu2.Get_MPU6500_Data();
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	335c      	adds	r3, #92	; 0x5c
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fe8d 	bl	8001a18 <_ZN7MPU650016Get_MPU6500_DataEv>

	mx = mpu1.az - mu * mpu2.az;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8000d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	my = mpu1.ay - mu * mpu2.ay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8000d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	theta_b = atan(-mx / my);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000d44:	eeb1 7a67 	vneg.f32	s14, s15
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8000d4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d52:	eeb0 0a66 	vmov.f32	s0, s13
 8000d56:	f7ff ff77 	bl	8000c48 <_ZSt4atanf>
 8000d5a:	eef0 7a40 	vmov.f32	s15, s0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	kalman.setAngle(theta_b);
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8000d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d70:	4610      	mov	r0, r2
 8000d72:	f000 f8d9 	bl	8000f28 <_ZN6Kalman8setAngleEf>

	init_flag = true;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <_ZN8Attitude4InitEv+0xe0>)
 8000d84:	f002 fa46 	bl	8003214 <HAL_GPIO_WritePin>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	48000400 	.word	0x48000400

08000d94 <_ZN8Attitude14GetEstAttitudeEv>:

std::array<float, 2> Attitude::GetEstAttitude() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
	mpu1.Get_MPU6500_Data();
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3328      	adds	r3, #40	; 0x28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fe39 	bl	8001a18 <_ZN7MPU650016Get_MPU6500_DataEv>
	mpu2.Get_MPU6500_Data();
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	335c      	adds	r3, #92	; 0x5c
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fe34 	bl	8001a18 <_ZN7MPU650016Get_MPU6500_DataEv>

	mx = mpu1.az - mu * mpu2.az;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8000dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	my = mpu1.ay - mu * mpu2.ay;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8000de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	theta_b = atan(-mx / my);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000df6:	eeb1 7a67 	vneg.f32	s14, s15
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8000e00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e04:	eeb0 0a66 	vmov.f32	s0, s13
 8000e08:	f7ff ff1e 	bl	8000c48 <_ZSt4atanf>
 8000e0c:	eef0 7a40 	vmov.f32	s15, s0
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	dot_theta_b = 0.5 * (mpu1.gx + mpu2.gx);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8000e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
//	est_attitude[0] = kalman.getAngle(theta_b, dot_theta_b, 0.01);
//	est_attitude[1] = kalman.getRate();
	est_attitude[0] = mpu1.az;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	33a4      	adds	r3, #164	; 0xa4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f824 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	6013      	str	r3, [r2, #0]
	est_attitude[1] = mpu2.az;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	33a4      	adds	r3, #164	; 0xa4
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f81a 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5c:	6013      	str	r3, [r2, #0]

	return est_attitude;
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	32a4      	adds	r2, #164	; 0xa4
 8000e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	ee07 2a10 	vmov	s14, r2
 8000e76:	ee07 3a90 	vmov	s15, r3
}
 8000e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7e:	eef0 0a67 	vmov.f32	s1, s15
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZNSt5arrayIfLj2EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f805 	bl	8000ea6 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "kalman.hpp"

Kalman::Kalman() {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <_ZN6KalmanC1Ev+0x58>)
 8000ed0:	601a      	str	r2, [r3, #0]
    Q_bias = 0.003f;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_ZN6KalmanC1Ev+0x5c>)
 8000ed6:	605a      	str	r2, [r3, #4]
    R_measure = 0.03f;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_ZN6KalmanC1Ev+0x60>)
 8000edc:	609a      	str	r2, [r3, #8]

    angle = 0.0f; // Reset the angle
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    bias = 0.0f; // Reset bias
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
    P[0][1] = 0.0f;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
    P[1][0] = 0.0f;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
    P[1][1] = 0.0f;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
};
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	3a83126f 	.word	0x3a83126f
 8000f20:	3b449ba6 	.word	0x3b449ba6
 8000f24:	3cf5c28f 	.word	0x3cf5c28f

08000f28 <_ZN6Kalman8setAngleEf>:
    P[1][1] -= K[1] * P01_temp;

    return angle;
};

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	ed87 0a00 	vstr	s0, [r7]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_TIM_PeriodElapsedCallback>:
int led_count = 0;
//extern "C" bool init_flag;
bool init_flag = false;
std::array<float, 2> est_data;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d14f      	bne.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		if (init_flag) {
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d04b      	beq.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
			count = (count + 1) % 160;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1c59      	adds	r1, r3, #1
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f68:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6c:	119a      	asrs	r2, r3, #6
 8000f6e:	17cb      	asrs	r3, r1, #31
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	1aca      	subs	r2, r1, r3
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f7e:	601a      	str	r2, [r3, #0]
			if (count == 0) { // time interruption 100Hz
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d11a      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x76>
				est_data = att.GetEstAttitude();
 8000f88:	4821      	ldr	r0, [pc, #132]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f8a:	f7ff ff03 	bl	8000d94 <_ZN8Attitude14GetEstAttitudeEv>
 8000f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f92:	eef0 7a60 	vmov.f32	s15, s1
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f98:	ed83 7a00 	vstr	s14, [r3]
 8000f9c:	edc3 7a01 	vstr	s15, [r3, #4]
				led_count = (led_count + 1) % 100;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fac:	1159      	asrs	r1, r3, #5
 8000fae:	17d3      	asrs	r3, r2, #31
 8000fb0:	1acb      	subs	r3, r1, r3
 8000fb2:	2164      	movs	r1, #100	; 0x64
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fbc:	6013      	str	r3, [r2, #0]
			}
			if (led_count == 0) {
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d113      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0xa6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000fcc:	f002 f922 	bl	8003214 <HAL_GPIO_WritePin>
				printf("%f \r\n", est_data[0]);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fd4:	f7ff ff58 	bl	8000e88 <_ZNSt5arrayIfLj2EEixEj>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fab3 	bl	8000548 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000fe8:	f005 fd4c 	bl	8006a84 <iprintf>
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
			}
		}
	}
}
 8000fec:	e004      	b.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0xb0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ff4:	f002 f90e 	bl	8003214 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000035c 	.word	0x2000035c
 8001004:	20000434 	.word	0x20000434
 8001008:	2000042c 	.word	0x2000042c
 800100c:	66666667 	.word	0x66666667
 8001010:	200001f8 	.word	0x200001f8
 8001014:	20000438 	.word	0x20000438
 8001018:	20000430 	.word	0x20000430
 800101c:	51eb851f 	.word	0x51eb851f
 8001020:	48000400 	.word	0x48000400
 8001024:	08008e28 	.word	0x08008e28

08001028 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <main+0x48>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fdb3 	bl	8006ba0 <setbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800103a:	f001 f85d 	bl	80020f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800103e:	f000 f821 	bl	8001084 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001042:	f000 f9d7 	bl	80013f4 <_ZL12MX_GPIO_Initv>
	MX_ADC1_Init();
 8001046:	f000 f885 	bl	8001154 <_ZL12MX_ADC1_Initv>
	MX_SPI1_Init();
 800104a:	f000 f901 	bl	8001250 <_ZL12MX_SPI1_Initv>
	MX_TIM3_Init();
 800104e:	f000 f941 	bl	80012d4 <_ZL12MX_TIM3_Initv>
	MX_USART2_UART_Init();
 8001052:	f000 f99b 	bl	800138c <_ZL19MX_USART2_UART_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <main+0x4c>)
 8001058:	f003 ffca 	bl	8004ff0 <HAL_TIM_Base_Start_IT>
	att.Init();
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <main+0x50>)
 800105e:	f7ff fe27 	bl	8000cb0 <_ZN8Attitude4InitEv>
	init_flag = true;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <main+0x54>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
	printf("Init finish \r\n");
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <main+0x58>)
 800106a:	f005 fd91 	bl	8006b90 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800106e:	e7fe      	b.n	800106e <main+0x46>
 8001070:	2000000c 	.word	0x2000000c
 8001074:	2000035c 	.word	0x2000035c
 8001078:	200001f8 	.word	0x200001f8
 800107c:	20000434 	.word	0x20000434
 8001080:	08008e30 	.word	0x08008e30

08001084 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f005 f884 	bl	80061a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010cc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80010d0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f8b4 	bl	8003244 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <_Z18SystemClock_Configv+0x6c>
		Error_Handler();
 80010ec:	f000 f9e2 	bl	80014b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f002 ffa1 	bl	8004054 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 8001122:	f000 f9c7 	bl	80014b4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f9c4 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf14      	ite	ne
 800113e:	2301      	movne	r3, #1
 8001140:	2300      	moveq	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_Z18SystemClock_Configv+0xc8>
		Error_Handler();
 8001148:	f000 f9b4 	bl	80014b4 <Error_Handler>
	}
}
 800114c:	bf00      	nop
 800114e:	3758      	adds	r7, #88	; 0x58
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 8001178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800117c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 8001192:	2200      	movs	r2, #0
 8001194:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011d0:	481e      	ldr	r0, [pc, #120]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011d2:	f001 f81b 	bl	800220c <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <_ZL12MX_ADC1_Initv+0x96>
		Error_Handler();
 80011e6:	f000 f965 	bl	80014b4 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4815      	ldr	r0, [pc, #84]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 80011f6:	f001 fc5d 	bl	8002ab4 <HAL_ADCEx_MultiModeConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <_ZL12MX_ADC1_Initv+0xba>
		Error_Handler();
 800120a:	f000 f953 	bl	80014b4 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001212:	2301      	movs	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <_ZL12MX_ADC1_Initv+0xf8>)
 800122c:	f001 f980 	bl	8002530 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <_ZL12MX_ADC1_Initv+0xf0>
		Error_Handler();
 8001240:	f000 f938 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002a8 	.word	0x200002a8

08001250 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <_ZL12MX_SPI1_Initv+0x80>)
 8001258:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 800125c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001260:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 800126a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800126e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001272:	2202      	movs	r2, #2
 8001274:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 800127e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001282:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 800129e:	2207      	movs	r2, #7
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <_ZL12MX_SPI1_Initv+0x7c>)
 80012b0:	f003 fa2c 	bl	800470c <HAL_SPI_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 80012c4:	f000 f8f6 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002f8 	.word	0x200002f8
 80012d0:	40013000 	.word	0x40013000

080012d4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <_ZL12MX_TIM3_Initv+0xb4>)
 80012f6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 30;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 80012fa:	221e      	movs	r2, #30
 80012fc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100 - 1;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 8001306:	2263      	movs	r2, #99	; 0x63
 8001308:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 8001318:	f003 fe12 	bl	8004f40 <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf14      	ite	ne
 8001322:	2301      	movne	r3, #1
 8001324:	2300      	moveq	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <_ZL12MX_TIM3_Initv+0x5c>
		Error_Handler();
 800132c:	f000 f8c2 	bl	80014b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 800133e:	f003 ffd2 	bl	80052e6 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZL12MX_TIM3_Initv+0x82>
		Error_Handler();
 8001352:	f000 f8af 	bl	80014b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <_ZL12MX_TIM3_Initv+0xb0>)
 8001364:	f004 f9c2 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
			!= HAL_OK) {
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_ZL12MX_TIM3_Initv+0xa8>
		Error_Handler();
 8001378:	f000 f89c 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000035c 	.word	0x2000035c
 8001388:	40000400 	.word	0x40000400

0800138c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001394:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x60>)
 80013d0:	f004 fa18 	bl	8005804 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf14      	ite	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	2300      	moveq	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <_ZL19MX_USART2_UART_Initv+0x5c>
		Error_Handler();
 80013e4:	f000 f866 	bl	80014b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003a8 	.word	0x200003a8
 80013f0:	40004400 	.word	0x40004400

080013f4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a27      	ldr	r2, [pc, #156]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6153      	str	r3, [r2, #20]
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <_ZL12MX_GPIO_Initv+0xb8>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2118      	movs	r1, #24
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f001 fedb 	bl	8003214 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	4813      	ldr	r0, [pc, #76]	; (80014b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8001464:	f001 fed6 	bl	8003214 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA3 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8001468:	2318      	movs	r3, #24
 800146a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f001 fd55 	bl	8002f30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001486:	2308      	movs	r3, #8
 8001488:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <_ZL12MX_GPIO_Initv+0xbc>)
 800149e:	f001 fd47 	bl	8002f30 <HAL_GPIO_Init>

}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400

080014b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d102      	bne.n	80014e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Attitude att;
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80014dc:	f7ff fbc4 	bl	8000c68 <_ZN8AttitudeC1Ev>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001f8 	.word	0x200001f8

080014ec <_GLOBAL__sub_I_att>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ffe3 	bl	80014c0 <_Z41__static_initialization_and_destruction_0ii>
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZN7MPU6500C1Ei>:
#include "mpu6500.hpp"
extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

MPU6500::MPU6500(int cs) :
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
		cs(cs){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	619a      	str	r2, [r3, #24]
}
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <_ZN7MPU65009read_byteEhi>:
uint8_t MPU6500::read_byte(uint8_t reg, int cs) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	460b      	mov	r3, r1
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001530:	b2db      	uxtb	r3, r3
 8001532:	743b      	strb	r3, [r7, #16]
	tx_data[1] = 0x00;  // dummy
 8001534:	2300      	movs	r3, #0
 8001536:	747b      	strb	r3, [r7, #17]

	if (cs == 1) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d116      	bne.n	800156c <_ZN7MPU65009read_byteEhi+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f001 fe65 	bl	8003214 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 800154a:	f107 0214 	add.w	r2, r7, #20
 800154e:	f107 0110 	add.w	r1, r7, #16
 8001552:	2301      	movs	r3, #1
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2302      	movs	r3, #2
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <_ZN7MPU65009read_byteEhi+0x8c>)
 800155a:	f003 f97a 	bl	8004852 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2110      	movs	r1, #16
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f001 fe55 	bl	8003214 <HAL_GPIO_WritePin>
 800156a:	e018      	b.n	800159e <_ZN7MPU65009read_byteEhi+0x82>
	} else if (cs == 2) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d115      	bne.n	800159e <_ZN7MPU65009read_byteEhi+0x82>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2108      	movs	r1, #8
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f001 fe4b 	bl	8003214 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 800157e:	f107 0214 	add.w	r2, r7, #20
 8001582:	f107 0110 	add.w	r1, r7, #16
 8001586:	2301      	movs	r3, #1
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <_ZN7MPU65009read_byteEhi+0x8c>)
 800158e:	f003 f960 	bl	8004852 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2108      	movs	r1, #8
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fe3b 	bl	8003214 <HAL_GPIO_WritePin>
	}

	return rx_data[1];
 800159e:	7d7b      	ldrb	r3, [r7, #21]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002f8 	.word	0x200002f8

080015ac <_ZN7MPU650010write_byteEhhi>:

void MPU6500::write_byte(uint8_t reg, uint8_t data, int cs) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	72fb      	strb	r3, [r7, #11]
 80015ba:	4613      	mov	r3, r2
 80015bc:	72bb      	strb	r3, [r7, #10]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg & 0x7F;
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	743b      	strb	r3, [r7, #16]
//   tx_data[0] = reg | 0x00;
	tx_data[1] = data;  // write data
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	747b      	strb	r3, [r7, #17]

	if (cs == 1) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d116      	bne.n	8001600 <_ZN7MPU650010write_byteEhhi+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2110      	movs	r1, #16
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f001 fe1b 	bl	8003214 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 80015de:	f107 0214 	add.w	r2, r7, #20
 80015e2:	f107 0110 	add.w	r1, r7, #16
 80015e6:	2301      	movs	r3, #1
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <_ZN7MPU650010write_byteEhhi+0x90>)
 80015ee:	f003 f930 	bl	8004852 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2110      	movs	r1, #16
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f001 fe0b 	bl	8003214 <HAL_GPIO_WritePin>
	} else if (cs == 2) {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	}
}
 80015fe:	e018      	b.n	8001632 <_ZN7MPU650010write_byteEhhi+0x86>
	} else if (cs == 2) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d115      	bne.n	8001632 <_ZN7MPU650010write_byteEhhi+0x86>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2108      	movs	r1, #8
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f001 fe01 	bl	8003214 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	f107 0110 	add.w	r1, r7, #16
 800161a:	2301      	movs	r3, #1
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2302      	movs	r3, #2
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <_ZN7MPU650010write_byteEhhi+0x90>)
 8001622:	f003 f916 	bl	8004852 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	2108      	movs	r1, #8
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f001 fdf1 	bl	8003214 <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002f8 	.word	0x200002f8

08001640 <_ZN7MPU650012MPU6500_InitEv>:

void MPU6500::MPU6500_Init() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	uint8_t who_am_i;

	HAL_Delay(100);             // wait start up
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	f000 fdbb 	bl	80021c4 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I, cs); // read who am i
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	461a      	mov	r2, r3
 8001654:	2175      	movs	r1, #117	; 0x75
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff60 	bl	800151c <_ZN7MPU65009read_byteEhi>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
	printf("who_am_i_%d = 0x%x\r\n", cs, who_am_i); // check who am i value
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	4619      	mov	r1, r3
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <_ZN7MPU650012MPU6500_InitEv+0xcc>)
 800166a:	f005 fa0b 	bl	8006a84 <iprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*) who_am_i, sizeof(who_am_i), 3000);
	HAL_Delay(10);
 800166e:	200a      	movs	r0, #10
 8001670:	f000 fda8 	bl	80021c4 <HAL_Delay>
	who_am_i = read_byte(WHO_AM_I, cs); // read who am i
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	461a      	mov	r2, r3
 800167a:	2175      	movs	r1, #117	; 0x75
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff4d 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
		printf("who_am_i_%d = 0x%x\r\n", cs, who_am_i); // check who am i value
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	4619      	mov	r1, r3
 800168e:	481f      	ldr	r0, [pc, #124]	; (800170c <_ZN7MPU650012MPU6500_InitEv+0xcc>)
 8001690:	f005 f9f8 	bl	8006a84 <iprintf>
	//	HAL_UART_Transmit(&huart2, (uint8_t*) who_am_i, sizeof(who_am_i), 3000);
		HAL_Delay(10);
 8001694:	200a      	movs	r0, #10
 8001696:	f000 fd95 	bl	80021c4 <HAL_Delay>
	if (who_am_i != 0x70) {
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b70      	cmp	r3, #112	; 0x70
 800169e:	d005      	beq.n	80016ac <_ZN7MPU650012MPU6500_InitEv+0x6c>
		printf("mpu6500_%d error \r\n", cs);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4619      	mov	r1, r3
 80016a6:	481a      	ldr	r0, [pc, #104]	; (8001710 <_ZN7MPU650012MPU6500_InitEv+0xd0>)
 80016a8:	f005 f9ec 	bl	8006a84 <iprintf>
	}

	HAL_Delay(50);
 80016ac:	2032      	movs	r0, #50	; 0x32
 80016ae:	f000 fd89 	bl	80021c4 <HAL_Delay>
	write_byte(PWR_MGMT_1, 0x00, cs); // set pwr_might (20MHz)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2200      	movs	r2, #0
 80016b8:	216b      	movs	r1, #107	; 0x6b
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff76 	bl	80015ac <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f000 fd7f 	bl	80021c4 <HAL_Delay>
	write_byte(CONFIG, 0x00, cs); // set config (FSYNCはNC)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2200      	movs	r2, #0
 80016cc:	211a      	movs	r1, #26
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff6c 	bl	80015ac <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80016d4:	2032      	movs	r0, #50	; 0x32
 80016d6:	f000 fd75 	bl	80021c4 <HAL_Delay>
	write_byte(GYRO_CONFIG, 0x18, cs); // set gyro config (2000dps)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2218      	movs	r2, #24
 80016e0:	211b      	movs	r1, #27
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff62 	bl	80015ac <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80016e8:	2032      	movs	r0, #50	; 0x32
 80016ea:	f000 fd6b 	bl	80021c4 <HAL_Delay>
	write_byte(ACCEL_CONFIG, 0x00, cs); // set accel config (2g)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2200      	movs	r2, #0
 80016f4:	211c      	movs	r1, #28
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff58 	bl	80015ac <_ZN7MPU650010write_byteEhhi>
	HAL_Delay(50);
 80016fc:	2032      	movs	r0, #50	; 0x32
 80016fe:	f000 fd61 	bl	80021c4 <HAL_Delay>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	08008e40 	.word	0x08008e40
 8001710:	08008e58 	.word	0x08008e58
 8001714:	00000000 	.word	0x00000000

08001718 <_ZN7MPU650018MPU6500_OffsetCalcEv>:

void MPU6500::MPU6500_OffsetCalc() {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08d      	sub	sp, #52	; 0x34
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;
	float ax_sum = 0;
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ay_sum = 0;
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
	float az_sum = 0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
	float gx_sum = 0;
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
	float gy_sum = 0;
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
	float gz_sum = 0;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < 1000; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800174e:	f280 8121 	bge.w	8001994 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x27c>
		// H:8bit shift, Link h and l
		ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	461a      	mov	r2, r3
 8001758:	213b      	movs	r1, #59	; 0x3b
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fede 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001760:	4603      	mov	r3, r0
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_XOUT_L, cs));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	461a      	mov	r2, r3
 800176e:	213c      	movs	r1, #60	; 0x3c
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fed3 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001776:	4603      	mov	r3, r0
 8001778:	b29b      	uxth	r3, r3
 800177a:	4323      	orrs	r3, r4
 800177c:	b29b      	uxth	r3, r3
		ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 800177e:	827b      	strh	r3, [r7, #18]
		ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	461a      	mov	r2, r3
 8001786:	213d      	movs	r1, #61	; 0x3d
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fec7 	bl	800151c <_ZN7MPU65009read_byteEhi>
 800178e:	4603      	mov	r3, r0
 8001790:	b29b      	uxth	r3, r3
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_YOUT_L, cs));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	461a      	mov	r2, r3
 800179c:	213e      	movs	r1, #62	; 0x3e
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff febc 	bl	800151c <_ZN7MPU65009read_byteEhi>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4323      	orrs	r3, r4
 80017aa:	b29b      	uxth	r3, r3
		ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 80017ac:	823b      	strh	r3, [r7, #16]
		az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	461a      	mov	r2, r3
 80017b4:	213f      	movs	r1, #63	; 0x3f
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff feb0 	bl	800151c <_ZN7MPU65009read_byteEhi>
 80017bc:	4603      	mov	r3, r0
 80017be:	b29b      	uxth	r3, r3
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(ACCEL_ZOUT_L, cs));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	461a      	mov	r2, r3
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fea5 	bl	800151c <_ZN7MPU65009read_byteEhi>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4323      	orrs	r3, r4
 80017d8:	b29b      	uxth	r3, r3
		az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 80017da:	81fb      	strh	r3, [r7, #14]
		gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	461a      	mov	r2, r3
 80017e2:	2143      	movs	r1, #67	; 0x43
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe99 	bl	800151c <_ZN7MPU65009read_byteEhi>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_XOUT_L, cs));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	461a      	mov	r2, r3
 80017f8:	2144      	movs	r1, #68	; 0x44
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe8e 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001800:	4603      	mov	r3, r0
 8001802:	b29b      	uxth	r3, r3
 8001804:	4323      	orrs	r3, r4
 8001806:	b29b      	uxth	r3, r3
		gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 8001808:	81bb      	strh	r3, [r7, #12]
		gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	461a      	mov	r2, r3
 8001810:	2145      	movs	r1, #69	; 0x45
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fe82 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001818:	4603      	mov	r3, r0
 800181a:	b29b      	uxth	r3, r3
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_YOUT_L, cs));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	461a      	mov	r2, r3
 8001826:	2146      	movs	r1, #70	; 0x46
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fe77 	bl	800151c <_ZN7MPU65009read_byteEhi>
 800182e:	4603      	mov	r3, r0
 8001830:	b29b      	uxth	r3, r3
 8001832:	4323      	orrs	r3, r4
 8001834:	b29b      	uxth	r3, r3
		gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 8001836:	817b      	strh	r3, [r7, #10]
		gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	461a      	mov	r2, r3
 800183e:	2147      	movs	r1, #71	; 0x47
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fe6b 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001846:	4603      	mov	r3, r0
 8001848:	b29b      	uxth	r3, r3
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b29c      	uxth	r4, r3
				| (uint16_t) read_byte(GYRO_ZOUT_L, cs));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	461a      	mov	r2, r3
 8001854:	2148      	movs	r1, #72	; 0x48
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fe60 	bl	800151c <_ZN7MPU65009read_byteEhi>
 800185c:	4603      	mov	r3, r0
 800185e:	b29b      	uxth	r3, r3
 8001860:	4323      	orrs	r3, r4
 8001862:	b29b      	uxth	r3, r3
		gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 8001864:	813b      	strh	r3, [r7, #8]

		ax_sum += (float) (ax_raw / ACCEL_FACTOR);
 8001866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe5a 	bl	8000524 <__aeabi_i2d>
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 8001876:	f7fe ffe9 	bl	800084c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f991 	bl	8000ba8 <__aeabi_d2f>
 8001886:	ee07 0a10 	vmov	s14, r0
 800188a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800188e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001892:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		ay_sum += (float) (ay_raw / ACCEL_FACTOR);
 8001896:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe42 	bl	8000524 <__aeabi_i2d>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 80018a6:	f7fe ffd1 	bl	800084c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f979 	bl	8000ba8 <__aeabi_d2f>
 80018b6:	ee07 0a10 	vmov	s14, r0
 80018ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		az_sum += (float) (az_raw / ACCEL_FACTOR);
 80018c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_i2d>
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f8>)
 80018d6:	f7fe ffb9 	bl	800084c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f961 	bl	8000ba8 <__aeabi_d2f>
 80018e6:	ee07 0a10 	vmov	s14, r0
 80018ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		gx_sum += (float) (gx_raw / GYRO_FACTOR); // dps to deg/sec
 80018f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe12 	bl	8000524 <__aeabi_i2d>
 8001900:	a341      	add	r3, pc, #260	; (adr r3, 8001a08 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe ffa1 	bl	800084c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f949 	bl	8000ba8 <__aeabi_d2f>
 8001916:	ee07 0a10 	vmov	s14, r0
 800191a:	edd7 7a08 	vldr	s15, [r7, #32]
 800191e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001922:	edc7 7a08 	vstr	s15, [r7, #32]
		gy_sum += (float) (gy_raw / GYRO_FACTOR);
 8001926:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdfa 	bl	8000524 <__aeabi_i2d>
 8001930:	a335      	add	r3, pc, #212	; (adr r3, 8001a08 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe ff89 	bl	800084c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f931 	bl	8000ba8 <__aeabi_d2f>
 8001946:	ee07 0a10 	vmov	s14, r0
 800194a:	edd7 7a07 	vldr	s15, [r7, #28]
 800194e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001952:	edc7 7a07 	vstr	s15, [r7, #28]
		gz_sum += (float) (gz_raw / GYRO_FACTOR);
 8001956:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fde2 	bl	8000524 <__aeabi_i2d>
 8001960:	a329      	add	r3, pc, #164	; (adr r3, 8001a08 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2f0>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe ff71 	bl	800084c <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f919 	bl	8000ba8 <__aeabi_d2f>
 8001976:	ee07 0a10 	vmov	s14, r0
 800197a:	edd7 7a06 	vldr	s15, [r7, #24]
 800197e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001982:	edc7 7a06 	vstr	s15, [r7, #24]
		HAL_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fc1c 	bl	80021c4 <HAL_Delay>
	for (int i = 0; i < 1000; i++) {
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e6d9      	b.n	8001748 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x30>
	}
	ax_offset = ax_sum / 1000.0;
 8001994:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001998:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 800199c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	ay_offset = ay_sum / 1000.0;
 80019a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80019ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edc3 7a01 	vstr	s15, [r3, #4]
	az_offset = az_sum / 1000.0;
 80019b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019bc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a02 	vstr	s15, [r3, #8]
	gx_offset = gx_sum / 1000.0;
 80019ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80019d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	edc3 7a03 	vstr	s15, [r3, #12]
	gy_offset = gy_sum / 1000.0;
 80019dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80019e0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edc3 7a04 	vstr	s15, [r3, #16]
	gz_offset = gz_sum / 1000.0;
 80019ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80019f2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a14 <_ZN7MPU650018MPU6500_OffsetCalcEv+0x2fc>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001a00:	bf00      	nop
 8001a02:	3734      	adds	r7, #52	; 0x34
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	66666666 	.word	0x66666666
 8001a0c:	40306666 	.word	0x40306666
 8001a10:	40d00000 	.word	0x40d00000
 8001a14:	447a0000 	.word	0x447a0000

08001a18 <_ZN7MPU650016Get_MPU6500_DataEv>:

void MPU6500::Get_MPU6500_Data() {
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;

	// H:8bit shift, Link h and l
	ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	461a      	mov	r2, r3
 8001a26:	213b      	movs	r1, #59	; 0x3b
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fd77 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_XOUT_L, cs));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	213c      	movs	r1, #60	; 0x3c
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fd6c 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4323      	orrs	r3, r4
 8001a4a:	b29b      	uxth	r3, r3
	ax_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_XOUT_H, cs) << 8)
 8001a4c:	82fb      	strh	r3, [r7, #22]
	ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	461a      	mov	r2, r3
 8001a54:	213d      	movs	r1, #61	; 0x3d
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fd60 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_YOUT_L, cs));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	213e      	movs	r1, #62	; 0x3e
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fd55 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4323      	orrs	r3, r4
 8001a78:	b29b      	uxth	r3, r3
	ay_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_YOUT_H, cs) << 8)
 8001a7a:	82bb      	strh	r3, [r7, #20]
	az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	461a      	mov	r2, r3
 8001a82:	213f      	movs	r1, #63	; 0x3f
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fd49 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(ACCEL_ZOUT_L, cs));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	461a      	mov	r2, r3
 8001a98:	2140      	movs	r1, #64	; 0x40
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fd3e 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4323      	orrs	r3, r4
 8001aa6:	b29b      	uxth	r3, r3
	az_raw = (int16_t) ((uint16_t) (read_byte(ACCEL_ZOUT_H, cs) << 8)
 8001aa8:	827b      	strh	r3, [r7, #18]
	gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2143      	movs	r1, #67	; 0x43
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fd32 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_XOUT_L, cs));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2144      	movs	r1, #68	; 0x44
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fd27 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	b29b      	uxth	r3, r3
	gx_raw = (int16_t) ((uint16_t) (read_byte(GYRO_XOUT_H, cs) << 8)
 8001ad6:	823b      	strh	r3, [r7, #16]
	gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	461a      	mov	r2, r3
 8001ade:	2145      	movs	r1, #69	; 0x45
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fd1b 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_YOUT_L, cs));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2146      	movs	r1, #70	; 0x46
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd10 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4323      	orrs	r3, r4
 8001b02:	b29b      	uxth	r3, r3
	gy_raw = (int16_t) ((uint16_t) (read_byte(GYRO_YOUT_H, cs) << 8)
 8001b04:	81fb      	strh	r3, [r7, #14]
	gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2147      	movs	r1, #71	; 0x47
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fd04 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b29c      	uxth	r4, r3
			| (uint16_t) read_byte(GYRO_ZOUT_L, cs));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	461a      	mov	r2, r3
 8001b22:	2148      	movs	r1, #72	; 0x48
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fcf9 	bl	800151c <_ZN7MPU65009read_byteEhi>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	b29b      	uxth	r3, r3
	gz_raw = (int16_t) ((uint16_t) (read_byte(GYRO_ZOUT_H, cs) << 8)
 8001b32:	81bb      	strh	r3, [r7, #12]

	ax = (float) (ax_raw / ACCEL_FACTOR) - ax_offset;
 8001b34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fcf3 	bl	8000524 <__aeabi_i2d>
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001b44:	f7fe fe82 	bl	800084c <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f82a 	bl	8000ba8 <__aeabi_d2f>
 8001b54:	ee07 0a10 	vmov	s14, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edc3 7a07 	vstr	s15, [r3, #28]
	ay = (float) (ay_raw / ACCEL_FACTOR) - ay_offset;
 8001b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcd9 	bl	8000524 <__aeabi_i2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001b78:	f7fe fe68 	bl	800084c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f810 	bl	8000ba8 <__aeabi_d2f>
 8001b88:	ee07 0a10 	vmov	s14, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edc3 7a08 	vstr	s15, [r3, #32]
	az = (float) (az_raw / ACCEL_FACTOR) - az_offset;
 8001b9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <_ZN7MPU650016Get_MPU6500_DataEv+0x268>)
 8001bac:	f7fe fe4e 	bl	800084c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe fff6 	bl	8000ba8 <__aeabi_d2f>
 8001bbc:	ee07 0a10 	vmov	s14, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	gx = (float) (gx_raw / GYRO_FACTOR) - gx_offset;
 8001bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fca5 	bl	8000524 <__aeabi_i2d>
 8001bda:	a327      	add	r3, pc, #156	; (adr r3, 8001c78 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fe34 	bl	800084c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ffdc 	bl	8000ba8 <__aeabi_d2f>
 8001bf0:	ee07 0a10 	vmov	s14, r0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	gy = (float) (gy_raw / GYRO_FACTOR) - gy_offset;
 8001c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc8b 	bl	8000524 <__aeabi_i2d>
 8001c0e:	a31a      	add	r3, pc, #104	; (adr r3, 8001c78 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fe1a 	bl	800084c <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffc2 	bl	8000ba8 <__aeabi_d2f>
 8001c24:	ee07 0a10 	vmov	s14, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	gz = (float) (gz_raw / GYRO_FACTOR) - gz_offset;
 8001c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc71 	bl	8000524 <__aeabi_i2d>
 8001c42:	a30d      	add	r3, pc, #52	; (adr r3, 8001c78 <_ZN7MPU650016Get_MPU6500_DataEv+0x260>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fe00 	bl	800084c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffa8 	bl	8000ba8 <__aeabi_d2f>
 8001c58:	ee07 0a10 	vmov	s14, r0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	f3af 8000 	nop.w
 8001c78:	66666666 	.word	0x66666666
 8001c7c:	40306666 	.word	0x40306666
 8001c80:	40d00000 	.word	0x40d00000

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_MspInit+0x44>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_MspInit+0x44>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_MspInit+0x44>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_MspInit+0x44>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cec:	d124      	bne.n	8001d38 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	6153      	str	r3, [r2, #20]
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_ADC_MspInit+0x74>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f001 f8fc 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_SPI_MspInit+0x7c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d128      	bne.n	8001db8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d70:	6193      	str	r3, [r2, #24]
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_SPI_MspInit+0x80>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d96:	23e0      	movs	r3, #224	; 0xe0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da6:	2305      	movs	r3, #5
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f001 f8bc 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40013000 	.word	0x40013000
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_TIM_Base_MspInit+0x44>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d113      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	201d      	movs	r0, #29
 8001df8:	f001 f863 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dfc:	201d      	movs	r0, #29
 8001dfe:	f001 f87c 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x80>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d129      	bne.n	8001e8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	6153      	str	r3, [r2, #20]
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_UART_MspInit+0x84>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001e66:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e86:	f001 f853 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40021000 	.word	0x40021000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f94c 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM3_IRQHandler+0x10>)
 8001ef6:	f003 f8d7 	bl	80050a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000035c 	.word	0x2000035c

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f1e:	f004 f915 	bl	800614c <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
	return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f46:	e7fe      	b.n	8001f46 <_exit+0x12>

08001f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
	}

return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_write>:
{
	errno = ENOMEM;
	return -1;
}

int _write(int file, char *ptr, int len) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	230a      	movs	r3, #10
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <_write+0x24>)
 8002002:	f003 fc4d 	bl	80058a0 <HAL_UART_Transmit>
	return len;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200003a8 	.word	0x200003a8

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f004 f882 	bl	800614c <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20003000 	.word	0x20003000
 8002074:	00000400 	.word	0x00000400
 8002078:	20000440 	.word	0x20000440
 800207c:	20000460 	.word	0x20000460

08002080 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020aa:	490e      	ldr	r1, [pc, #56]	; (80020e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <LoopForever+0xe>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c0:	4c0b      	ldr	r4, [pc, #44]	; (80020f0 <LoopForever+0x16>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ce:	f7ff ffd7 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f004 f841 	bl	8006158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d6:	f7fe ffa7 	bl	8001028 <main>

080020da <LoopForever>:

LoopForever:
    b LoopForever
 80020da:	e7fe      	b.n	80020da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80020e8:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 80020ec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80020f0:	20000460 	.word	0x20000460

080020f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC1_2_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_Init+0x28>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_Init+0x28>)
 8002102:	f043 0310 	orr.w	r3, r3, #16
 8002106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 fecf 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210e:	2000      	movs	r0, #0
 8002110:	f000 f808 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff fdb6 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000

08002124 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x54>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x58>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fee7 	bl	8002f16 <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00e      	b.n	8002170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d80a      	bhi.n	800216e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f000 feaf 	bl	8002ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <HAL_InitTick+0x5c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000000 	.word	0x20000000
 800217c:	20000008 	.word	0x20000008
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008
 80021a8:	2000044c 	.word	0x2000044c

080021ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000044c 	.word	0x2000044c

080021c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09a      	sub	sp, #104	; 0x68
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e172      	b.n	8002512 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d176      	bne.n	800232c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d152      	bne.n	80022ec <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fd33 	bl	8001ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13b      	bne.n	80022ec <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fce3 	bl	8002c40 <ADC_Disable>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d12f      	bne.n	80022ec <HAL_ADC_Init+0xe0>
 800228c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002290:	2b00      	cmp	r3, #0
 8002292:	d12b      	bne.n	80022ec <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229c:	f023 0302 	bic.w	r3, r3, #2
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022c6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022c8:	4b94      	ldr	r3, [pc, #592]	; (800251c <HAL_ADC_Init+0x310>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a94      	ldr	r2, [pc, #592]	; (8002520 <HAL_ADC_Init+0x314>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9a      	lsrs	r2, r3, #18
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022de:	e002      	b.n	80022e6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f9      	bne.n	80022e0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d110      	bne.n	800232c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f023 0312 	bic.w	r3, r3, #18
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 80df 	bne.w	80024f8 <HAL_ADC_Init+0x2ec>
 800233a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80da 	bne.w	80024f8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 80d2 	bne.w	80024f8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800235c:	f043 0202 	orr.w	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_ADC_Init+0x318>)
 8002366:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002370:	d102      	bne.n	8002378 <HAL_ADC_Init+0x16c>
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_ADC_Init+0x31c>)
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e002      	b.n	800237e <HAL_ADC_Init+0x172>
 8002378:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800237c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_ADC_Init+0x192>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x192>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_ADC_Init+0x194>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11c      	bne.n	80023de <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_Init+0x1ba>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Init+0x1ba>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_ADC_Init+0x1bc>
 80023c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7e5b      	ldrb	r3, [r3, #25]
 80023e2:	035b      	lsls	r3, r3, #13
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e8:	2a01      	cmp	r2, #1
 80023ea:	d002      	beq.n	80023f2 <HAL_ADC_Init+0x1e6>
 80023ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f0:	e000      	b.n	80023f4 <HAL_ADC_Init+0x1e8>
 80023f2:	2200      	movs	r2, #0
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4313      	orrs	r3, r2
 8002402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002404:	4313      	orrs	r3, r2
 8002406:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d11b      	bne.n	800244a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e5b      	ldrb	r3, [r3, #25]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	3b01      	subs	r3, #1
 8002420:	045a      	lsls	r2, r3, #17
 8002422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002424:	4313      	orrs	r3, r2
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	663b      	str	r3, [r7, #96]	; 0x60
 800242c:	e00d      	b.n	800244a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002436:	f043 0220 	orr.w	r2, r3, #32
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	4313      	orrs	r3, r2
 800245c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800245e:	4313      	orrs	r3, r2
 8002460:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800247e:	f023 0302 	bic.w	r3, r3, #2
 8002482:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
 8002488:	039a      	lsls	r2, r3, #14
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4313      	orrs	r3, r2
 8002494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002496:	4313      	orrs	r3, r2
 8002498:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_ADC_Init+0x320>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024aa:	430b      	orrs	r3, r1
 80024ac:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10c      	bne.n	80024d0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f023 010f 	bic.w	r1, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
 80024ce:	e007      	b.n	80024e0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 020f 	bic.w	r2, r2, #15
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
 80024f6:	e00a      	b.n	800250e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f023 0312 	bic.w	r3, r3, #18
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800250e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002512:	4618      	mov	r0, r3
 8002514:	3768      	adds	r7, #104	; 0x68
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000
 8002520:	431bde83 	.word	0x431bde83
 8002524:	50000300 	.word	0x50000300
 8002528:	50000100 	.word	0x50000100
 800252c:	fff0c007 	.word	0xfff0c007

08002530 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002530:	b480      	push	{r7}
 8002532:	b09b      	sub	sp, #108	; 0x6c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x22>
 800254e:	2302      	movs	r3, #2
 8002550:	e2a5      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x56e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8289 	bne.w	8002a7c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d81c      	bhi.n	80025ac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	461a      	mov	r2, r3
 8002586:	231f      	movs	r3, #31
 8002588:	4093      	lsls	r3, r2
 800258a:	43db      	mvns	r3, r3
 800258c:	4019      	ands	r1, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	e063      	b.n	8002674 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d81e      	bhi.n	80025f2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	3b1e      	subs	r3, #30
 80025c8:	221f      	movs	r2, #31
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4019      	ands	r1, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	3b1e      	subs	r3, #30
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
 80025f0:	e040      	b.n	8002674 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b0e      	cmp	r3, #14
 80025f8:	d81e      	bhi.n	8002638 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	3b3c      	subs	r3, #60	; 0x3c
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4019      	ands	r1, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	3b3c      	subs	r3, #60	; 0x3c
 800262a:	fa00 f203 	lsl.w	r2, r0, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
 8002636:	e01d      	b.n	8002674 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	3b5a      	subs	r3, #90	; 0x5a
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	4019      	ands	r1, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3b5a      	subs	r3, #90	; 0x5a
 8002668:	fa00 f203 	lsl.w	r2, r0, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80e5 	bne.w	800284e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b09      	cmp	r3, #9
 800268a:	d91c      	bls.n	80026c6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6999      	ldr	r1, [r3, #24]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4019      	ands	r1, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6898      	ldr	r0, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	3b1e      	subs	r3, #30
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	e019      	b.n	80026fa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6959      	ldr	r1, [r3, #20]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	4019      	ands	r1, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6898      	ldr	r0, [r3, #8]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	3b01      	subs	r3, #1
 8002718:	2b03      	cmp	r3, #3
 800271a:	d84f      	bhi.n	80027bc <HAL_ADC_ConfigChannel+0x28c>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_ADC_ConfigChannel+0x1f4>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	08002757 	.word	0x08002757
 800272c:	08002779 	.word	0x08002779
 8002730:	0800279b 	.word	0x0800279b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800273a:	4b9e      	ldr	r3, [pc, #632]	; (80029b4 <HAL_ADC_ConfigChannel+0x484>)
 800273c:	4013      	ands	r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	0691      	lsls	r1, r2, #26
 8002744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002746:	430a      	orrs	r2, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002752:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002754:	e07e      	b.n	8002854 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800275c:	4b95      	ldr	r3, [pc, #596]	; (80029b4 <HAL_ADC_ConfigChannel+0x484>)
 800275e:	4013      	ands	r3, r2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	0691      	lsls	r1, r2, #26
 8002766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002768:	430a      	orrs	r2, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002774:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002776:	e06d      	b.n	8002854 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800277e:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <HAL_ADC_ConfigChannel+0x484>)
 8002780:	4013      	ands	r3, r2
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	0691      	lsls	r1, r2, #26
 8002788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800278a:	430a      	orrs	r2, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002796:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002798:	e05c      	b.n	8002854 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027a0:	4b84      	ldr	r3, [pc, #528]	; (80029b4 <HAL_ADC_ConfigChannel+0x484>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	0691      	lsls	r1, r2, #26
 80027aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ac:	430a      	orrs	r2, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027b8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027ba:	e04b      	b.n	8002854 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002802:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002826:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	429a      	cmp	r2, r3
 800283a:	d10a      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800284a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800284c:	e001      	b.n	8002852 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002852:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d108      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x344>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x344>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_ADC_ConfigChannel+0x346>
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 810b 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d00f      	beq.n	80028a4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028a2:	e049      	b.n	8002938 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b09      	cmp	r3, #9
 80028c4:	d91c      	bls.n	8002900 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6999      	ldr	r1, [r3, #24]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	3b1b      	subs	r3, #27
 80028d8:	2207      	movs	r2, #7
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	4019      	ands	r1, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6898      	ldr	r0, [r3, #8]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1b      	subs	r3, #27
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	619a      	str	r2, [r3, #24]
 80028fe:	e01b      	b.n	8002938 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	2207      	movs	r2, #7
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	4019      	ands	r1, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6898      	ldr	r0, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	fa00 f203 	lsl.w	r2, r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_ADC_ConfigChannel+0x488>)
 800293a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b10      	cmp	r3, #16
 8002942:	d105      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002954:	2b11      	cmp	r3, #17
 8002956:	d105      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002968:	2b12      	cmp	r3, #18
 800296a:	f040 8092 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 808b 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002984:	d102      	bne.n	800298c <HAL_ADC_ConfigChannel+0x45c>
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_ADC_ConfigChannel+0x48c>)
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0x462>
 800298c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002990:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10f      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x490>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x490>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e007      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x492>
 80029b2:	bf00      	nop
 80029b4:	83fff000 	.word	0x83fff000
 80029b8:	50000300 	.word	0x50000300
 80029bc:	50000100 	.word	0x50000100
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d150      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x4b8>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x4b8>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_ADC_ConfigChannel+0x4ba>
 80029e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d13c      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d11d      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x502>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fe:	d118      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_ADC_ConfigChannel+0x57c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_ADC_ConfigChannel+0x580>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0c9a      	lsrs	r2, r3, #18
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a22:	e002      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f9      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a30:	e02e      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b11      	cmp	r3, #17
 8002a38:	d10b      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x522>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a42:	d106      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a50:	e01e      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d11a      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a66:	e013      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a7a:	e00a      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a8e:	e000      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	376c      	adds	r7, #108	; 0x6c
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b099      	sub	sp, #100	; 0x64
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002acc:	d102      	bne.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002ace:	4b5a      	ldr	r3, [pc, #360]	; (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	e002      	b.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ad8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0a2      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e09b      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d17f      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d179      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b14:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002b16:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d040      	beq.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b32:	035b      	lsls	r3, r3, #13
 8002b34:	430b      	orrs	r3, r1
 8002b36:	431a      	orrs	r2, r3
 8002b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b3a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d15c      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002b7e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d14b      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b8c:	f023 030f 	bic.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6811      	ldr	r1, [r2, #0]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba0:	e03c      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d108      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d123      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002bf0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d112      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bfe:	f023 030f 	bic.w	r3, r3, #15
 8002c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c04:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c06:	e009      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c1a:	e000      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3764      	adds	r7, #100	; 0x64
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	50000100 	.word	0x50000100
 8002c3c:	50000300 	.word	0x50000300

08002c40 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <ADC_Disable+0x2c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <ADC_Disable+0x2c>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <ADC_Disable+0x2e>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d047      	beq.n	8002d02 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030d 	and.w	r3, r3, #13
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10f      	bne.n	8002ca0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0202 	orr.w	r2, r2, #2
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2203      	movs	r2, #3
 8002c96:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c98:	f7ff fa88 	bl	80021ac <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c9e:	e029      	b.n	8002cf4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0210 	orr.w	r2, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e023      	b.n	8002d04 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cbc:	f7ff fa76 	bl	80021ac <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d914      	bls.n	8002cf4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10d      	bne.n	8002cf4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d0dc      	beq.n	8002cbc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f7ff ff8e 	bl	8002dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff29 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff3e 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff8e 	bl	8002e00 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5d 	bl	8002dac <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff31 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffa2 	bl	8002e68 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3e:	e14e      	b.n	80031de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8140 	beq.w	80031d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d005      	beq.n	8002f70 <HAL_GPIO_Init+0x40>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d130      	bne.n	8002fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0201 	and.w	r2, r3, #1
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d017      	beq.n	800300e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d123      	bne.n	8003062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	6939      	ldr	r1, [r7, #16]
 800305e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 809a 	beq.w	80031d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a4:	4b55      	ldr	r3, [pc, #340]	; (80031fc <HAL_GPIO_Init+0x2cc>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x2cc>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6193      	str	r3, [r2, #24]
 80030b0:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_GPIO_Init+0x2cc>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030e6:	d013      	beq.n	8003110 <HAL_GPIO_Init+0x1e0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a46      	ldr	r2, [pc, #280]	; (8003204 <HAL_GPIO_Init+0x2d4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00d      	beq.n	800310c <HAL_GPIO_Init+0x1dc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_GPIO_Init+0x2d8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <HAL_GPIO_Init+0x1d8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a44      	ldr	r2, [pc, #272]	; (800320c <HAL_GPIO_Init+0x2dc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_GPIO_Init+0x1d4>
 8003100:	2303      	movs	r3, #3
 8003102:	e006      	b.n	8003112 <HAL_GPIO_Init+0x1e2>
 8003104:	2305      	movs	r3, #5
 8003106:	e004      	b.n	8003112 <HAL_GPIO_Init+0x1e2>
 8003108:	2302      	movs	r3, #2
 800310a:	e002      	b.n	8003112 <HAL_GPIO_Init+0x1e2>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_GPIO_Init+0x1e2>
 8003110:	2300      	movs	r3, #0
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	f002 0203 	and.w	r2, r2, #3
 8003118:	0092      	lsls	r2, r2, #2
 800311a:	4093      	lsls	r3, r2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003122:	4937      	ldr	r1, [pc, #220]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	3302      	adds	r3, #2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003154:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800317e:	4a24      	ldr	r2, [pc, #144]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_GPIO_Init+0x2e0>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3301      	adds	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f aea9 	bne.w	8002f40 <HAL_GPIO_Init+0x10>
  }
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010000 	.word	0x40010000
 8003204:	48000400 	.word	0x48000400
 8003208:	48000800 	.word	0x48000800
 800320c:	48000c00 	.word	0x48000c00
 8003210:	40010400 	.word	0x40010400

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003230:	e002      	b.n	8003238 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800324a:	af00      	add	r7, sp, #0
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f000 bef4 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 816a 	beq.w	8003542 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800326e:	4bb3      	ldr	r3, [pc, #716]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d00c      	beq.n	8003294 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800327a:	4bb0      	ldr	r3, [pc, #704]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d159      	bne.n	800333a <HAL_RCC_OscConfig+0xf6>
 8003286:	4bad      	ldr	r3, [pc, #692]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d152      	bne.n	800333a <HAL_RCC_OscConfig+0xf6>
 8003294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003298:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_OscConfig+0x82>
 80032c0:	4b9e      	ldr	r3, [pc, #632]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0xae>
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80032ee:	4b93      	ldr	r3, [pc, #588]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003306:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 810c 	beq.w	8003540 <HAL_RCC_OscConfig+0x2fc>
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8106 	bne.w	8003540 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f000 be86 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x110>
 8003346:	4b7d      	ldr	r3, [pc, #500]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7c      	ldr	r2, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e030      	b.n	80033b6 <HAL_RCC_OscConfig+0x172>
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x134>
 800335e:	4b77      	ldr	r3, [pc, #476]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a76      	ldr	r2, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b74      	ldr	r3, [pc, #464]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a73      	ldr	r2, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01e      	b.n	80033b6 <HAL_RCC_OscConfig+0x172>
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x15a>
 8003384:	4b6d      	ldr	r3, [pc, #436]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6c      	ldr	r2, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 800338a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a69      	ldr	r2, [pc, #420]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x172>
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a66      	ldr	r2, [pc, #408]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b64      	ldr	r3, [pc, #400]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a63      	ldr	r2, [pc, #396]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f023 020f 	bic.w	r2, r3, #15
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	495d      	ldr	r1, [pc, #372]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d059      	beq.n	8003488 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe feea 	bl	80021ac <HAL_GetTick>
 80033d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033de:	f7fe fee5 	bl	80021ac <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d902      	bls.n	80033f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f000 be29 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
 80033f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003408:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0x1e2>
 8003420:	4b46      	ldr	r3, [pc, #280]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x20e>
 8003426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800343a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003442:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003456:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800345a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003466:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800346a:	fab2 f282 	clz	r2, r2
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	f002 021f 	and.w	r2, r2, #31
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ab      	beq.n	80033de <HAL_RCC_OscConfig+0x19a>
 8003486:	e05c      	b.n	8003542 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fe90 	bl	80021ac <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003492:	f7fe fe8b 	bl	80021ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d902      	bls.n	80034a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f000 bdcf 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
 80034a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80034bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HAL_RCC_OscConfig+0x296>
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x2c2>
 80034da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_RCC_OscConfig+0x2f8>)
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800350a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800350e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800351a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800351e:	fab2 f282 	clz	r2, r2
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f002 021f 	and.w	r2, r2, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f202 	lsl.w	r2, r1, r2
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ab      	bne.n	8003492 <HAL_RCC_OscConfig+0x24e>
 800353a:	e002      	b.n	8003542 <HAL_RCC_OscConfig+0x2fe>
 800353c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 816f 	beq.w	8003830 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003552:	4bd0      	ldr	r3, [pc, #832]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800355e:	4bcd      	ldr	r3, [pc, #820]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d16c      	bne.n	8003644 <HAL_RCC_OscConfig+0x400>
 800356a:	4bca      	ldr	r3, [pc, #808]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d166      	bne.n	8003644 <HAL_RCC_OscConfig+0x400>
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003588:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_OscConfig+0x362>
 80035a0:	4bbc      	ldr	r3, [pc, #752]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	e013      	b.n	80035ce <HAL_RCC_OscConfig+0x38a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035ca:	4bb2      	ldr	r3, [pc, #712]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2202      	movs	r2, #2
 80035d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80035e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_RCC_OscConfig+0x3cc>
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d002      	beq.n	8003610 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f000 bd1b 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	21f8      	movs	r1, #248	; 0xf8
 8003620:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003628:	fa91 f1a1 	rbit	r1, r1
 800362c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003630:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003634:	fab1 f181 	clz	r1, r1
 8003638:	b2c9      	uxtb	r1, r1
 800363a:	408b      	lsls	r3, r1
 800363c:	4995      	ldr	r1, [pc, #596]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e0f5      	b.n	8003830 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8085 	beq.w	800375a <HAL_RCC_OscConfig+0x516>
 8003650:	2301      	movs	r3, #1
 8003652:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003662:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	461a      	mov	r2, r3
 8003678:	2301      	movs	r3, #1
 800367a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fd96 	bl	80021ac <HAL_GetTick>
 8003680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe fd91 	bl	80021ac <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	f000 bcd5 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
 800369c:	2302      	movs	r3, #2
 800369e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80036ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_OscConfig+0x488>
 80036c6:	4b73      	ldr	r3, [pc, #460]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e013      	b.n	80036f4 <HAL_RCC_OscConfig+0x4b0>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036de:	2302      	movs	r3, #2
 80036e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036f0:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2202      	movs	r2, #2
 80036f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036fe:	fa92 f2a2 	rbit	r2, r2
 8003702:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003706:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f042 0220 	orr.w	r2, r2, #32
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0af      	beq.n	8003686 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	21f8      	movs	r1, #248	; 0xf8
 8003736:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800373e:	fa91 f1a1 	rbit	r1, r1
 8003742:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003746:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800374a:	fab1 f181 	clz	r1, r1
 800374e:	b2c9      	uxtb	r1, r1
 8003750:	408b      	lsls	r3, r1
 8003752:	4950      	ldr	r1, [pc, #320]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e06a      	b.n	8003830 <HAL_RCC_OscConfig+0x5ec>
 800375a:	2301      	movs	r3, #1
 800375c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800376c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe fd11 	bl	80021ac <HAL_GetTick>
 800378a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe fd0c 	bl	80021ac <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d902      	bls.n	80037a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	f000 bc50 	b.w	8004046 <HAL_RCC_OscConfig+0xe02>
 80037a6:	2302      	movs	r3, #2
 80037a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_OscConfig+0x592>
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	e013      	b.n	80037fe <HAL_RCC_OscConfig+0x5ba>
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCC_OscConfig+0x650>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2202      	movs	r2, #2
 8003800:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003810:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f002 021f 	and.w	r2, r2, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1af      	bne.n	8003790 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80da 	beq.w	80039f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d069      	beq.n	800391e <HAL_RCC_OscConfig+0x6da>
 800384a:	2301      	movs	r3, #1
 800384c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x654>)
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	2301      	movs	r3, #1
 8003872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fe fc9a 	bl	80021ac <HAL_GetTick>
 8003878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387c:	e00e      	b.n	800389c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe fc95 	bl	80021ac <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d906      	bls.n	800389c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e3d9      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	10908120 	.word	0x10908120
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038b2:	2202      	movs	r2, #2
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038ca:	2202      	movs	r2, #2
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80038dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4ba5      	ldr	r3, [pc, #660]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038e6:	2102      	movs	r1, #2
 80038e8:	6019      	str	r1, [r3, #0]
 80038ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fa93 f1a3 	rbit	r1, r3
 80038f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038f8:	6019      	str	r1, [r3, #0]
  return result;
 80038fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0b0      	beq.n	800387e <HAL_RCC_OscConfig+0x63a>
 800391c:	e06a      	b.n	80039f4 <HAL_RCC_OscConfig+0x7b0>
 800391e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003934:	601a      	str	r2, [r3, #0]
  return result;
 8003936:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800393a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <HAL_RCC_OscConfig+0x934>)
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	461a      	mov	r2, r3
 800394c:	2300      	movs	r3, #0
 800394e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe fc2c 	bl	80021ac <HAL_GetTick>
 8003954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e009      	b.n	800396e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe fc27 	bl	80021ac <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e36b      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 800396e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800398a:	2202      	movs	r2, #2
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039a2:	2202      	movs	r2, #2
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b6:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 80039b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039be:	2102      	movs	r1, #2
 80039c0:	6019      	str	r1, [r3, #0]
 80039c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	fa93 f1a3 	rbit	r1, r3
 80039cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039d0:	6019      	str	r1, [r3, #0]
  return result;
 80039d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fab3 f383 	clz	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1b2      	bne.n	800395a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8158 	beq.w	8003cb4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <HAL_RCC_OscConfig+0x938>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11a      	bne.n	8003a7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a48:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <HAL_RCC_OscConfig+0x938>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_RCC_OscConfig+0x938>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a54:	f7fe fbaa 	bl	80021ac <HAL_GetTick>
 8003a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e009      	b.n	8003a72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fe fba5 	bl	80021ac <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e2e9      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_RCC_OscConfig+0x938>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0ef      	beq.n	8003a5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x852>
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a39      	ldr	r2, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	e02f      	b.n	8003af6 <HAL_RCC_OscConfig+0x8b2>
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_OscConfig+0x876>
 8003aa0:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	e01d      	b.n	8003af6 <HAL_RCC_OscConfig+0x8b2>
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x89a>
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	e00b      	b.n	8003af6 <HAL_RCC_OscConfig+0x8b2>
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d06b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fb54 	bl	80021ac <HAL_GetTick>
 8003b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	e00b      	b.n	8003b22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fe fb4f 	bl	80021ac <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e291      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b26:	2202      	movs	r2, #2
 8003b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	fa93 f2a3 	rbit	r2, r3
 8003b34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b3e:	2202      	movs	r2, #2
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b50:	601a      	str	r2, [r3, #0]
  return result;
 8003b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0302 	orr.w	r3, r3, #2
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCC_OscConfig+0x93c>
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <HAL_RCC_OscConfig+0x930>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x958>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	10908120 	.word	0x10908120
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	fa93 f2a3 	rbit	r2, r3
 8003b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	4bbb      	ldr	r3, [pc, #748]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	6011      	str	r1, [r2, #0]
 8003ba4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	fa92 f1a2 	rbit	r1, r2
 8003bae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003bb2:	6011      	str	r1, [r2, #0]
  return result;
 8003bb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d099      	beq.n	8003b0a <HAL_RCC_OscConfig+0x8c6>
 8003bd6:	e063      	b.n	8003ca0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fe fae8 	bl	80021ac <HAL_GetTick>
 8003bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fe fae3 	bl	80021ac <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e225      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	fa93 f2a3 	rbit	r2, r3
 8003c24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c28:	601a      	str	r2, [r3, #0]
  return result;
 8003c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f043 0302 	orr.w	r3, r3, #2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d102      	bne.n	8003c4a <HAL_RCC_OscConfig+0xa06>
 8003c44:	4b90      	ldr	r3, [pc, #576]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	e00d      	b.n	8003c66 <HAL_RCC_OscConfig+0xa22>
 8003c4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c4e:	2202      	movs	r2, #2
 8003c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	fa93 f2a3 	rbit	r2, r3
 8003c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	fa92 f1a2 	rbit	r1, r2
 8003c78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c7c:	6011      	str	r1, [r2, #0]
  return result;
 8003c7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	fab2 f282 	clz	r2, r2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f002 021f 	and.w	r2, r2, #31
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1a0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b77      	ldr	r3, [pc, #476]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4a76      	ldr	r2, [pc, #472]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 81c2 	beq.w	8004044 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc0:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	f000 819c 	beq.w	8004006 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f040 8114 	bne.w	8003f02 <HAL_RCC_OscConfig+0xcbe>
 8003cda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	fa93 f2a3 	rbit	r2, r3
 8003cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cf2:	601a      	str	r2, [r3, #0]
  return result;
 8003cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe fa4c 	bl	80021ac <HAL_GetTick>
 8003d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d18:	e009      	b.n	8003d2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe fa47 	bl	80021ac <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e18b      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	fa93 f2a3 	rbit	r2, r3
 8003d42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d46:	601a      	str	r2, [r3, #0]
  return result;
 8003d48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d102      	bne.n	8003d68 <HAL_RCC_OscConfig+0xb24>
 8003d62:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e01b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb5c>
 8003d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	fa92 f1a2 	rbit	r1, r2
 8003db4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003db8:	6011      	str	r1, [r2, #0]
  return result;
 8003dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	fab2 f282 	clz	r2, r2
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f042 0220 	orr.w	r2, r2, #32
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f002 021f 	and.w	r2, r2, #31
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d19e      	bne.n	8003d1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	4925      	ldr	r1, [pc, #148]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
 8003df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e10:	601a      	str	r2, [r3, #0]
  return result;
 8003e12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f9bd 	bl	80021ac <HAL_GetTick>
 8003e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e36:	e009      	b.n	8003e4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe f9b8 	bl	80021ac <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0fc      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	fa93 f2a3 	rbit	r2, r3
 8003e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e64:	601a      	str	r2, [r3, #0]
  return result;
 8003e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCC_OscConfig+0xc48>
 8003e80:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <HAL_RCC_OscConfig+0xc44>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	e01e      	b.n	8003ec4 <HAL_RCC_OscConfig+0xc80>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	fa93 f2a3 	rbit	r2, r3
 8003eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	4b63      	ldr	r3, [pc, #396]	; (8004050 <HAL_RCC_OscConfig+0xe0c>)
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	fa92 f1a2 	rbit	r1, r2
 8003ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003edc:	6011      	str	r1, [r2, #0]
  return result;
 8003ede:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f002 021f 	and.w	r2, r2, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d09b      	beq.n	8003e38 <HAL_RCC_OscConfig+0xbf4>
 8003f00:	e0a0      	b.n	8004044 <HAL_RCC_OscConfig+0xe00>
 8003f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	fa93 f2a3 	rbit	r2, r3
 8003f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1a:	601a      	str	r2, [r3, #0]
  return result;
 8003f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe f938 	bl	80021ac <HAL_GetTick>
 8003f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f40:	e009      	b.n	8003f56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fe f933 	bl	80021ac <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e077      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
 8003f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	fa93 f2a3 	rbit	r2, r3
 8003f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f6e:	601a      	str	r2, [r3, #0]
  return result;
 8003f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d102      	bne.n	8003f90 <HAL_RCC_OscConfig+0xd4c>
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0xe0c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	e01b      	b.n	8003fc8 <HAL_RCC_OscConfig+0xd84>
 8003f90:	f107 0320 	add.w	r3, r7, #32
 8003f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	fa93 f2a3 	rbit	r2, r3
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f107 0318 	add.w	r3, r7, #24
 8003fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f107 0318 	add.w	r3, r7, #24
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_OscConfig+0xe0c>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f107 0210 	add.w	r2, r7, #16
 8003fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	f107 0210 	add.w	r2, r7, #16
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	fa92 f1a2 	rbit	r1, r2
 8003fdc:	f107 020c 	add.w	r2, r7, #12
 8003fe0:	6011      	str	r1, [r2, #0]
  return result;
 8003fe2:	f107 020c 	add.w	r2, r7, #12
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	fab2 f282 	clz	r2, r2
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	f042 0220 	orr.w	r2, r2, #32
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	f002 021f 	and.w	r2, r2, #31
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d19e      	bne.n	8003f42 <HAL_RCC_OscConfig+0xcfe>
 8004004:	e01e      	b.n	8004044 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e018      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0xe0c>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800401c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	429a      	cmp	r2, r3
 800402c:	d108      	bne.n	8004040 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800402e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b09e      	sub	sp, #120	; 0x78
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e162      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800406c:	4b90      	ldr	r3, [pc, #576]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d910      	bls.n	800409c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 0207 	bic.w	r2, r3, #7
 8004082:	498b      	ldr	r1, [pc, #556]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b89      	ldr	r3, [pc, #548]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e14a      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b82      	ldr	r3, [pc, #520]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	497f      	ldr	r1, [pc, #508]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80dc 	beq.w	8004280 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d13c      	bne.n	800414a <HAL_RCC_ClockConfig+0xf6>
 80040d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e0:	fab3 f383 	clz	r3, r3
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_ClockConfig+0xa6>
 80040f4:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	e00f      	b.n	800411a <HAL_RCC_ClockConfig+0xc6>
 80040fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	667b      	str	r3, [r7, #100]	; 0x64
 8004108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800411e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004122:	fa92 f2a2 	rbit	r2, r2
 8004126:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800412a:	fab2 f282 	clz	r2, r2
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	f042 0220 	orr.w	r2, r2, #32
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	f002 021f 	and.w	r2, r2, #31
 800413a:	2101      	movs	r1, #1
 800413c:	fa01 f202 	lsl.w	r2, r1, r2
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d17b      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0f3      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d13c      	bne.n	80041cc <HAL_RCC_ClockConfig+0x178>
 8004152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d102      	bne.n	800417c <HAL_RCC_ClockConfig+0x128>
 8004176:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	e00f      	b.n	800419c <HAL_RCC_ClockConfig+0x148>
 800417c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	647b      	str	r3, [r7, #68]	; 0x44
 800418a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004198:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80041a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041a4:	fa92 f2a2 	rbit	r2, r2
 80041a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ac:	fab2 f282 	clz	r2, r2
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	f042 0220 	orr.w	r2, r2, #32
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f002 021f 	and.w	r2, r2, #31
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f202 	lsl.w	r2, r1, r2
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d13a      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0b2      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
 80041cc:	2302      	movs	r3, #2
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d102      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x1a0>
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	e00d      	b.n	8004210 <HAL_RCC_ClockConfig+0x1bc>
 80041f4:	2302      	movs	r3, #2
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	2302      	movs	r3, #2
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2202      	movs	r2, #2
 8004212:	61ba      	str	r2, [r7, #24]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	fa92 f2a2 	rbit	r2, r2
 800421a:	617a      	str	r2, [r7, #20]
  return result;
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e079      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	491a      	ldr	r1, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fd ffac 	bl	80021ac <HAL_GetTick>
 8004254:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fd ffa8 	bl	80021ac <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e061      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_RCC_ClockConfig+0x260>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d214      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0207 	bic.w	r2, r3, #7
 8004296:	4906      	ldr	r1, [pc, #24]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <HAL_RCC_ClockConfig+0x25c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e040      	b.n	8004332 <HAL_RCC_ClockConfig+0x2de>
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCC_ClockConfig+0x2e8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	491a      	ldr	r1, [pc, #104]	; (800433c <HAL_RCC_ClockConfig+0x2e8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <HAL_RCC_ClockConfig+0x2e8>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4912      	ldr	r1, [pc, #72]	; (800433c <HAL_RCC_ClockConfig+0x2e8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042f6:	f000 f829 	bl	800434c <HAL_RCC_GetSysClockFreq>
 80042fa:	4601      	mov	r1, r0
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCC_ClockConfig+0x2e8>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004304:	22f0      	movs	r2, #240	; 0xf0
 8004306:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	60fa      	str	r2, [r7, #12]
  return result;
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	40d3      	lsrs	r3, r2
 800431a:	4a09      	ldr	r2, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x2ec>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	fa21 f303 	lsr.w	r3, r1, r3
 8004322:	4a08      	ldr	r2, [pc, #32]	; (8004344 <HAL_RCC_ClockConfig+0x2f0>)
 8004324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCC_ClockConfig+0x2f4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fd fefa 	bl	8002124 <HAL_InitTick>
  
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3778      	adds	r7, #120	; 0x78
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	08008e6c 	.word	0x08008e6c
 8004344:	20000000 	.word	0x20000000
 8004348:	20000004 	.word	0x20000004

0800434c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b08b      	sub	sp, #44	; 0x2c
 8004350:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d002      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x30>
 8004376:	2b08      	cmp	r3, #8
 8004378:	d003      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x36>
 800437a:	e03c      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 800437e:	623b      	str	r3, [r7, #32]
      break;
 8004380:	e03c      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004388:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800438c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	fa92 f2a2 	rbit	r2, r2
 8004394:	607a      	str	r2, [r7, #4]
  return result;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	fab2 f282 	clz	r2, r2
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	40d3      	lsrs	r3, r2
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	220f      	movs	r2, #15
 80043b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	fa92 f2a2 	rbit	r2, r2
 80043b8:	60fa      	str	r2, [r7, #12]
  return result;
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	fab2 f282 	clz	r2, r2
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	40d3      	lsrs	r3, r2
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043d4:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
 80043e4:	e004      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <HAL_RCC_GetSysClockFreq+0xd0>)
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	623b      	str	r3, [r7, #32]
      break;
 80043f4:	e002      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043f8:	623b      	str	r3, [r7, #32]
      break;
 80043fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fc:	6a3b      	ldr	r3, [r7, #32]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	372c      	adds	r7, #44	; 0x2c
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	007a1200 	.word	0x007a1200
 8004414:	08008e84 	.word	0x08008e84
 8004418:	08008e94 	.word	0x08008e94
 800441c:	003d0900 	.word	0x003d0900

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800443e:	f7ff ffef 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004442:	4601      	mov	r1, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004450:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	fa92 f2a2 	rbit	r2, r2
 8004458:	603a      	str	r2, [r7, #0]
  return result;
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	fab2 f282 	clz	r2, r2
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	40d3      	lsrs	r3, r2
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004466:	5cd3      	ldrb	r3, [r2, r3]
 8004468:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	08008e7c 	.word	0x08008e7c

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004482:	f7ff ffcd 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004486:	4601      	mov	r1, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004490:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004494:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	fa92 f2a2 	rbit	r2, r2
 800449c:	603a      	str	r2, [r7, #0]
  return result;
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	fab2 f282 	clz	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	40d3      	lsrs	r3, r2
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	08008e7c 	.word	0x08008e7c

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	; 0x48
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80cd 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e4:	4b86      	ldr	r3, [pc, #536]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10e      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b83      	ldr	r3, [pc, #524]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4a82      	ldr	r2, [pc, #520]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	61d3      	str	r3, [r2, #28]
 80044fc:	4b80      	ldr	r3, [pc, #512]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b7d      	ldr	r3, [pc, #500]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b7a      	ldr	r3, [pc, #488]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a79      	ldr	r2, [pc, #484]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fd fe41 	bl	80021ac <HAL_GetTick>
 800452a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	e008      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452e:	f7fd fe3d 	bl	80021ac <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	; 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0db      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b70      	ldr	r3, [pc, #448]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800454c:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d07d      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004566:	429a      	cmp	r2, r3
 8004568:	d076      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800456a:	4b65      	ldr	r3, [pc, #404]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	2301      	movs	r3, #1
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b55      	ldr	r3, [pc, #340]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	2300      	movs	r3, #0
 80045ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045bc:	4a50      	ldr	r2, [pc, #320]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d045      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd fdee 	bl	80021ac <HAL_GetTick>
 80045d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd fdea 	bl	80021ac <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e086      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80045ea:	2302      	movs	r3, #2
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	2302      	movs	r3, #2
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	61fb      	str	r3, [r7, #28]
  return result;
 8004602:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d102      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004618:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	e007      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800461e:	2302      	movs	r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2202      	movs	r2, #2
 8004630:	613a      	str	r2, [r7, #16]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	fa92 f2a2 	rbit	r2, r2
 8004638:	60fa      	str	r2, [r7, #12]
  return result;
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f002 021f 	and.w	r2, r2, #31
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f202 	lsl.w	r2, r1, r2
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0bd      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4926      	ldr	r1, [pc, #152]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	4313      	orrs	r3, r2
 8004668:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800466a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4a22      	ldr	r2, [pc, #136]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f023 0203 	bic.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	491a      	ldr	r1, [pc, #104]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004698:	4313      	orrs	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f023 0210 	bic.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	490b      	ldr	r1, [pc, #44]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3748      	adds	r7, #72	; 0x48
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
 8004708:	10908100 	.word	0x10908100

0800470c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e095      	b.n	800484a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d009      	beq.n	8004744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	e005      	b.n	8004744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd faf0 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004784:	d902      	bls.n	800478c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e002      	b.n	8004792 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800478c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004790:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800479a:	d007      	beq.n	80047ac <HAL_SPI_Init+0xa0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	ea42 0103 	orr.w	r1, r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	f003 0204 	and.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004828:	ea42 0103 	orr.w	r1, r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08a      	sub	sp, #40	; 0x28
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004860:	2301      	movs	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x26>
 8004874:	2302      	movs	r3, #2
 8004876:	e1fb      	b.n	8004c70 <HAL_SPI_TransmitReceive+0x41e>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004880:	f7fd fc94 	bl	80021ac <HAL_GetTick>
 8004884:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800488c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800489c:	7efb      	ldrb	r3, [r7, #27]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d00e      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x6e>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x66>
 80048b2:	7efb      	ldrb	r3, [r7, #27]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d003      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048be:	e1cd      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0x80>
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048d8:	e1c0      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d003      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2205      	movs	r2, #5
 80048ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	887a      	ldrh	r2, [r7, #2]
 80048fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	887a      	ldrh	r2, [r7, #2]
 8004906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	887a      	ldrh	r2, [r7, #2]
 800491a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004930:	d802      	bhi.n	8004938 <HAL_SPI_TransmitReceive+0xe6>
 8004932:	8a3b      	ldrh	r3, [r7, #16]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d908      	bls.n	800494a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004946:	605a      	str	r2, [r3, #4]
 8004948:	e007      	b.n	800495a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d007      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004980:	d97c      	bls.n	8004a7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x13e>
 800498a:	8a7b      	ldrh	r3, [r7, #18]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d169      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b4:	e056      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d11b      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x1aa>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x1aa>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d113      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d11c      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x1f2>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	b292      	uxth	r2, r2
 8004a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a40:	2301      	movs	r3, #1
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a44:	f7fd fbb2 	bl	80021ac <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d807      	bhi.n	8004a64 <HAL_SPI_TransmitReceive+0x212>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d003      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a62:	e0fb      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1a3      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x164>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d19d      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x164>
 8004a7a:	e0df      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x23a>
 8004a84:	8a7b      	ldrh	r3, [r7, #18]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	f040 80cb 	bne.w	8004c22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d912      	bls.n	8004abc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b02      	subs	r3, #2
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aba:	e0b2      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	7812      	ldrb	r2, [r2, #0]
 8004ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae2:	e09e      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d134      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x30a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02f      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x30a>
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d12c      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d912      	bls.n	8004b32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	881a      	ldrh	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b30:	e012      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d148      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x3aa>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d042      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d923      	bls.n	8004bca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b02      	subs	r3, #2
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d81f      	bhi.n	8004bf8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e016      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f103 020c 	add.w	r2, r3, #12
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bfc:	f7fd fad6 	bl	80021ac <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_TransmitReceive+0x3c2>
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x3c8>
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c20:	e01c      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af5b 	bne.w	8004ae4 <HAL_SPI_TransmitReceive+0x292>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f47f af54 	bne.w	8004ae4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f937 	bl	8004eb4 <SPI_EndRxTxTransaction>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60
 8004c58:	e000      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004c5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c88:	f7fd fa90 	bl	80021ac <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	4413      	add	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c98:	f7fd fa88 	bl	80021ac <HAL_GetTick>
 8004c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c9e:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	015b      	lsls	r3, r3, #5
 8004ca4:	0d1b      	lsrs	r3, r3, #20
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cae:	e054      	b.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d050      	beq.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cb8:	f7fd fa78 	bl	80021ac <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d902      	bls.n	8004cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13d      	bne.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce6:	d111      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d004      	beq.n	8004cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d107      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d14:	d10f      	bne.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e017      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d19b      	bne.n	8004cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000000 	.word	0x20000000

08004d88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004d9a:	f7fd fa07 	bl	80021ac <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004daa:	f7fd f9ff 	bl	80021ac <HAL_GetTick>
 8004dae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004db8:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00da      	lsls	r2, r3, #3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	0d1b      	lsrs	r3, r3, #20
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004dd0:	e060      	b.n	8004e94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dd8:	d107      	bne.n	8004dea <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d050      	beq.n	8004e94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df2:	f7fd f9db 	bl	80021ac <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d902      	bls.n	8004e08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d13d      	bne.n	8004e84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e20:	d111      	bne.n	8004e46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d004      	beq.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e34:	d107      	bne.n	8004e46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	d10f      	bne.n	8004e70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e010      	b.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d196      	bne.n	8004dd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000000 	.word	0x20000000

08004eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff ff5b 	bl	8004d88 <SPI_WaitFifoStateUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e027      	b.n	8004f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fec0 	bl	8004c78 <SPI_WaitFlagStateUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e014      	b.n	8004f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff34 	bl	8004d88 <SPI_WaitFifoStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e000      	b.n	8004f38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e049      	b.n	8004fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc ff2e 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 faa2 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e040      	b.n	800508a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <HAL_TIM_Base_Start_IT+0xa8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x58>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005032:	d009      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x58>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_TIM_Base_Start_IT+0xac>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x58>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d115      	bne.n	8005074 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d015      	beq.n	8005086 <HAL_TIM_Base_Start_IT+0x96>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d011      	beq.n	8005086 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005072:	e008      	b.n	8005086 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e000      	b.n	8005088 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	00010007 	.word	0x00010007

080050a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0202 	mvn.w	r2, #2
 80050d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9ce 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9c0 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9d1 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0204 	mvn.w	r2, #4
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9a4 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f996 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f9a7 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b08      	cmp	r3, #8
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0208 	mvn.w	r2, #8
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2204      	movs	r2, #4
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f97a 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f96c 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f97d 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d122      	bne.n	8005200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0210 	mvn.w	r2, #16
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2208      	movs	r2, #8
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f950 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f942 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f953 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10e      	bne.n	800522c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d107      	bne.n	800522c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0201 	mvn.w	r2, #1
 8005224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fb fe8e 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	d107      	bne.n	8005258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fac2 	bl	80057dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005266:	d10e      	bne.n	8005286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b80      	cmp	r3, #128	; 0x80
 8005274:	d107      	bne.n	8005286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800527e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fab5 	bl	80057f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d10e      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d107      	bne.n	80052b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f901 	bl	80054b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d10e      	bne.n	80052de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d107      	bne.n	80052de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0220 	mvn.w	r2, #32
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fa75 	bl	80057c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_ConfigClockSource+0x1c>
 80052fe:	2302      	movs	r3, #2
 8005300:	e0b6      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x18a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005320:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005324:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	d03e      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xd8>
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	f200 8087 	bhi.w	8005456 <HAL_TIM_ConfigClockSource+0x170>
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	f000 8086 	beq.w	800545c <HAL_TIM_ConfigClockSource+0x176>
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d87f      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 8005356:	2b70      	cmp	r3, #112	; 0x70
 8005358:	d01a      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0xaa>
 800535a:	2b70      	cmp	r3, #112	; 0x70
 800535c:	d87b      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 800535e:	2b60      	cmp	r3, #96	; 0x60
 8005360:	d050      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0x11e>
 8005362:	2b60      	cmp	r3, #96	; 0x60
 8005364:	d877      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 8005366:	2b50      	cmp	r3, #80	; 0x50
 8005368:	d03c      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0xfe>
 800536a:	2b50      	cmp	r3, #80	; 0x50
 800536c:	d873      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d058      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x13e>
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d86f      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d064      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x15e>
 800537a:	2b30      	cmp	r3, #48	; 0x30
 800537c:	d86b      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 800537e:	2b20      	cmp	r3, #32
 8005380:	d060      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x15e>
 8005382:	2b20      	cmp	r3, #32
 8005384:	d867      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d05c      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x15e>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d05a      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x15e>
 800538e:	e062      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f000 f984 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	609a      	str	r2, [r3, #8]
      break;
 80053bc:	e04f      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f000 f96d 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e0:	609a      	str	r2, [r3, #8]
      break;
 80053e2:	e03c      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f000 f8e1 	bl	80055b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2150      	movs	r1, #80	; 0x50
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f93a 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005402:	e02c      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	461a      	mov	r2, r3
 8005412:	f000 f900 	bl	8005616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2160      	movs	r1, #96	; 0x60
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f92a 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005422:	e01c      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	461a      	mov	r2, r3
 8005432:	f000 f8c1 	bl	80055b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f91a 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005442:	e00c      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 f911 	bl	8005676 <TIM_ITRx_SetConfig>
      break;
 8005454:	e003      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
      break;
 800545a:	e000      	b.n	800545e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800545c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a32      	ldr	r2, [pc, #200]	; (80055a4 <TIM_Base_SetConfig+0xdc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x28>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x28>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2f      	ldr	r2, [pc, #188]	; (80055a8 <TIM_Base_SetConfig+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <TIM_Base_SetConfig+0xdc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_Base_SetConfig+0x6a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d00f      	beq.n	8005532 <TIM_Base_SetConfig+0x6a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <TIM_Base_SetConfig+0xe0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_Base_SetConfig+0x6a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <TIM_Base_SetConfig+0xe4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0x6a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <TIM_Base_SetConfig+0xe8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0x6a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_Base_SetConfig+0xec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <TIM_Base_SetConfig+0xdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0xc0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <TIM_Base_SetConfig+0xe4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0xc0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0d      	ldr	r2, [pc, #52]	; (80055b0 <TIM_Base_SetConfig+0xe8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0xc0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <TIM_Base_SetConfig+0xec>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d103      	bne.n	8005590 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	615a      	str	r2, [r3, #20]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40014400 	.word	0x40014400
 80055b4:	40014800 	.word	0x40014800

080055b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 030a 	bic.w	r3, r3, #10
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005616:	b480      	push	{r7}
 8005618:	b087      	sub	sp, #28
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0210 	bic.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	031b      	lsls	r3, r3, #12
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	f043 0307 	orr.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	609a      	str	r2, [r3, #8]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e054      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40014000 	.word	0x40014000

080057c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e040      	b.n	8005898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc faf4 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8c0 	bl	80059c8 <UART_SetConfig>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e022      	b.n	8005898 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ea 	bl	8005c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa71 	bl	8005d78 <UART_CheckIdleState>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	f040 8082 	bne.w	80059be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <HAL_UART_Transmit+0x26>
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e07a      	b.n	80059c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UART_Transmit+0x38>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e073      	b.n	80059c0 <HAL_UART_Transmit+0x120>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2221      	movs	r2, #33	; 0x21
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ee:	f7fc fc5d 	bl	80021ac <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d108      	bne.n	8005920 <HAL_UART_Transmit+0x80>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e003      	b.n	8005928 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005930:	e02d      	b.n	800598e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fa64 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e039      	b.n	80059c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	881a      	ldrh	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595e:	b292      	uxth	r2, r2
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3302      	adds	r3, #2
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e008      	b.n	800597c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	b292      	uxth	r2, r2
 8005974:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3301      	adds	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2140      	movs	r1, #64	; 0x40
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fa30 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e005      	b.n	80059c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b8a      	ldr	r3, [pc, #552]	; (8005c1c <UART_SetConfig+0x254>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a78      	ldr	r2, [pc, #480]	; (8005c20 <UART_SetConfig+0x258>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d120      	bne.n	8005a86 <UART_SetConfig+0xbe>
 8005a44:	4b77      	ldr	r3, [pc, #476]	; (8005c24 <UART_SetConfig+0x25c>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d817      	bhi.n	8005a80 <UART_SetConfig+0xb8>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <UART_SetConfig+0x90>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a75 	.word	0x08005a75
 8005a60:	08005a7b 	.word	0x08005a7b
 8005a64:	08005a6f 	.word	0x08005a6f
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e01d      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e01a      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e017      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e014      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e011      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a67      	ldr	r2, [pc, #412]	; (8005c28 <UART_SetConfig+0x260>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d102      	bne.n	8005a96 <UART_SetConfig+0xce>
 8005a90:	2300      	movs	r3, #0
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e009      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a64      	ldr	r2, [pc, #400]	; (8005c2c <UART_SetConfig+0x264>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d102      	bne.n	8005aa6 <UART_SetConfig+0xde>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e001      	b.n	8005aaa <UART_SetConfig+0xe2>
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab2:	d15b      	bne.n	8005b6c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005ab4:	7ffb      	ldrb	r3, [r7, #31]
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d827      	bhi.n	8005b0a <UART_SetConfig+0x142>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <UART_SetConfig+0xf8>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005b0b 	.word	0x08005b0b
 8005ad0:	08005afb 	.word	0x08005afb
 8005ad4:	08005b0b 	.word	0x08005b0b
 8005ad8:	08005b0b 	.word	0x08005b0b
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b03 	.word	0x08005b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f7fe fca8 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005ae8:	61b8      	str	r0, [r7, #24]
        break;
 8005aea:	e013      	b.n	8005b14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aec:	f7fe fcc6 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8005af0:	61b8      	str	r0, [r7, #24]
        break;
 8005af2:	e00f      	b.n	8005b14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af4:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <UART_SetConfig+0x268>)
 8005af6:	61bb      	str	r3, [r7, #24]
        break;
 8005af8:	e00c      	b.n	8005b14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afa:	f7fe fc27 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8005afe:	61b8      	str	r0, [r7, #24]
        break;
 8005b00:	e008      	b.n	8005b14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b06:	61bb      	str	r3, [r7, #24]
        break;
 8005b08:	e004      	b.n	8005b14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	77bb      	strb	r3, [r7, #30]
        break;
 8005b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d074      	beq.n	8005c04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	005a      	lsls	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b0f      	cmp	r3, #15
 8005b36:	d916      	bls.n	8005b66 <UART_SetConfig+0x19e>
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d212      	bcs.n	8005b66 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f023 030f 	bic.w	r3, r3, #15
 8005b48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	89fb      	ldrh	r3, [r7, #14]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	89fa      	ldrh	r2, [r7, #14]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	e04e      	b.n	8005c04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77bb      	strb	r3, [r7, #30]
 8005b6a:	e04b      	b.n	8005c04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d827      	bhi.n	8005bc2 <UART_SetConfig+0x1fa>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x1b0>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bb3 	.word	0x08005bb3
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fe fc4c 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	61b8      	str	r0, [r7, #24]
        break;
 8005ba2:	e013      	b.n	8005bcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba4:	f7fe fc6a 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8005ba8:	61b8      	str	r0, [r7, #24]
        break;
 8005baa:	e00f      	b.n	8005bcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <UART_SetConfig+0x268>)
 8005bae:	61bb      	str	r3, [r7, #24]
        break;
 8005bb0:	e00c      	b.n	8005bcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fe fbcb 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8005bb6:	61b8      	str	r0, [r7, #24]
        break;
 8005bb8:	e008      	b.n	8005bcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bbe:	61bb      	str	r3, [r7, #24]
        break;
 8005bc0:	e004      	b.n	8005bcc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8005bca:	bf00      	nop
    }

    if (pclk != 0U)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d018      	beq.n	8005c04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	085a      	lsrs	r2, r3, #1
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d908      	bls.n	8005c00 <UART_SetConfig+0x238>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d204      	bcs.n	8005c00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	e001      	b.n	8005c04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	efff69f3 	.word	0xefff69f3
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40004800 	.word	0x40004800
 8005c30:	007a1200 	.word	0x007a1200

08005c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d32:	d10a      	bne.n	8005d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d88:	f7fc fa10 	bl	80021ac <HAL_GetTick>
 8005d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d10e      	bne.n	8005dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f82d 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e023      	b.n	8005e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d10e      	bne.n	8005de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f817 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00d      	b.n	8005e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b09c      	sub	sp, #112	; 0x70
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	e0a5      	b.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	f000 80a1 	beq.w	8005f68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fc f9c1 	bl	80021ac <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d13e      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e50:	667b      	str	r3, [r7, #100]	; 0x64
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e6      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e5      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e067      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d04f      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d147      	bne.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
 8005f02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e6      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	613b      	str	r3, [r7, #16]
   return(result);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f34:	623a      	str	r2, [r7, #32]
 8005f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	6a3a      	ldr	r2, [r7, #32]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e010      	b.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	f43f af4a 	beq.w	8005e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3770      	adds	r7, #112	; 0x70
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <atanf>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	ee10 5a10 	vmov	r5, s0
 8005f9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005f9e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005fa2:	eef0 7a40 	vmov.f32	s15, s0
 8005fa6:	db10      	blt.n	8005fca <atanf+0x36>
 8005fa8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005fac:	dd04      	ble.n	8005fb8 <atanf+0x24>
 8005fae:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80060f0 <atanf+0x15c>
 8005fbc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80060f4 <atanf+0x160>
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	bfd8      	it	le
 8005fc4:	eef0 7a40 	vmovle.f32	s15, s0
 8005fc8:	e7f3      	b.n	8005fb2 <atanf+0x1e>
 8005fca:	4b4b      	ldr	r3, [pc, #300]	; (80060f8 <atanf+0x164>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	dc10      	bgt.n	8005ff2 <atanf+0x5e>
 8005fd0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005fd4:	da0a      	bge.n	8005fec <atanf+0x58>
 8005fd6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80060fc <atanf+0x168>
 8005fda:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	dce2      	bgt.n	8005fb2 <atanf+0x1e>
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	e013      	b.n	800601a <atanf+0x86>
 8005ff2:	f000 f8a3 	bl	800613c <fabsf>
 8005ff6:	4b42      	ldr	r3, [pc, #264]	; (8006100 <atanf+0x16c>)
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	dc4f      	bgt.n	800609c <atanf+0x108>
 8005ffc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006000:	429c      	cmp	r4, r3
 8006002:	dc41      	bgt.n	8006088 <atanf+0xf4>
 8006004:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006008:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800600c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006010:	2300      	movs	r3, #0
 8006012:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006020:	eddf 5a38 	vldr	s11, [pc, #224]	; 8006104 <atanf+0x170>
 8006024:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8006108 <atanf+0x174>
 8006028:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800610c <atanf+0x178>
 800602c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006110 <atanf+0x17c>
 8006030:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006034:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006038:	eddf 5a36 	vldr	s11, [pc, #216]	; 8006114 <atanf+0x180>
 800603c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006040:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8006118 <atanf+0x184>
 8006044:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006048:	eddf 5a34 	vldr	s11, [pc, #208]	; 800611c <atanf+0x188>
 800604c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8006050:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8006120 <atanf+0x18c>
 8006054:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006058:	eddf 5a32 	vldr	s11, [pc, #200]	; 8006124 <atanf+0x190>
 800605c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8006060:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8006128 <atanf+0x194>
 8006064:	eea5 5a87 	vfma.f32	s10, s11, s14
 8006068:	eddf 5a30 	vldr	s11, [pc, #192]	; 800612c <atanf+0x198>
 800606c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8006070:	eea5 0a87 	vfma.f32	s0, s11, s14
 8006074:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006078:	eea6 0a26 	vfma.f32	s0, s12, s13
 800607c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006080:	d121      	bne.n	80060c6 <atanf+0x132>
 8006082:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006086:	e794      	b.n	8005fb2 <atanf+0x1e>
 8006088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800608c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006090:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006094:	2301      	movs	r3, #1
 8006096:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800609a:	e7be      	b.n	800601a <atanf+0x86>
 800609c:	4b24      	ldr	r3, [pc, #144]	; (8006130 <atanf+0x19c>)
 800609e:	429c      	cmp	r4, r3
 80060a0:	dc0b      	bgt.n	80060ba <atanf+0x126>
 80060a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80060a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80060ae:	2302      	movs	r3, #2
 80060b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	e7af      	b.n	800601a <atanf+0x86>
 80060ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80060be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80060c2:	2303      	movs	r3, #3
 80060c4:	e7a9      	b.n	800601a <atanf+0x86>
 80060c6:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <atanf+0x1a0>)
 80060c8:	491b      	ldr	r1, [pc, #108]	; (8006138 <atanf+0x1a4>)
 80060ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80060ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80060d2:	ed93 7a00 	vldr	s14, [r3]
 80060d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80060da:	2d00      	cmp	r5, #0
 80060dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80060e0:	ed92 0a00 	vldr	s0, [r2]
 80060e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80060e8:	bfb8      	it	lt
 80060ea:	eef1 7a67 	vneglt.f32	s15, s15
 80060ee:	e760      	b.n	8005fb2 <atanf+0x1e>
 80060f0:	3fc90fdb 	.word	0x3fc90fdb
 80060f4:	bfc90fdb 	.word	0xbfc90fdb
 80060f8:	3edfffff 	.word	0x3edfffff
 80060fc:	7149f2ca 	.word	0x7149f2ca
 8006100:	3f97ffff 	.word	0x3f97ffff
 8006104:	3c8569d7 	.word	0x3c8569d7
 8006108:	3d4bda59 	.word	0x3d4bda59
 800610c:	bd15a221 	.word	0xbd15a221
 8006110:	be4ccccd 	.word	0xbe4ccccd
 8006114:	3d886b35 	.word	0x3d886b35
 8006118:	3dba2e6e 	.word	0x3dba2e6e
 800611c:	3e124925 	.word	0x3e124925
 8006120:	3eaaaaab 	.word	0x3eaaaaab
 8006124:	bd6ef16b 	.word	0xbd6ef16b
 8006128:	bd9d8795 	.word	0xbd9d8795
 800612c:	bde38e38 	.word	0xbde38e38
 8006130:	401bffff 	.word	0x401bffff
 8006134:	08008ea4 	.word	0x08008ea4
 8006138:	08008eb4 	.word	0x08008eb4

0800613c <fabsf>:
 800613c:	ee10 3a10 	vmov	r3, s0
 8006140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006144:	ee00 3a10 	vmov	s0, r3
 8006148:	4770      	bx	lr
	...

0800614c <__errno>:
 800614c:	4b01      	ldr	r3, [pc, #4]	; (8006154 <__errno+0x8>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	2000000c 	.word	0x2000000c

08006158 <__libc_init_array>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4d0d      	ldr	r5, [pc, #52]	; (8006190 <__libc_init_array+0x38>)
 800615c:	4c0d      	ldr	r4, [pc, #52]	; (8006194 <__libc_init_array+0x3c>)
 800615e:	1b64      	subs	r4, r4, r5
 8006160:	10a4      	asrs	r4, r4, #2
 8006162:	2600      	movs	r6, #0
 8006164:	42a6      	cmp	r6, r4
 8006166:	d109      	bne.n	800617c <__libc_init_array+0x24>
 8006168:	4d0b      	ldr	r5, [pc, #44]	; (8006198 <__libc_init_array+0x40>)
 800616a:	4c0c      	ldr	r4, [pc, #48]	; (800619c <__libc_init_array+0x44>)
 800616c:	f002 fe4e 	bl	8008e0c <_init>
 8006170:	1b64      	subs	r4, r4, r5
 8006172:	10a4      	asrs	r4, r4, #2
 8006174:	2600      	movs	r6, #0
 8006176:	42a6      	cmp	r6, r4
 8006178:	d105      	bne.n	8006186 <__libc_init_array+0x2e>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006180:	4798      	blx	r3
 8006182:	3601      	adds	r6, #1
 8006184:	e7ee      	b.n	8006164 <__libc_init_array+0xc>
 8006186:	f855 3b04 	ldr.w	r3, [r5], #4
 800618a:	4798      	blx	r3
 800618c:	3601      	adds	r6, #1
 800618e:	e7f2      	b.n	8006176 <__libc_init_array+0x1e>
 8006190:	080092a4 	.word	0x080092a4
 8006194:	080092a4 	.word	0x080092a4
 8006198:	080092a4 	.word	0x080092a4
 800619c:	080092ac 	.word	0x080092ac

080061a0 <memset>:
 80061a0:	4402      	add	r2, r0
 80061a2:	4603      	mov	r3, r0
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d100      	bne.n	80061aa <memset+0xa>
 80061a8:	4770      	bx	lr
 80061aa:	f803 1b01 	strb.w	r1, [r3], #1
 80061ae:	e7f9      	b.n	80061a4 <memset+0x4>

080061b0 <__cvt>:
 80061b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	ec55 4b10 	vmov	r4, r5, d0
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	460e      	mov	r6, r1
 80061bc:	4619      	mov	r1, r3
 80061be:	462b      	mov	r3, r5
 80061c0:	bfbb      	ittet	lt
 80061c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061c6:	461d      	movlt	r5, r3
 80061c8:	2300      	movge	r3, #0
 80061ca:	232d      	movlt	r3, #45	; 0x2d
 80061cc:	700b      	strb	r3, [r1, #0]
 80061ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061d4:	4691      	mov	r9, r2
 80061d6:	f023 0820 	bic.w	r8, r3, #32
 80061da:	bfbc      	itt	lt
 80061dc:	4622      	movlt	r2, r4
 80061de:	4614      	movlt	r4, r2
 80061e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061e4:	d005      	beq.n	80061f2 <__cvt+0x42>
 80061e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ea:	d100      	bne.n	80061ee <__cvt+0x3e>
 80061ec:	3601      	adds	r6, #1
 80061ee:	2102      	movs	r1, #2
 80061f0:	e000      	b.n	80061f4 <__cvt+0x44>
 80061f2:	2103      	movs	r1, #3
 80061f4:	ab03      	add	r3, sp, #12
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	ab02      	add	r3, sp, #8
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	ec45 4b10 	vmov	d0, r4, r5
 8006200:	4653      	mov	r3, sl
 8006202:	4632      	mov	r2, r6
 8006204:	f000 fee8 	bl	8006fd8 <_dtoa_r>
 8006208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800620c:	4607      	mov	r7, r0
 800620e:	d102      	bne.n	8006216 <__cvt+0x66>
 8006210:	f019 0f01 	tst.w	r9, #1
 8006214:	d022      	beq.n	800625c <__cvt+0xac>
 8006216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800621a:	eb07 0906 	add.w	r9, r7, r6
 800621e:	d110      	bne.n	8006242 <__cvt+0x92>
 8006220:	783b      	ldrb	r3, [r7, #0]
 8006222:	2b30      	cmp	r3, #48	; 0x30
 8006224:	d10a      	bne.n	800623c <__cvt+0x8c>
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006232:	b918      	cbnz	r0, 800623c <__cvt+0x8c>
 8006234:	f1c6 0601 	rsb	r6, r6, #1
 8006238:	f8ca 6000 	str.w	r6, [sl]
 800623c:	f8da 3000 	ldr.w	r3, [sl]
 8006240:	4499      	add	r9, r3
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800624e:	b108      	cbz	r0, 8006254 <__cvt+0xa4>
 8006250:	f8cd 900c 	str.w	r9, [sp, #12]
 8006254:	2230      	movs	r2, #48	; 0x30
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	454b      	cmp	r3, r9
 800625a:	d307      	bcc.n	800626c <__cvt+0xbc>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006260:	1bdb      	subs	r3, r3, r7
 8006262:	4638      	mov	r0, r7
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	b004      	add	sp, #16
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	9103      	str	r1, [sp, #12]
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e7f0      	b.n	8006256 <__cvt+0xa6>

08006274 <__exponent>:
 8006274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006276:	4603      	mov	r3, r0
 8006278:	2900      	cmp	r1, #0
 800627a:	bfb8      	it	lt
 800627c:	4249      	neglt	r1, r1
 800627e:	f803 2b02 	strb.w	r2, [r3], #2
 8006282:	bfb4      	ite	lt
 8006284:	222d      	movlt	r2, #45	; 0x2d
 8006286:	222b      	movge	r2, #43	; 0x2b
 8006288:	2909      	cmp	r1, #9
 800628a:	7042      	strb	r2, [r0, #1]
 800628c:	dd2a      	ble.n	80062e4 <__exponent+0x70>
 800628e:	f10d 0407 	add.w	r4, sp, #7
 8006292:	46a4      	mov	ip, r4
 8006294:	270a      	movs	r7, #10
 8006296:	46a6      	mov	lr, r4
 8006298:	460a      	mov	r2, r1
 800629a:	fb91 f6f7 	sdiv	r6, r1, r7
 800629e:	fb07 1516 	mls	r5, r7, r6, r1
 80062a2:	3530      	adds	r5, #48	; 0x30
 80062a4:	2a63      	cmp	r2, #99	; 0x63
 80062a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80062aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062ae:	4631      	mov	r1, r6
 80062b0:	dcf1      	bgt.n	8006296 <__exponent+0x22>
 80062b2:	3130      	adds	r1, #48	; 0x30
 80062b4:	f1ae 0502 	sub.w	r5, lr, #2
 80062b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062bc:	1c44      	adds	r4, r0, #1
 80062be:	4629      	mov	r1, r5
 80062c0:	4561      	cmp	r1, ip
 80062c2:	d30a      	bcc.n	80062da <__exponent+0x66>
 80062c4:	f10d 0209 	add.w	r2, sp, #9
 80062c8:	eba2 020e 	sub.w	r2, r2, lr
 80062cc:	4565      	cmp	r5, ip
 80062ce:	bf88      	it	hi
 80062d0:	2200      	movhi	r2, #0
 80062d2:	4413      	add	r3, r2
 80062d4:	1a18      	subs	r0, r3, r0
 80062d6:	b003      	add	sp, #12
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062e2:	e7ed      	b.n	80062c0 <__exponent+0x4c>
 80062e4:	2330      	movs	r3, #48	; 0x30
 80062e6:	3130      	adds	r1, #48	; 0x30
 80062e8:	7083      	strb	r3, [r0, #2]
 80062ea:	70c1      	strb	r1, [r0, #3]
 80062ec:	1d03      	adds	r3, r0, #4
 80062ee:	e7f1      	b.n	80062d4 <__exponent+0x60>

080062f0 <_printf_float>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	ed2d 8b02 	vpush	{d8}
 80062f8:	b08d      	sub	sp, #52	; 0x34
 80062fa:	460c      	mov	r4, r1
 80062fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006300:	4616      	mov	r6, r2
 8006302:	461f      	mov	r7, r3
 8006304:	4605      	mov	r5, r0
 8006306:	f001 fe0b 	bl	8007f20 <_localeconv_r>
 800630a:	f8d0 a000 	ldr.w	sl, [r0]
 800630e:	4650      	mov	r0, sl
 8006310:	f7f9 ff5e 	bl	80001d0 <strlen>
 8006314:	2300      	movs	r3, #0
 8006316:	930a      	str	r3, [sp, #40]	; 0x28
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	f8d8 3000 	ldr.w	r3, [r8]
 8006320:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006324:	3307      	adds	r3, #7
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	f103 0208 	add.w	r2, r3, #8
 800632e:	f8c8 2000 	str.w	r2, [r8]
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800633a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800633e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	f8cd 8018 	str.w	r8, [sp, #24]
 8006348:	ee08 0a10 	vmov	s16, r0
 800634c:	4b9f      	ldr	r3, [pc, #636]	; (80065cc <_printf_float+0x2dc>)
 800634e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	f7fa fbe9 	bl	8000b2c <__aeabi_dcmpun>
 800635a:	bb88      	cbnz	r0, 80063c0 <_printf_float+0xd0>
 800635c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006360:	4b9a      	ldr	r3, [pc, #616]	; (80065cc <_printf_float+0x2dc>)
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	f7fa fbc3 	bl	8000af0 <__aeabi_dcmple>
 800636a:	bb48      	cbnz	r0, 80063c0 <_printf_float+0xd0>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4640      	mov	r0, r8
 8006372:	4649      	mov	r1, r9
 8006374:	f7fa fbb2 	bl	8000adc <__aeabi_dcmplt>
 8006378:	b110      	cbz	r0, 8006380 <_printf_float+0x90>
 800637a:	232d      	movs	r3, #45	; 0x2d
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	4b93      	ldr	r3, [pc, #588]	; (80065d0 <_printf_float+0x2e0>)
 8006382:	4894      	ldr	r0, [pc, #592]	; (80065d4 <_printf_float+0x2e4>)
 8006384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006388:	bf94      	ite	ls
 800638a:	4698      	movls	r8, r3
 800638c:	4680      	movhi	r8, r0
 800638e:	2303      	movs	r3, #3
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	f023 0204 	bic.w	r2, r3, #4
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	f04f 0900 	mov.w	r9, #0
 800639e:	9700      	str	r7, [sp, #0]
 80063a0:	4633      	mov	r3, r6
 80063a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 f9d8 	bl	800675c <_printf_common>
 80063ac:	3001      	adds	r0, #1
 80063ae:	f040 8090 	bne.w	80064d2 <_printf_float+0x1e2>
 80063b2:	f04f 30ff 	mov.w	r0, #4294967295
 80063b6:	b00d      	add	sp, #52	; 0x34
 80063b8:	ecbd 8b02 	vpop	{d8}
 80063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7fa fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80063cc:	b140      	cbz	r0, 80063e0 <_printf_float+0xf0>
 80063ce:	464b      	mov	r3, r9
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bfbc      	itt	lt
 80063d4:	232d      	movlt	r3, #45	; 0x2d
 80063d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063da:	487f      	ldr	r0, [pc, #508]	; (80065d8 <_printf_float+0x2e8>)
 80063dc:	4b7f      	ldr	r3, [pc, #508]	; (80065dc <_printf_float+0x2ec>)
 80063de:	e7d1      	b.n	8006384 <_printf_float+0x94>
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063e6:	9206      	str	r2, [sp, #24]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	d13f      	bne.n	800646c <_printf_float+0x17c>
 80063ec:	2306      	movs	r3, #6
 80063ee:	6063      	str	r3, [r4, #4]
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	6861      	ldr	r1, [r4, #4]
 80063f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063f8:	2300      	movs	r3, #0
 80063fa:	9303      	str	r3, [sp, #12]
 80063fc:	ab0a      	add	r3, sp, #40	; 0x28
 80063fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006402:	ab09      	add	r3, sp, #36	; 0x24
 8006404:	ec49 8b10 	vmov	d0, r8, r9
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	6022      	str	r2, [r4, #0]
 800640c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006410:	4628      	mov	r0, r5
 8006412:	f7ff fecd 	bl	80061b0 <__cvt>
 8006416:	9b06      	ldr	r3, [sp, #24]
 8006418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641a:	2b47      	cmp	r3, #71	; 0x47
 800641c:	4680      	mov	r8, r0
 800641e:	d108      	bne.n	8006432 <_printf_float+0x142>
 8006420:	1cc8      	adds	r0, r1, #3
 8006422:	db02      	blt.n	800642a <_printf_float+0x13a>
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	4299      	cmp	r1, r3
 8006428:	dd41      	ble.n	80064ae <_printf_float+0x1be>
 800642a:	f1ab 0b02 	sub.w	fp, fp, #2
 800642e:	fa5f fb8b 	uxtb.w	fp, fp
 8006432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006436:	d820      	bhi.n	800647a <_printf_float+0x18a>
 8006438:	3901      	subs	r1, #1
 800643a:	465a      	mov	r2, fp
 800643c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006440:	9109      	str	r1, [sp, #36]	; 0x24
 8006442:	f7ff ff17 	bl	8006274 <__exponent>
 8006446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006448:	1813      	adds	r3, r2, r0
 800644a:	2a01      	cmp	r2, #1
 800644c:	4681      	mov	r9, r0
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	dc02      	bgt.n	8006458 <_printf_float+0x168>
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	07d2      	lsls	r2, r2, #31
 8006456:	d501      	bpl.n	800645c <_printf_float+0x16c>
 8006458:	3301      	adds	r3, #1
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006460:	2b00      	cmp	r3, #0
 8006462:	d09c      	beq.n	800639e <_printf_float+0xae>
 8006464:	232d      	movs	r3, #45	; 0x2d
 8006466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800646a:	e798      	b.n	800639e <_printf_float+0xae>
 800646c:	9a06      	ldr	r2, [sp, #24]
 800646e:	2a47      	cmp	r2, #71	; 0x47
 8006470:	d1be      	bne.n	80063f0 <_printf_float+0x100>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1bc      	bne.n	80063f0 <_printf_float+0x100>
 8006476:	2301      	movs	r3, #1
 8006478:	e7b9      	b.n	80063ee <_printf_float+0xfe>
 800647a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800647e:	d118      	bne.n	80064b2 <_printf_float+0x1c2>
 8006480:	2900      	cmp	r1, #0
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	dd0b      	ble.n	800649e <_printf_float+0x1ae>
 8006486:	6121      	str	r1, [r4, #16]
 8006488:	b913      	cbnz	r3, 8006490 <_printf_float+0x1a0>
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	07d0      	lsls	r0, r2, #31
 800648e:	d502      	bpl.n	8006496 <_printf_float+0x1a6>
 8006490:	3301      	adds	r3, #1
 8006492:	440b      	add	r3, r1
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	65a1      	str	r1, [r4, #88]	; 0x58
 8006498:	f04f 0900 	mov.w	r9, #0
 800649c:	e7de      	b.n	800645c <_printf_float+0x16c>
 800649e:	b913      	cbnz	r3, 80064a6 <_printf_float+0x1b6>
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	07d2      	lsls	r2, r2, #31
 80064a4:	d501      	bpl.n	80064aa <_printf_float+0x1ba>
 80064a6:	3302      	adds	r3, #2
 80064a8:	e7f4      	b.n	8006494 <_printf_float+0x1a4>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e7f2      	b.n	8006494 <_printf_float+0x1a4>
 80064ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b4:	4299      	cmp	r1, r3
 80064b6:	db05      	blt.n	80064c4 <_printf_float+0x1d4>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	6121      	str	r1, [r4, #16]
 80064bc:	07d8      	lsls	r0, r3, #31
 80064be:	d5ea      	bpl.n	8006496 <_printf_float+0x1a6>
 80064c0:	1c4b      	adds	r3, r1, #1
 80064c2:	e7e7      	b.n	8006494 <_printf_float+0x1a4>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	bfd4      	ite	le
 80064c8:	f1c1 0202 	rsble	r2, r1, #2
 80064cc:	2201      	movgt	r2, #1
 80064ce:	4413      	add	r3, r2
 80064d0:	e7e0      	b.n	8006494 <_printf_float+0x1a4>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	055a      	lsls	r2, r3, #21
 80064d6:	d407      	bmi.n	80064e8 <_printf_float+0x1f8>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	4642      	mov	r2, r8
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	d12c      	bne.n	8006540 <_printf_float+0x250>
 80064e6:	e764      	b.n	80063b2 <_printf_float+0xc2>
 80064e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064ec:	f240 80e0 	bls.w	80066b0 <_printf_float+0x3c0>
 80064f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064f4:	2200      	movs	r2, #0
 80064f6:	2300      	movs	r3, #0
 80064f8:	f7fa fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d034      	beq.n	800656a <_printf_float+0x27a>
 8006500:	4a37      	ldr	r2, [pc, #220]	; (80065e0 <_printf_float+0x2f0>)
 8006502:	2301      	movs	r3, #1
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af51 	beq.w	80063b2 <_printf_float+0xc2>
 8006510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006514:	429a      	cmp	r2, r3
 8006516:	db02      	blt.n	800651e <_printf_float+0x22e>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07d8      	lsls	r0, r3, #31
 800651c:	d510      	bpl.n	8006540 <_printf_float+0x250>
 800651e:	ee18 3a10 	vmov	r3, s16
 8006522:	4652      	mov	r2, sl
 8006524:	4631      	mov	r1, r6
 8006526:	4628      	mov	r0, r5
 8006528:	47b8      	blx	r7
 800652a:	3001      	adds	r0, #1
 800652c:	f43f af41 	beq.w	80063b2 <_printf_float+0xc2>
 8006530:	f04f 0800 	mov.w	r8, #0
 8006534:	f104 091a 	add.w	r9, r4, #26
 8006538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653a:	3b01      	subs	r3, #1
 800653c:	4543      	cmp	r3, r8
 800653e:	dc09      	bgt.n	8006554 <_printf_float+0x264>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	079b      	lsls	r3, r3, #30
 8006544:	f100 8105 	bmi.w	8006752 <_printf_float+0x462>
 8006548:	68e0      	ldr	r0, [r4, #12]
 800654a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654c:	4298      	cmp	r0, r3
 800654e:	bfb8      	it	lt
 8006550:	4618      	movlt	r0, r3
 8006552:	e730      	b.n	80063b6 <_printf_float+0xc6>
 8006554:	2301      	movs	r3, #1
 8006556:	464a      	mov	r2, r9
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f af27 	beq.w	80063b2 <_printf_float+0xc2>
 8006564:	f108 0801 	add.w	r8, r8, #1
 8006568:	e7e6      	b.n	8006538 <_printf_float+0x248>
 800656a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	dc39      	bgt.n	80065e4 <_printf_float+0x2f4>
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <_printf_float+0x2f0>)
 8006572:	2301      	movs	r3, #1
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	47b8      	blx	r7
 800657a:	3001      	adds	r0, #1
 800657c:	f43f af19 	beq.w	80063b2 <_printf_float+0xc2>
 8006580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006584:	4313      	orrs	r3, r2
 8006586:	d102      	bne.n	800658e <_printf_float+0x29e>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	d5d8      	bpl.n	8006540 <_printf_float+0x250>
 800658e:	ee18 3a10 	vmov	r3, s16
 8006592:	4652      	mov	r2, sl
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f af09 	beq.w	80063b2 <_printf_float+0xc2>
 80065a0:	f04f 0900 	mov.w	r9, #0
 80065a4:	f104 0a1a 	add.w	sl, r4, #26
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	425b      	negs	r3, r3
 80065ac:	454b      	cmp	r3, r9
 80065ae:	dc01      	bgt.n	80065b4 <_printf_float+0x2c4>
 80065b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b2:	e792      	b.n	80064da <_printf_float+0x1ea>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4652      	mov	r2, sl
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f aef7 	beq.w	80063b2 <_printf_float+0xc2>
 80065c4:	f109 0901 	add.w	r9, r9, #1
 80065c8:	e7ee      	b.n	80065a8 <_printf_float+0x2b8>
 80065ca:	bf00      	nop
 80065cc:	7fefffff 	.word	0x7fefffff
 80065d0:	08008ec8 	.word	0x08008ec8
 80065d4:	08008ecc 	.word	0x08008ecc
 80065d8:	08008ed4 	.word	0x08008ed4
 80065dc:	08008ed0 	.word	0x08008ed0
 80065e0:	08008ed8 	.word	0x08008ed8
 80065e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e8:	429a      	cmp	r2, r3
 80065ea:	bfa8      	it	ge
 80065ec:	461a      	movge	r2, r3
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	4691      	mov	r9, r2
 80065f2:	dc37      	bgt.n	8006664 <_printf_float+0x374>
 80065f4:	f04f 0b00 	mov.w	fp, #0
 80065f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065fc:	f104 021a 	add.w	r2, r4, #26
 8006600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	eba3 0309 	sub.w	r3, r3, r9
 8006608:	455b      	cmp	r3, fp
 800660a:	dc33      	bgt.n	8006674 <_printf_float+0x384>
 800660c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006610:	429a      	cmp	r2, r3
 8006612:	db3b      	blt.n	800668c <_printf_float+0x39c>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	07da      	lsls	r2, r3, #31
 8006618:	d438      	bmi.n	800668c <_printf_float+0x39c>
 800661a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	eba2 0901 	sub.w	r9, r2, r1
 8006626:	4599      	cmp	r9, r3
 8006628:	bfa8      	it	ge
 800662a:	4699      	movge	r9, r3
 800662c:	f1b9 0f00 	cmp.w	r9, #0
 8006630:	dc35      	bgt.n	800669e <_printf_float+0x3ae>
 8006632:	f04f 0800 	mov.w	r8, #0
 8006636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800663a:	f104 0a1a 	add.w	sl, r4, #26
 800663e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	eba3 0309 	sub.w	r3, r3, r9
 8006648:	4543      	cmp	r3, r8
 800664a:	f77f af79 	ble.w	8006540 <_printf_float+0x250>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f aeaa 	beq.w	80063b2 <_printf_float+0xc2>
 800665e:	f108 0801 	add.w	r8, r8, #1
 8006662:	e7ec      	b.n	800663e <_printf_float+0x34e>
 8006664:	4613      	mov	r3, r2
 8006666:	4631      	mov	r1, r6
 8006668:	4642      	mov	r2, r8
 800666a:	4628      	mov	r0, r5
 800666c:	47b8      	blx	r7
 800666e:	3001      	adds	r0, #1
 8006670:	d1c0      	bne.n	80065f4 <_printf_float+0x304>
 8006672:	e69e      	b.n	80063b2 <_printf_float+0xc2>
 8006674:	2301      	movs	r3, #1
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	9205      	str	r2, [sp, #20]
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	f43f ae97 	beq.w	80063b2 <_printf_float+0xc2>
 8006684:	9a05      	ldr	r2, [sp, #20]
 8006686:	f10b 0b01 	add.w	fp, fp, #1
 800668a:	e7b9      	b.n	8006600 <_printf_float+0x310>
 800668c:	ee18 3a10 	vmov	r3, s16
 8006690:	4652      	mov	r2, sl
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	d1be      	bne.n	800661a <_printf_float+0x32a>
 800669c:	e689      	b.n	80063b2 <_printf_float+0xc2>
 800669e:	9a05      	ldr	r2, [sp, #20]
 80066a0:	464b      	mov	r3, r9
 80066a2:	4442      	add	r2, r8
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	d1c1      	bne.n	8006632 <_printf_float+0x342>
 80066ae:	e680      	b.n	80063b2 <_printf_float+0xc2>
 80066b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b2:	2a01      	cmp	r2, #1
 80066b4:	dc01      	bgt.n	80066ba <_printf_float+0x3ca>
 80066b6:	07db      	lsls	r3, r3, #31
 80066b8:	d538      	bpl.n	800672c <_printf_float+0x43c>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4642      	mov	r2, r8
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f ae74 	beq.w	80063b2 <_printf_float+0xc2>
 80066ca:	ee18 3a10 	vmov	r3, s16
 80066ce:	4652      	mov	r2, sl
 80066d0:	4631      	mov	r1, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	47b8      	blx	r7
 80066d6:	3001      	adds	r0, #1
 80066d8:	f43f ae6b 	beq.w	80063b2 <_printf_float+0xc2>
 80066dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	f7fa f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e8:	b9d8      	cbnz	r0, 8006722 <_printf_float+0x432>
 80066ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ec:	f108 0201 	add.w	r2, r8, #1
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	d10e      	bne.n	800671a <_printf_float+0x42a>
 80066fc:	e659      	b.n	80063b2 <_printf_float+0xc2>
 80066fe:	2301      	movs	r3, #1
 8006700:	4652      	mov	r2, sl
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f ae52 	beq.w	80063b2 <_printf_float+0xc2>
 800670e:	f108 0801 	add.w	r8, r8, #1
 8006712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006714:	3b01      	subs	r3, #1
 8006716:	4543      	cmp	r3, r8
 8006718:	dcf1      	bgt.n	80066fe <_printf_float+0x40e>
 800671a:	464b      	mov	r3, r9
 800671c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006720:	e6dc      	b.n	80064dc <_printf_float+0x1ec>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	f104 0a1a 	add.w	sl, r4, #26
 800672a:	e7f2      	b.n	8006712 <_printf_float+0x422>
 800672c:	2301      	movs	r3, #1
 800672e:	4642      	mov	r2, r8
 8006730:	e7df      	b.n	80066f2 <_printf_float+0x402>
 8006732:	2301      	movs	r3, #1
 8006734:	464a      	mov	r2, r9
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae38 	beq.w	80063b2 <_printf_float+0xc2>
 8006742:	f108 0801 	add.w	r8, r8, #1
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800674a:	1a5b      	subs	r3, r3, r1
 800674c:	4543      	cmp	r3, r8
 800674e:	dcf0      	bgt.n	8006732 <_printf_float+0x442>
 8006750:	e6fa      	b.n	8006548 <_printf_float+0x258>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	f104 0919 	add.w	r9, r4, #25
 800675a:	e7f4      	b.n	8006746 <_printf_float+0x456>

0800675c <_printf_common>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	4616      	mov	r6, r2
 8006762:	4699      	mov	r9, r3
 8006764:	688a      	ldr	r2, [r1, #8]
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800676c:	4293      	cmp	r3, r2
 800676e:	bfb8      	it	lt
 8006770:	4613      	movlt	r3, r2
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006778:	4607      	mov	r7, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b10a      	cbz	r2, 8006782 <_printf_common+0x26>
 800677e:	3301      	adds	r3, #1
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	0699      	lsls	r1, r3, #26
 8006786:	bf42      	ittt	mi
 8006788:	6833      	ldrmi	r3, [r6, #0]
 800678a:	3302      	addmi	r3, #2
 800678c:	6033      	strmi	r3, [r6, #0]
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	f015 0506 	ands.w	r5, r5, #6
 8006794:	d106      	bne.n	80067a4 <_printf_common+0x48>
 8006796:	f104 0a19 	add.w	sl, r4, #25
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	6832      	ldr	r2, [r6, #0]
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dc26      	bgt.n	80067f2 <_printf_common+0x96>
 80067a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067a8:	1e13      	subs	r3, r2, #0
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	bf18      	it	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d42b      	bmi.n	800680c <_printf_common+0xb0>
 80067b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d01e      	beq.n	8006800 <_printf_common+0xa4>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	68e5      	ldr	r5, [r4, #12]
 80067c6:	6832      	ldr	r2, [r6, #0]
 80067c8:	f003 0306 	and.w	r3, r3, #6
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	bf08      	it	eq
 80067d0:	1aad      	subeq	r5, r5, r2
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	6922      	ldr	r2, [r4, #16]
 80067d6:	bf0c      	ite	eq
 80067d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067dc:	2500      	movne	r5, #0
 80067de:	4293      	cmp	r3, r2
 80067e0:	bfc4      	itt	gt
 80067e2:	1a9b      	subgt	r3, r3, r2
 80067e4:	18ed      	addgt	r5, r5, r3
 80067e6:	2600      	movs	r6, #0
 80067e8:	341a      	adds	r4, #26
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d11a      	bne.n	8006824 <_printf_common+0xc8>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e008      	b.n	8006804 <_printf_common+0xa8>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4652      	mov	r2, sl
 80067f6:	4649      	mov	r1, r9
 80067f8:	4638      	mov	r0, r7
 80067fa:	47c0      	blx	r8
 80067fc:	3001      	adds	r0, #1
 80067fe:	d103      	bne.n	8006808 <_printf_common+0xac>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	3501      	adds	r5, #1
 800680a:	e7c6      	b.n	800679a <_printf_common+0x3e>
 800680c:	18e1      	adds	r1, r4, r3
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	2030      	movs	r0, #48	; 0x30
 8006812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006816:	4422      	add	r2, r4
 8006818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800681c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006820:	3302      	adds	r3, #2
 8006822:	e7c7      	b.n	80067b4 <_printf_common+0x58>
 8006824:	2301      	movs	r3, #1
 8006826:	4622      	mov	r2, r4
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d0e6      	beq.n	8006800 <_printf_common+0xa4>
 8006832:	3601      	adds	r6, #1
 8006834:	e7d9      	b.n	80067ea <_printf_common+0x8e>
	...

08006838 <_printf_i>:
 8006838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	460c      	mov	r4, r1
 800683e:	4691      	mov	r9, r2
 8006840:	7e27      	ldrb	r7, [r4, #24]
 8006842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006844:	2f78      	cmp	r7, #120	; 0x78
 8006846:	4680      	mov	r8, r0
 8006848:	469a      	mov	sl, r3
 800684a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800684e:	d807      	bhi.n	8006860 <_printf_i+0x28>
 8006850:	2f62      	cmp	r7, #98	; 0x62
 8006852:	d80a      	bhi.n	800686a <_printf_i+0x32>
 8006854:	2f00      	cmp	r7, #0
 8006856:	f000 80d8 	beq.w	8006a0a <_printf_i+0x1d2>
 800685a:	2f58      	cmp	r7, #88	; 0x58
 800685c:	f000 80a3 	beq.w	80069a6 <_printf_i+0x16e>
 8006860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006868:	e03a      	b.n	80068e0 <_printf_i+0xa8>
 800686a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800686e:	2b15      	cmp	r3, #21
 8006870:	d8f6      	bhi.n	8006860 <_printf_i+0x28>
 8006872:	a001      	add	r0, pc, #4	; (adr r0, 8006878 <_printf_i+0x40>)
 8006874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068e5 	.word	0x080068e5
 8006880:	08006861 	.word	0x08006861
 8006884:	08006861 	.word	0x08006861
 8006888:	08006861 	.word	0x08006861
 800688c:	08006861 	.word	0x08006861
 8006890:	080068e5 	.word	0x080068e5
 8006894:	08006861 	.word	0x08006861
 8006898:	08006861 	.word	0x08006861
 800689c:	08006861 	.word	0x08006861
 80068a0:	08006861 	.word	0x08006861
 80068a4:	080069f1 	.word	0x080069f1
 80068a8:	08006915 	.word	0x08006915
 80068ac:	080069d3 	.word	0x080069d3
 80068b0:	08006861 	.word	0x08006861
 80068b4:	08006861 	.word	0x08006861
 80068b8:	08006a13 	.word	0x08006a13
 80068bc:	08006861 	.word	0x08006861
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006861 	.word	0x08006861
 80068c8:	08006861 	.word	0x08006861
 80068cc:	080069db 	.word	0x080069db
 80068d0:	680b      	ldr	r3, [r1, #0]
 80068d2:	1d1a      	adds	r2, r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	600a      	str	r2, [r1, #0]
 80068d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0a3      	b.n	8006a2c <_printf_i+0x1f4>
 80068e4:	6825      	ldr	r5, [r4, #0]
 80068e6:	6808      	ldr	r0, [r1, #0]
 80068e8:	062e      	lsls	r6, r5, #24
 80068ea:	f100 0304 	add.w	r3, r0, #4
 80068ee:	d50a      	bpl.n	8006906 <_printf_i+0xce>
 80068f0:	6805      	ldr	r5, [r0, #0]
 80068f2:	600b      	str	r3, [r1, #0]
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	da03      	bge.n	8006900 <_printf_i+0xc8>
 80068f8:	232d      	movs	r3, #45	; 0x2d
 80068fa:	426d      	negs	r5, r5
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006900:	485e      	ldr	r0, [pc, #376]	; (8006a7c <_printf_i+0x244>)
 8006902:	230a      	movs	r3, #10
 8006904:	e019      	b.n	800693a <_printf_i+0x102>
 8006906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800690a:	6805      	ldr	r5, [r0, #0]
 800690c:	600b      	str	r3, [r1, #0]
 800690e:	bf18      	it	ne
 8006910:	b22d      	sxthne	r5, r5
 8006912:	e7ef      	b.n	80068f4 <_printf_i+0xbc>
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	1d18      	adds	r0, r3, #4
 800691a:	6008      	str	r0, [r1, #0]
 800691c:	0628      	lsls	r0, r5, #24
 800691e:	d501      	bpl.n	8006924 <_printf_i+0xec>
 8006920:	681d      	ldr	r5, [r3, #0]
 8006922:	e002      	b.n	800692a <_printf_i+0xf2>
 8006924:	0669      	lsls	r1, r5, #25
 8006926:	d5fb      	bpl.n	8006920 <_printf_i+0xe8>
 8006928:	881d      	ldrh	r5, [r3, #0]
 800692a:	4854      	ldr	r0, [pc, #336]	; (8006a7c <_printf_i+0x244>)
 800692c:	2f6f      	cmp	r7, #111	; 0x6f
 800692e:	bf0c      	ite	eq
 8006930:	2308      	moveq	r3, #8
 8006932:	230a      	movne	r3, #10
 8006934:	2100      	movs	r1, #0
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800693a:	6866      	ldr	r6, [r4, #4]
 800693c:	60a6      	str	r6, [r4, #8]
 800693e:	2e00      	cmp	r6, #0
 8006940:	bfa2      	ittt	ge
 8006942:	6821      	ldrge	r1, [r4, #0]
 8006944:	f021 0104 	bicge.w	r1, r1, #4
 8006948:	6021      	strge	r1, [r4, #0]
 800694a:	b90d      	cbnz	r5, 8006950 <_printf_i+0x118>
 800694c:	2e00      	cmp	r6, #0
 800694e:	d04d      	beq.n	80069ec <_printf_i+0x1b4>
 8006950:	4616      	mov	r6, r2
 8006952:	fbb5 f1f3 	udiv	r1, r5, r3
 8006956:	fb03 5711 	mls	r7, r3, r1, r5
 800695a:	5dc7      	ldrb	r7, [r0, r7]
 800695c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006960:	462f      	mov	r7, r5
 8006962:	42bb      	cmp	r3, r7
 8006964:	460d      	mov	r5, r1
 8006966:	d9f4      	bls.n	8006952 <_printf_i+0x11a>
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10b      	bne.n	8006984 <_printf_i+0x14c>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07df      	lsls	r7, r3, #31
 8006970:	d508      	bpl.n	8006984 <_printf_i+0x14c>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4299      	cmp	r1, r3
 8006978:	bfde      	ittt	le
 800697a:	2330      	movle	r3, #48	; 0x30
 800697c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006984:	1b92      	subs	r2, r2, r6
 8006986:	6122      	str	r2, [r4, #16]
 8006988:	f8cd a000 	str.w	sl, [sp]
 800698c:	464b      	mov	r3, r9
 800698e:	aa03      	add	r2, sp, #12
 8006990:	4621      	mov	r1, r4
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fee2 	bl	800675c <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	d14c      	bne.n	8006a36 <_printf_i+0x1fe>
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	b004      	add	sp, #16
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	4835      	ldr	r0, [pc, #212]	; (8006a7c <_printf_i+0x244>)
 80069a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	680e      	ldr	r6, [r1, #0]
 80069b0:	061f      	lsls	r7, r3, #24
 80069b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80069b6:	600e      	str	r6, [r1, #0]
 80069b8:	d514      	bpl.n	80069e4 <_printf_i+0x1ac>
 80069ba:	07d9      	lsls	r1, r3, #31
 80069bc:	bf44      	itt	mi
 80069be:	f043 0320 	orrmi.w	r3, r3, #32
 80069c2:	6023      	strmi	r3, [r4, #0]
 80069c4:	b91d      	cbnz	r5, 80069ce <_printf_i+0x196>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f023 0320 	bic.w	r3, r3, #32
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	2310      	movs	r3, #16
 80069d0:	e7b0      	b.n	8006934 <_printf_i+0xfc>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	2378      	movs	r3, #120	; 0x78
 80069dc:	4828      	ldr	r0, [pc, #160]	; (8006a80 <_printf_i+0x248>)
 80069de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069e2:	e7e3      	b.n	80069ac <_printf_i+0x174>
 80069e4:	065e      	lsls	r6, r3, #25
 80069e6:	bf48      	it	mi
 80069e8:	b2ad      	uxthmi	r5, r5
 80069ea:	e7e6      	b.n	80069ba <_printf_i+0x182>
 80069ec:	4616      	mov	r6, r2
 80069ee:	e7bb      	b.n	8006968 <_printf_i+0x130>
 80069f0:	680b      	ldr	r3, [r1, #0]
 80069f2:	6826      	ldr	r6, [r4, #0]
 80069f4:	6960      	ldr	r0, [r4, #20]
 80069f6:	1d1d      	adds	r5, r3, #4
 80069f8:	600d      	str	r5, [r1, #0]
 80069fa:	0635      	lsls	r5, r6, #24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0x1cc>
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <_printf_i+0x1d2>
 8006a04:	0671      	lsls	r1, r6, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0x1c8>
 8006a08:	8018      	strh	r0, [r3, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	4616      	mov	r6, r2
 8006a10:	e7ba      	b.n	8006988 <_printf_i+0x150>
 8006a12:	680b      	ldr	r3, [r1, #0]
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	600a      	str	r2, [r1, #0]
 8006a18:	681e      	ldr	r6, [r3, #0]
 8006a1a:	6862      	ldr	r2, [r4, #4]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7f9 fbde 	bl	80001e0 <memchr>
 8006a24:	b108      	cbz	r0, 8006a2a <_printf_i+0x1f2>
 8006a26:	1b80      	subs	r0, r0, r6
 8006a28:	6060      	str	r0, [r4, #4]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a34:	e7a8      	b.n	8006988 <_printf_i+0x150>
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	4632      	mov	r2, r6
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	47d0      	blx	sl
 8006a40:	3001      	adds	r0, #1
 8006a42:	d0ab      	beq.n	800699c <_printf_i+0x164>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	079b      	lsls	r3, r3, #30
 8006a48:	d413      	bmi.n	8006a72 <_printf_i+0x23a>
 8006a4a:	68e0      	ldr	r0, [r4, #12]
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	4298      	cmp	r0, r3
 8006a50:	bfb8      	it	lt
 8006a52:	4618      	movlt	r0, r3
 8006a54:	e7a4      	b.n	80069a0 <_printf_i+0x168>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4632      	mov	r2, r6
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	47d0      	blx	sl
 8006a60:	3001      	adds	r0, #1
 8006a62:	d09b      	beq.n	800699c <_printf_i+0x164>
 8006a64:	3501      	adds	r5, #1
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	9903      	ldr	r1, [sp, #12]
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dcf2      	bgt.n	8006a56 <_printf_i+0x21e>
 8006a70:	e7eb      	b.n	8006a4a <_printf_i+0x212>
 8006a72:	2500      	movs	r5, #0
 8006a74:	f104 0619 	add.w	r6, r4, #25
 8006a78:	e7f5      	b.n	8006a66 <_printf_i+0x22e>
 8006a7a:	bf00      	nop
 8006a7c:	08008eda 	.word	0x08008eda
 8006a80:	08008eeb 	.word	0x08008eeb

08006a84 <iprintf>:
 8006a84:	b40f      	push	{r0, r1, r2, r3}
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <iprintf+0x2c>)
 8006a88:	b513      	push	{r0, r1, r4, lr}
 8006a8a:	681c      	ldr	r4, [r3, #0]
 8006a8c:	b124      	cbz	r4, 8006a98 <iprintf+0x14>
 8006a8e:	69a3      	ldr	r3, [r4, #24]
 8006a90:	b913      	cbnz	r3, 8006a98 <iprintf+0x14>
 8006a92:	4620      	mov	r0, r4
 8006a94:	f001 f9a6 	bl	8007de4 <__sinit>
 8006a98:	ab05      	add	r3, sp, #20
 8006a9a:	9a04      	ldr	r2, [sp, #16]
 8006a9c:	68a1      	ldr	r1, [r4, #8]
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f001 ff21 	bl	80088e8 <_vfiprintf_r>
 8006aa6:	b002      	add	sp, #8
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <_puts_r>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	460e      	mov	r6, r1
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b118      	cbz	r0, 8006ac4 <_puts_r+0x10>
 8006abc:	6983      	ldr	r3, [r0, #24]
 8006abe:	b90b      	cbnz	r3, 8006ac4 <_puts_r+0x10>
 8006ac0:	f001 f990 	bl	8007de4 <__sinit>
 8006ac4:	69ab      	ldr	r3, [r5, #24]
 8006ac6:	68ac      	ldr	r4, [r5, #8]
 8006ac8:	b913      	cbnz	r3, 8006ad0 <_puts_r+0x1c>
 8006aca:	4628      	mov	r0, r5
 8006acc:	f001 f98a 	bl	8007de4 <__sinit>
 8006ad0:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <_puts_r+0xd0>)
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	d120      	bne.n	8006b18 <_puts_r+0x64>
 8006ad6:	686c      	ldr	r4, [r5, #4]
 8006ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ada:	07db      	lsls	r3, r3, #31
 8006adc:	d405      	bmi.n	8006aea <_puts_r+0x36>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	0598      	lsls	r0, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_puts_r+0x36>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f001 fa20 	bl	8007f2a <__retarget_lock_acquire_recursive>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	0719      	lsls	r1, r3, #28
 8006aee:	d51d      	bpl.n	8006b2c <_puts_r+0x78>
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	b1db      	cbz	r3, 8006b2c <_puts_r+0x78>
 8006af4:	3e01      	subs	r6, #1
 8006af6:	68a3      	ldr	r3, [r4, #8]
 8006af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006afc:	3b01      	subs	r3, #1
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	bb39      	cbnz	r1, 8006b52 <_puts_r+0x9e>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da38      	bge.n	8006b78 <_puts_r+0xc4>
 8006b06:	4622      	mov	r2, r4
 8006b08:	210a      	movs	r1, #10
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 f916 	bl	8006d3c <__swbuf_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d011      	beq.n	8006b38 <_puts_r+0x84>
 8006b14:	250a      	movs	r5, #10
 8006b16:	e011      	b.n	8006b3c <_puts_r+0x88>
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <_puts_r+0xd4>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d101      	bne.n	8006b22 <_puts_r+0x6e>
 8006b1e:	68ac      	ldr	r4, [r5, #8]
 8006b20:	e7da      	b.n	8006ad8 <_puts_r+0x24>
 8006b22:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <_puts_r+0xd8>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	bf08      	it	eq
 8006b28:	68ec      	ldreq	r4, [r5, #12]
 8006b2a:	e7d5      	b.n	8006ad8 <_puts_r+0x24>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f956 	bl	8006de0 <__swsetup_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d0dd      	beq.n	8006af4 <_puts_r+0x40>
 8006b38:	f04f 35ff 	mov.w	r5, #4294967295
 8006b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b3e:	07da      	lsls	r2, r3, #31
 8006b40:	d405      	bmi.n	8006b4e <_puts_r+0x9a>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	059b      	lsls	r3, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_puts_r+0x9a>
 8006b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b4a:	f001 f9ef 	bl	8007f2c <__retarget_lock_release_recursive>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	bd70      	pop	{r4, r5, r6, pc}
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da04      	bge.n	8006b60 <_puts_r+0xac>
 8006b56:	69a2      	ldr	r2, [r4, #24]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	dc06      	bgt.n	8006b6a <_puts_r+0xb6>
 8006b5c:	290a      	cmp	r1, #10
 8006b5e:	d004      	beq.n	8006b6a <_puts_r+0xb6>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	6022      	str	r2, [r4, #0]
 8006b66:	7019      	strb	r1, [r3, #0]
 8006b68:	e7c5      	b.n	8006af6 <_puts_r+0x42>
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f8e5 	bl	8006d3c <__swbuf_r>
 8006b72:	3001      	adds	r0, #1
 8006b74:	d1bf      	bne.n	8006af6 <_puts_r+0x42>
 8006b76:	e7df      	b.n	8006b38 <_puts_r+0x84>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	250a      	movs	r5, #10
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	701d      	strb	r5, [r3, #0]
 8006b82:	e7db      	b.n	8006b3c <_puts_r+0x88>
 8006b84:	08008fb0 	.word	0x08008fb0
 8006b88:	08008fd0 	.word	0x08008fd0
 8006b8c:	08008f90 	.word	0x08008f90

08006b90 <puts>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <puts+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f7ff bf8d 	b.w	8006ab4 <_puts_r>
 8006b9a:	bf00      	nop
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <setbuf>:
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2202      	moveq	r2, #2
 8006baa:	2200      	movne	r2, #0
 8006bac:	f000 b800 	b.w	8006bb0 <setvbuf>

08006bb0 <setvbuf>:
 8006bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	461d      	mov	r5, r3
 8006bb6:	4b5d      	ldr	r3, [pc, #372]	; (8006d2c <setvbuf+0x17c>)
 8006bb8:	681f      	ldr	r7, [r3, #0]
 8006bba:	4604      	mov	r4, r0
 8006bbc:	460e      	mov	r6, r1
 8006bbe:	4690      	mov	r8, r2
 8006bc0:	b127      	cbz	r7, 8006bcc <setvbuf+0x1c>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	b913      	cbnz	r3, 8006bcc <setvbuf+0x1c>
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	f001 f90c 	bl	8007de4 <__sinit>
 8006bcc:	4b58      	ldr	r3, [pc, #352]	; (8006d30 <setvbuf+0x180>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d167      	bne.n	8006ca2 <setvbuf+0xf2>
 8006bd2:	687c      	ldr	r4, [r7, #4]
 8006bd4:	f1b8 0f02 	cmp.w	r8, #2
 8006bd8:	d006      	beq.n	8006be8 <setvbuf+0x38>
 8006bda:	f1b8 0f01 	cmp.w	r8, #1
 8006bde:	f200 809f 	bhi.w	8006d20 <setvbuf+0x170>
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	f2c0 809c 	blt.w	8006d20 <setvbuf+0x170>
 8006be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bea:	07db      	lsls	r3, r3, #31
 8006bec:	d405      	bmi.n	8006bfa <setvbuf+0x4a>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	0598      	lsls	r0, r3, #22
 8006bf2:	d402      	bmi.n	8006bfa <setvbuf+0x4a>
 8006bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bf6:	f001 f998 	bl	8007f2a <__retarget_lock_acquire_recursive>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f001 f85d 	bl	8007cbc <_fflush_r>
 8006c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c04:	b141      	cbz	r1, 8006c18 <setvbuf+0x68>
 8006c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d002      	beq.n	8006c14 <setvbuf+0x64>
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f001 fd96 	bl	8008740 <_free_r>
 8006c14:	2300      	movs	r3, #0
 8006c16:	6363      	str	r3, [r4, #52]	; 0x34
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61a3      	str	r3, [r4, #24]
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	0619      	lsls	r1, r3, #24
 8006c22:	d503      	bpl.n	8006c2c <setvbuf+0x7c>
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	4638      	mov	r0, r7
 8006c28:	f001 fd8a 	bl	8008740 <_free_r>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	f1b8 0f02 	cmp.w	r8, #2
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	d06c      	beq.n	8006d18 <setvbuf+0x168>
 8006c3e:	ab01      	add	r3, sp, #4
 8006c40:	466a      	mov	r2, sp
 8006c42:	4621      	mov	r1, r4
 8006c44:	4638      	mov	r0, r7
 8006c46:	f001 f972 	bl	8007f2e <__swhatbuf_r>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	4318      	orrs	r0, r3
 8006c4e:	81a0      	strh	r0, [r4, #12]
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d130      	bne.n	8006cb6 <setvbuf+0x106>
 8006c54:	9d00      	ldr	r5, [sp, #0]
 8006c56:	4628      	mov	r0, r5
 8006c58:	f001 f9ce 	bl	8007ff8 <malloc>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d155      	bne.n	8006d0e <setvbuf+0x15e>
 8006c62:	f8dd 9000 	ldr.w	r9, [sp]
 8006c66:	45a9      	cmp	r9, r5
 8006c68:	d14a      	bne.n	8006d00 <setvbuf+0x150>
 8006c6a:	f04f 35ff 	mov.w	r5, #4294967295
 8006c6e:	2200      	movs	r2, #0
 8006c70:	60a2      	str	r2, [r4, #8]
 8006c72:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006c76:	6022      	str	r2, [r4, #0]
 8006c78:	6122      	str	r2, [r4, #16]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c80:	6162      	str	r2, [r4, #20]
 8006c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c84:	f043 0302 	orr.w	r3, r3, #2
 8006c88:	07d2      	lsls	r2, r2, #31
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	d405      	bmi.n	8006c9a <setvbuf+0xea>
 8006c8e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c92:	d102      	bne.n	8006c9a <setvbuf+0xea>
 8006c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c96:	f001 f949 	bl	8007f2c <__retarget_lock_release_recursive>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	b003      	add	sp, #12
 8006c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ca2:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <setvbuf+0x184>)
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	d101      	bne.n	8006cac <setvbuf+0xfc>
 8006ca8:	68bc      	ldr	r4, [r7, #8]
 8006caa:	e793      	b.n	8006bd4 <setvbuf+0x24>
 8006cac:	4b22      	ldr	r3, [pc, #136]	; (8006d38 <setvbuf+0x188>)
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	bf08      	it	eq
 8006cb2:	68fc      	ldreq	r4, [r7, #12]
 8006cb4:	e78e      	b.n	8006bd4 <setvbuf+0x24>
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	d0cd      	beq.n	8006c56 <setvbuf+0xa6>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	b913      	cbnz	r3, 8006cc4 <setvbuf+0x114>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f001 f890 	bl	8007de4 <__sinit>
 8006cc4:	f1b8 0f01 	cmp.w	r8, #1
 8006cc8:	bf08      	it	eq
 8006cca:	89a3      	ldrheq	r3, [r4, #12]
 8006ccc:	6026      	str	r6, [r4, #0]
 8006cce:	bf04      	itt	eq
 8006cd0:	f043 0301 	orreq.w	r3, r3, #1
 8006cd4:	81a3      	strheq	r3, [r4, #12]
 8006cd6:	89a2      	ldrh	r2, [r4, #12]
 8006cd8:	f012 0308 	ands.w	r3, r2, #8
 8006cdc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ce0:	d01c      	beq.n	8006d1c <setvbuf+0x16c>
 8006ce2:	07d3      	lsls	r3, r2, #31
 8006ce4:	bf41      	itttt	mi
 8006ce6:	2300      	movmi	r3, #0
 8006ce8:	426d      	negmi	r5, r5
 8006cea:	60a3      	strmi	r3, [r4, #8]
 8006cec:	61a5      	strmi	r5, [r4, #24]
 8006cee:	bf58      	it	pl
 8006cf0:	60a5      	strpl	r5, [r4, #8]
 8006cf2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006cf4:	f015 0501 	ands.w	r5, r5, #1
 8006cf8:	d115      	bne.n	8006d26 <setvbuf+0x176>
 8006cfa:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006cfe:	e7c8      	b.n	8006c92 <setvbuf+0xe2>
 8006d00:	4648      	mov	r0, r9
 8006d02:	f001 f979 	bl	8007ff8 <malloc>
 8006d06:	4606      	mov	r6, r0
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0ae      	beq.n	8006c6a <setvbuf+0xba>
 8006d0c:	464d      	mov	r5, r9
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	e7d0      	b.n	8006cba <setvbuf+0x10a>
 8006d18:	2500      	movs	r5, #0
 8006d1a:	e7a8      	b.n	8006c6e <setvbuf+0xbe>
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	e7e8      	b.n	8006cf2 <setvbuf+0x142>
 8006d20:	f04f 35ff 	mov.w	r5, #4294967295
 8006d24:	e7b9      	b.n	8006c9a <setvbuf+0xea>
 8006d26:	2500      	movs	r5, #0
 8006d28:	e7b7      	b.n	8006c9a <setvbuf+0xea>
 8006d2a:	bf00      	nop
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	08008fb0 	.word	0x08008fb0
 8006d34:	08008fd0 	.word	0x08008fd0
 8006d38:	08008f90 	.word	0x08008f90

08006d3c <__swbuf_r>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	460e      	mov	r6, r1
 8006d40:	4614      	mov	r4, r2
 8006d42:	4605      	mov	r5, r0
 8006d44:	b118      	cbz	r0, 8006d4e <__swbuf_r+0x12>
 8006d46:	6983      	ldr	r3, [r0, #24]
 8006d48:	b90b      	cbnz	r3, 8006d4e <__swbuf_r+0x12>
 8006d4a:	f001 f84b 	bl	8007de4 <__sinit>
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <__swbuf_r+0x98>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d12b      	bne.n	8006dac <__swbuf_r+0x70>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	69a3      	ldr	r3, [r4, #24]
 8006d58:	60a3      	str	r3, [r4, #8]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	071a      	lsls	r2, r3, #28
 8006d5e:	d52f      	bpl.n	8006dc0 <__swbuf_r+0x84>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	b36b      	cbz	r3, 8006dc0 <__swbuf_r+0x84>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	6963      	ldr	r3, [r4, #20]
 8006d6c:	b2f6      	uxtb	r6, r6
 8006d6e:	4283      	cmp	r3, r0
 8006d70:	4637      	mov	r7, r6
 8006d72:	dc04      	bgt.n	8006d7e <__swbuf_r+0x42>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 ffa0 	bl	8007cbc <_fflush_r>
 8006d7c:	bb30      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60a3      	str	r3, [r4, #8]
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	6022      	str	r2, [r4, #0]
 8006d8a:	701e      	strb	r6, [r3, #0]
 8006d8c:	6963      	ldr	r3, [r4, #20]
 8006d8e:	3001      	adds	r0, #1
 8006d90:	4283      	cmp	r3, r0
 8006d92:	d004      	beq.n	8006d9e <__swbuf_r+0x62>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d506      	bpl.n	8006da8 <__swbuf_r+0x6c>
 8006d9a:	2e0a      	cmp	r6, #10
 8006d9c:	d104      	bne.n	8006da8 <__swbuf_r+0x6c>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4628      	mov	r0, r5
 8006da2:	f000 ff8b 	bl	8007cbc <_fflush_r>
 8006da6:	b988      	cbnz	r0, 8006dcc <__swbuf_r+0x90>
 8006da8:	4638      	mov	r0, r7
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <__swbuf_r+0x9c>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d101      	bne.n	8006db6 <__swbuf_r+0x7a>
 8006db2:	68ac      	ldr	r4, [r5, #8]
 8006db4:	e7cf      	b.n	8006d56 <__swbuf_r+0x1a>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <__swbuf_r+0xa0>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	bf08      	it	eq
 8006dbc:	68ec      	ldreq	r4, [r5, #12]
 8006dbe:	e7ca      	b.n	8006d56 <__swbuf_r+0x1a>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f80c 	bl	8006de0 <__swsetup_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0cb      	beq.n	8006d64 <__swbuf_r+0x28>
 8006dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd0:	e7ea      	b.n	8006da8 <__swbuf_r+0x6c>
 8006dd2:	bf00      	nop
 8006dd4:	08008fb0 	.word	0x08008fb0
 8006dd8:	08008fd0 	.word	0x08008fd0
 8006ddc:	08008f90 	.word	0x08008f90

08006de0 <__swsetup_r>:
 8006de0:	4b32      	ldr	r3, [pc, #200]	; (8006eac <__swsetup_r+0xcc>)
 8006de2:	b570      	push	{r4, r5, r6, lr}
 8006de4:	681d      	ldr	r5, [r3, #0]
 8006de6:	4606      	mov	r6, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	b125      	cbz	r5, 8006df6 <__swsetup_r+0x16>
 8006dec:	69ab      	ldr	r3, [r5, #24]
 8006dee:	b913      	cbnz	r3, 8006df6 <__swsetup_r+0x16>
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fff7 	bl	8007de4 <__sinit>
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <__swsetup_r+0xd0>)
 8006df8:	429c      	cmp	r4, r3
 8006dfa:	d10f      	bne.n	8006e1c <__swsetup_r+0x3c>
 8006dfc:	686c      	ldr	r4, [r5, #4]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e04:	0719      	lsls	r1, r3, #28
 8006e06:	d42c      	bmi.n	8006e62 <__swsetup_r+0x82>
 8006e08:	06dd      	lsls	r5, r3, #27
 8006e0a:	d411      	bmi.n	8006e30 <__swsetup_r+0x50>
 8006e0c:	2309      	movs	r3, #9
 8006e0e:	6033      	str	r3, [r6, #0]
 8006e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	e03e      	b.n	8006e9a <__swsetup_r+0xba>
 8006e1c:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <__swsetup_r+0xd4>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	d101      	bne.n	8006e26 <__swsetup_r+0x46>
 8006e22:	68ac      	ldr	r4, [r5, #8]
 8006e24:	e7eb      	b.n	8006dfe <__swsetup_r+0x1e>
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <__swsetup_r+0xd8>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	bf08      	it	eq
 8006e2c:	68ec      	ldreq	r4, [r5, #12]
 8006e2e:	e7e6      	b.n	8006dfe <__swsetup_r+0x1e>
 8006e30:	0758      	lsls	r0, r3, #29
 8006e32:	d512      	bpl.n	8006e5a <__swsetup_r+0x7a>
 8006e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e36:	b141      	cbz	r1, 8006e4a <__swsetup_r+0x6a>
 8006e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	d002      	beq.n	8006e46 <__swsetup_r+0x66>
 8006e40:	4630      	mov	r0, r6
 8006e42:	f001 fc7d 	bl	8008740 <_free_r>
 8006e46:	2300      	movs	r3, #0
 8006e48:	6363      	str	r3, [r4, #52]	; 0x34
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	2300      	movs	r3, #0
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	f043 0308 	orr.w	r3, r3, #8
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	b94b      	cbnz	r3, 8006e7a <__swsetup_r+0x9a>
 8006e66:	89a3      	ldrh	r3, [r4, #12]
 8006e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e70:	d003      	beq.n	8006e7a <__swsetup_r+0x9a>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4630      	mov	r0, r6
 8006e76:	f001 f87f 	bl	8007f78 <__smakebuf_r>
 8006e7a:	89a0      	ldrh	r0, [r4, #12]
 8006e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e80:	f010 0301 	ands.w	r3, r0, #1
 8006e84:	d00a      	beq.n	8006e9c <__swsetup_r+0xbc>
 8006e86:	2300      	movs	r3, #0
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6963      	ldr	r3, [r4, #20]
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	61a3      	str	r3, [r4, #24]
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	b943      	cbnz	r3, 8006ea6 <__swsetup_r+0xc6>
 8006e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e98:	d1ba      	bne.n	8006e10 <__swsetup_r+0x30>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	0781      	lsls	r1, r0, #30
 8006e9e:	bf58      	it	pl
 8006ea0:	6963      	ldrpl	r3, [r4, #20]
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	e7f4      	b.n	8006e90 <__swsetup_r+0xb0>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e7f7      	b.n	8006e9a <__swsetup_r+0xba>
 8006eaa:	bf00      	nop
 8006eac:	2000000c 	.word	0x2000000c
 8006eb0:	08008fb0 	.word	0x08008fb0
 8006eb4:	08008fd0 	.word	0x08008fd0
 8006eb8:	08008f90 	.word	0x08008f90

08006ebc <quorem>:
 8006ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	6903      	ldr	r3, [r0, #16]
 8006ec2:	690c      	ldr	r4, [r1, #16]
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	f2c0 8081 	blt.w	8006fce <quorem+0x112>
 8006ecc:	3c01      	subs	r4, #1
 8006ece:	f101 0814 	add.w	r8, r1, #20
 8006ed2:	f100 0514 	add.w	r5, r0, #20
 8006ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ef4:	d331      	bcc.n	8006f5a <quorem+0x9e>
 8006ef6:	f04f 0e00 	mov.w	lr, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	46ac      	mov	ip, r5
 8006efe:	46f2      	mov	sl, lr
 8006f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f04:	b293      	uxth	r3, r2
 8006f06:	fb06 e303 	mla	r3, r6, r3, lr
 8006f0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ebaa 0303 	sub.w	r3, sl, r3
 8006f14:	0c12      	lsrs	r2, r2, #16
 8006f16:	f8dc a000 	ldr.w	sl, [ip]
 8006f1a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f26:	fa1f fa82 	uxth.w	sl, r2
 8006f2a:	f8dc 2000 	ldr.w	r2, [ip]
 8006f2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3c:	4581      	cmp	r9, r0
 8006f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f46:	d2db      	bcs.n	8006f00 <quorem+0x44>
 8006f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f4c:	b92b      	cbnz	r3, 8006f5a <quorem+0x9e>
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	429d      	cmp	r5, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	d32e      	bcc.n	8006fb6 <quorem+0xfa>
 8006f58:	613c      	str	r4, [r7, #16]
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f001 fae0 	bl	8008520 <__mcmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	db24      	blt.n	8006fae <quorem+0xf2>
 8006f64:	3601      	adds	r6, #1
 8006f66:	4628      	mov	r0, r5
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f70:	f8d0 e000 	ldr.w	lr, [r0]
 8006f74:	b293      	uxth	r3, r2
 8006f76:	ebac 0303 	sub.w	r3, ip, r3
 8006f7a:	0c12      	lsrs	r2, r2, #16
 8006f7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8e:	45c1      	cmp	r9, r8
 8006f90:	f840 3b04 	str.w	r3, [r0], #4
 8006f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f98:	d2e8      	bcs.n	8006f6c <quorem+0xb0>
 8006f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa2:	b922      	cbnz	r2, 8006fae <quorem+0xf2>
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	d30a      	bcc.n	8006fc2 <quorem+0x106>
 8006fac:	613c      	str	r4, [r7, #16]
 8006fae:	4630      	mov	r0, r6
 8006fb0:	b003      	add	sp, #12
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d1cc      	bne.n	8006f58 <quorem+0x9c>
 8006fbe:	3c01      	subs	r4, #1
 8006fc0:	e7c7      	b.n	8006f52 <quorem+0x96>
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d1f0      	bne.n	8006fac <quorem+0xf0>
 8006fca:	3c01      	subs	r4, #1
 8006fcc:	e7eb      	b.n	8006fa6 <quorem+0xea>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e7ee      	b.n	8006fb0 <quorem+0xf4>
 8006fd2:	0000      	movs	r0, r0
 8006fd4:	0000      	movs	r0, r0
	...

08006fd8 <_dtoa_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ed2d 8b02 	vpush	{d8}
 8006fe0:	ec57 6b10 	vmov	r6, r7, d0
 8006fe4:	b095      	sub	sp, #84	; 0x54
 8006fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff8:	b975      	cbnz	r5, 8007018 <_dtoa_r+0x40>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f000 fffc 	bl	8007ff8 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	6260      	str	r0, [r4, #36]	; 0x24
 8007004:	b920      	cbnz	r0, 8007010 <_dtoa_r+0x38>
 8007006:	4bb2      	ldr	r3, [pc, #712]	; (80072d0 <_dtoa_r+0x2f8>)
 8007008:	21ea      	movs	r1, #234	; 0xea
 800700a:	48b2      	ldr	r0, [pc, #712]	; (80072d4 <_dtoa_r+0x2fc>)
 800700c:	f001 fe02 	bl	8008c14 <__assert_func>
 8007010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007014:	6005      	str	r5, [r0, #0]
 8007016:	60c5      	str	r5, [r0, #12]
 8007018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800701a:	6819      	ldr	r1, [r3, #0]
 800701c:	b151      	cbz	r1, 8007034 <_dtoa_r+0x5c>
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	604a      	str	r2, [r1, #4]
 8007022:	2301      	movs	r3, #1
 8007024:	4093      	lsls	r3, r2
 8007026:	608b      	str	r3, [r1, #8]
 8007028:	4620      	mov	r0, r4
 800702a:	f001 f83b 	bl	80080a4 <_Bfree>
 800702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	1e3b      	subs	r3, r7, #0
 8007036:	bfb9      	ittee	lt
 8007038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800703c:	9303      	strlt	r3, [sp, #12]
 800703e:	2300      	movge	r3, #0
 8007040:	f8c8 3000 	strge.w	r3, [r8]
 8007044:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007048:	4ba3      	ldr	r3, [pc, #652]	; (80072d8 <_dtoa_r+0x300>)
 800704a:	bfbc      	itt	lt
 800704c:	2201      	movlt	r2, #1
 800704e:	f8c8 2000 	strlt.w	r2, [r8]
 8007052:	ea33 0309 	bics.w	r3, r3, r9
 8007056:	d11b      	bne.n	8007090 <_dtoa_r+0xb8>
 8007058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800705a:	f242 730f 	movw	r3, #9999	; 0x270f
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007064:	4333      	orrs	r3, r6
 8007066:	f000 857a 	beq.w	8007b5e <_dtoa_r+0xb86>
 800706a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706c:	b963      	cbnz	r3, 8007088 <_dtoa_r+0xb0>
 800706e:	4b9b      	ldr	r3, [pc, #620]	; (80072dc <_dtoa_r+0x304>)
 8007070:	e024      	b.n	80070bc <_dtoa_r+0xe4>
 8007072:	4b9b      	ldr	r3, [pc, #620]	; (80072e0 <_dtoa_r+0x308>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	9800      	ldr	r0, [sp, #0]
 800707e:	b015      	add	sp, #84	; 0x54
 8007080:	ecbd 8b02 	vpop	{d8}
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007088:	4b94      	ldr	r3, [pc, #592]	; (80072dc <_dtoa_r+0x304>)
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	3303      	adds	r3, #3
 800708e:	e7f3      	b.n	8007078 <_dtoa_r+0xa0>
 8007090:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	ec51 0b17 	vmov	r0, r1, d7
 800709a:	2300      	movs	r3, #0
 800709c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80070a0:	f7f9 fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a4:	4680      	mov	r8, r0
 80070a6:	b158      	cbz	r0, 80070c0 <_dtoa_r+0xe8>
 80070a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070aa:	2301      	movs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8551 	beq.w	8007b58 <_dtoa_r+0xb80>
 80070b6:	488b      	ldr	r0, [pc, #556]	; (80072e4 <_dtoa_r+0x30c>)
 80070b8:	6018      	str	r0, [r3, #0]
 80070ba:	1e43      	subs	r3, r0, #1
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	e7dd      	b.n	800707c <_dtoa_r+0xa4>
 80070c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80070c4:	aa12      	add	r2, sp, #72	; 0x48
 80070c6:	a913      	add	r1, sp, #76	; 0x4c
 80070c8:	4620      	mov	r0, r4
 80070ca:	f001 facd 	bl	8008668 <__d2b>
 80070ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070d2:	4683      	mov	fp, r0
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	d07c      	beq.n	80071d2 <_dtoa_r+0x1fa>
 80070d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070f2:	4b7d      	ldr	r3, [pc, #500]	; (80072e8 <_dtoa_r+0x310>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 f8c5 	bl	8000288 <__aeabi_dsub>
 80070fe:	a36e      	add	r3, pc, #440	; (adr r3, 80072b8 <_dtoa_r+0x2e0>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 fa78 	bl	80005f8 <__aeabi_dmul>
 8007108:	a36d      	add	r3, pc, #436	; (adr r3, 80072c0 <_dtoa_r+0x2e8>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f8bd 	bl	800028c <__adddf3>
 8007112:	4606      	mov	r6, r0
 8007114:	4628      	mov	r0, r5
 8007116:	460f      	mov	r7, r1
 8007118:	f7f9 fa04 	bl	8000524 <__aeabi_i2d>
 800711c:	a36a      	add	r3, pc, #424	; (adr r3, 80072c8 <_dtoa_r+0x2f0>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4630      	mov	r0, r6
 800712c:	4639      	mov	r1, r7
 800712e:	f7f9 f8ad 	bl	800028c <__adddf3>
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	f7f9 fd0f 	bl	8000b58 <__aeabi_d2iz>
 800713a:	2200      	movs	r2, #0
 800713c:	4682      	mov	sl, r0
 800713e:	2300      	movs	r3, #0
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 fcca 	bl	8000adc <__aeabi_dcmplt>
 8007148:	b148      	cbz	r0, 800715e <_dtoa_r+0x186>
 800714a:	4650      	mov	r0, sl
 800714c:	f7f9 f9ea 	bl	8000524 <__aeabi_i2d>
 8007150:	4632      	mov	r2, r6
 8007152:	463b      	mov	r3, r7
 8007154:	f7f9 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007158:	b908      	cbnz	r0, 800715e <_dtoa_r+0x186>
 800715a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800715e:	f1ba 0f16 	cmp.w	sl, #22
 8007162:	d854      	bhi.n	800720e <_dtoa_r+0x236>
 8007164:	4b61      	ldr	r3, [pc, #388]	; (80072ec <_dtoa_r+0x314>)
 8007166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007172:	f7f9 fcb3 	bl	8000adc <__aeabi_dcmplt>
 8007176:	2800      	cmp	r0, #0
 8007178:	d04b      	beq.n	8007212 <_dtoa_r+0x23a>
 800717a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800717e:	2300      	movs	r3, #0
 8007180:	930e      	str	r3, [sp, #56]	; 0x38
 8007182:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007184:	1b5d      	subs	r5, r3, r5
 8007186:	1e6b      	subs	r3, r5, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	bf43      	ittte	mi
 800718c:	2300      	movmi	r3, #0
 800718e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007192:	9304      	strmi	r3, [sp, #16]
 8007194:	f04f 0800 	movpl.w	r8, #0
 8007198:	f1ba 0f00 	cmp.w	sl, #0
 800719c:	db3b      	blt.n	8007216 <_dtoa_r+0x23e>
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80071a4:	4453      	add	r3, sl
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	2300      	movs	r3, #0
 80071aa:	9306      	str	r3, [sp, #24]
 80071ac:	9b05      	ldr	r3, [sp, #20]
 80071ae:	2b09      	cmp	r3, #9
 80071b0:	d869      	bhi.n	8007286 <_dtoa_r+0x2ae>
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	bfc4      	itt	gt
 80071b6:	3b04      	subgt	r3, #4
 80071b8:	9305      	strgt	r3, [sp, #20]
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	f1a3 0302 	sub.w	r3, r3, #2
 80071c0:	bfcc      	ite	gt
 80071c2:	2500      	movgt	r5, #0
 80071c4:	2501      	movle	r5, #1
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d869      	bhi.n	800729e <_dtoa_r+0x2c6>
 80071ca:	e8df f003 	tbb	[pc, r3]
 80071ce:	4e2c      	.short	0x4e2c
 80071d0:	5a4c      	.short	0x5a4c
 80071d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071d6:	441d      	add	r5, r3
 80071d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071dc:	2b20      	cmp	r3, #32
 80071de:	bfc1      	itttt	gt
 80071e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80071ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071f0:	bfda      	itte	le
 80071f2:	f1c3 0320 	rsble	r3, r3, #32
 80071f6:	fa06 f003 	lslle.w	r0, r6, r3
 80071fa:	4318      	orrgt	r0, r3
 80071fc:	f7f9 f982 	bl	8000504 <__aeabi_ui2d>
 8007200:	2301      	movs	r3, #1
 8007202:	4606      	mov	r6, r0
 8007204:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007208:	3d01      	subs	r5, #1
 800720a:	9310      	str	r3, [sp, #64]	; 0x40
 800720c:	e771      	b.n	80070f2 <_dtoa_r+0x11a>
 800720e:	2301      	movs	r3, #1
 8007210:	e7b6      	b.n	8007180 <_dtoa_r+0x1a8>
 8007212:	900e      	str	r0, [sp, #56]	; 0x38
 8007214:	e7b5      	b.n	8007182 <_dtoa_r+0x1aa>
 8007216:	f1ca 0300 	rsb	r3, sl, #0
 800721a:	9306      	str	r3, [sp, #24]
 800721c:	2300      	movs	r3, #0
 800721e:	eba8 080a 	sub.w	r8, r8, sl
 8007222:	930d      	str	r3, [sp, #52]	; 0x34
 8007224:	e7c2      	b.n	80071ac <_dtoa_r+0x1d4>
 8007226:	2300      	movs	r3, #0
 8007228:	9308      	str	r3, [sp, #32]
 800722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	dc39      	bgt.n	80072a4 <_dtoa_r+0x2cc>
 8007230:	f04f 0901 	mov.w	r9, #1
 8007234:	f8cd 9004 	str.w	r9, [sp, #4]
 8007238:	464b      	mov	r3, r9
 800723a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800723e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007240:	2200      	movs	r2, #0
 8007242:	6042      	str	r2, [r0, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	f102 0614 	add.w	r6, r2, #20
 800724a:	429e      	cmp	r6, r3
 800724c:	6841      	ldr	r1, [r0, #4]
 800724e:	d92f      	bls.n	80072b0 <_dtoa_r+0x2d8>
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fee7 	bl	8008024 <_Balloc>
 8007256:	9000      	str	r0, [sp, #0]
 8007258:	2800      	cmp	r0, #0
 800725a:	d14b      	bne.n	80072f4 <_dtoa_r+0x31c>
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <_dtoa_r+0x318>)
 800725e:	4602      	mov	r2, r0
 8007260:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007264:	e6d1      	b.n	800700a <_dtoa_r+0x32>
 8007266:	2301      	movs	r3, #1
 8007268:	e7de      	b.n	8007228 <_dtoa_r+0x250>
 800726a:	2300      	movs	r3, #0
 800726c:	9308      	str	r3, [sp, #32]
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	eb0a 0903 	add.w	r9, sl, r3
 8007274:	f109 0301 	add.w	r3, r9, #1
 8007278:	2b01      	cmp	r3, #1
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	bfb8      	it	lt
 800727e:	2301      	movlt	r3, #1
 8007280:	e7dd      	b.n	800723e <_dtoa_r+0x266>
 8007282:	2301      	movs	r3, #1
 8007284:	e7f2      	b.n	800726c <_dtoa_r+0x294>
 8007286:	2501      	movs	r5, #1
 8007288:	2300      	movs	r3, #0
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	9508      	str	r5, [sp, #32]
 800728e:	f04f 39ff 	mov.w	r9, #4294967295
 8007292:	2200      	movs	r2, #0
 8007294:	f8cd 9004 	str.w	r9, [sp, #4]
 8007298:	2312      	movs	r3, #18
 800729a:	9209      	str	r2, [sp, #36]	; 0x24
 800729c:	e7cf      	b.n	800723e <_dtoa_r+0x266>
 800729e:	2301      	movs	r3, #1
 80072a0:	9308      	str	r3, [sp, #32]
 80072a2:	e7f4      	b.n	800728e <_dtoa_r+0x2b6>
 80072a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80072a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80072ac:	464b      	mov	r3, r9
 80072ae:	e7c6      	b.n	800723e <_dtoa_r+0x266>
 80072b0:	3101      	adds	r1, #1
 80072b2:	6041      	str	r1, [r0, #4]
 80072b4:	0052      	lsls	r2, r2, #1
 80072b6:	e7c6      	b.n	8007246 <_dtoa_r+0x26e>
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	08008f09 	.word	0x08008f09
 80072d4:	08008f20 	.word	0x08008f20
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	08008f05 	.word	0x08008f05
 80072e0:	08008efc 	.word	0x08008efc
 80072e4:	08008ed9 	.word	0x08008ed9
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	08009078 	.word	0x08009078
 80072f0:	08008f7f 	.word	0x08008f7f
 80072f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f6:	9a00      	ldr	r2, [sp, #0]
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	9b01      	ldr	r3, [sp, #4]
 80072fc:	2b0e      	cmp	r3, #14
 80072fe:	f200 80ad 	bhi.w	800745c <_dtoa_r+0x484>
 8007302:	2d00      	cmp	r5, #0
 8007304:	f000 80aa 	beq.w	800745c <_dtoa_r+0x484>
 8007308:	f1ba 0f00 	cmp.w	sl, #0
 800730c:	dd36      	ble.n	800737c <_dtoa_r+0x3a4>
 800730e:	4ac3      	ldr	r2, [pc, #780]	; (800761c <_dtoa_r+0x644>)
 8007310:	f00a 030f 	and.w	r3, sl, #15
 8007314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007318:	ed93 7b00 	vldr	d7, [r3]
 800731c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007320:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007324:	eeb0 8a47 	vmov.f32	s16, s14
 8007328:	eef0 8a67 	vmov.f32	s17, s15
 800732c:	d016      	beq.n	800735c <_dtoa_r+0x384>
 800732e:	4bbc      	ldr	r3, [pc, #752]	; (8007620 <_dtoa_r+0x648>)
 8007330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007338:	f7f9 fa88 	bl	800084c <__aeabi_ddiv>
 800733c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007340:	f007 070f 	and.w	r7, r7, #15
 8007344:	2503      	movs	r5, #3
 8007346:	4eb6      	ldr	r6, [pc, #728]	; (8007620 <_dtoa_r+0x648>)
 8007348:	b957      	cbnz	r7, 8007360 <_dtoa_r+0x388>
 800734a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734e:	ec53 2b18 	vmov	r2, r3, d8
 8007352:	f7f9 fa7b 	bl	800084c <__aeabi_ddiv>
 8007356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800735a:	e029      	b.n	80073b0 <_dtoa_r+0x3d8>
 800735c:	2502      	movs	r5, #2
 800735e:	e7f2      	b.n	8007346 <_dtoa_r+0x36e>
 8007360:	07f9      	lsls	r1, r7, #31
 8007362:	d508      	bpl.n	8007376 <_dtoa_r+0x39e>
 8007364:	ec51 0b18 	vmov	r0, r1, d8
 8007368:	e9d6 2300 	ldrd	r2, r3, [r6]
 800736c:	f7f9 f944 	bl	80005f8 <__aeabi_dmul>
 8007370:	ec41 0b18 	vmov	d8, r0, r1
 8007374:	3501      	adds	r5, #1
 8007376:	107f      	asrs	r7, r7, #1
 8007378:	3608      	adds	r6, #8
 800737a:	e7e5      	b.n	8007348 <_dtoa_r+0x370>
 800737c:	f000 80a6 	beq.w	80074cc <_dtoa_r+0x4f4>
 8007380:	f1ca 0600 	rsb	r6, sl, #0
 8007384:	4ba5      	ldr	r3, [pc, #660]	; (800761c <_dtoa_r+0x644>)
 8007386:	4fa6      	ldr	r7, [pc, #664]	; (8007620 <_dtoa_r+0x648>)
 8007388:	f006 020f 	and.w	r2, r6, #15
 800738c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007398:	f7f9 f92e 	bl	80005f8 <__aeabi_dmul>
 800739c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a0:	1136      	asrs	r6, r6, #4
 80073a2:	2300      	movs	r3, #0
 80073a4:	2502      	movs	r5, #2
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	f040 8085 	bne.w	80074b6 <_dtoa_r+0x4de>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1d2      	bne.n	8007356 <_dtoa_r+0x37e>
 80073b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 808c 	beq.w	80074d0 <_dtoa_r+0x4f8>
 80073b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073bc:	4b99      	ldr	r3, [pc, #612]	; (8007624 <_dtoa_r+0x64c>)
 80073be:	2200      	movs	r2, #0
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f9 fb8a 	bl	8000adc <__aeabi_dcmplt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f000 8081 	beq.w	80074d0 <_dtoa_r+0x4f8>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d07d      	beq.n	80074d0 <_dtoa_r+0x4f8>
 80073d4:	f1b9 0f00 	cmp.w	r9, #0
 80073d8:	dd3c      	ble.n	8007454 <_dtoa_r+0x47c>
 80073da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073de:	9307      	str	r3, [sp, #28]
 80073e0:	2200      	movs	r2, #0
 80073e2:	4b91      	ldr	r3, [pc, #580]	; (8007628 <_dtoa_r+0x650>)
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073f0:	3501      	adds	r5, #1
 80073f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073fa:	4628      	mov	r0, r5
 80073fc:	f7f9 f892 	bl	8000524 <__aeabi_i2d>
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	f7f9 f8f8 	bl	80005f8 <__aeabi_dmul>
 8007408:	4b88      	ldr	r3, [pc, #544]	; (800762c <_dtoa_r+0x654>)
 800740a:	2200      	movs	r2, #0
 800740c:	f7f8 ff3e 	bl	800028c <__adddf3>
 8007410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007418:	9303      	str	r3, [sp, #12]
 800741a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800741c:	2b00      	cmp	r3, #0
 800741e:	d15c      	bne.n	80074da <_dtoa_r+0x502>
 8007420:	4b83      	ldr	r3, [pc, #524]	; (8007630 <_dtoa_r+0x658>)
 8007422:	2200      	movs	r2, #0
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f8 ff2e 	bl	8000288 <__aeabi_dsub>
 800742c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007430:	4606      	mov	r6, r0
 8007432:	460f      	mov	r7, r1
 8007434:	f7f9 fb70 	bl	8000b18 <__aeabi_dcmpgt>
 8007438:	2800      	cmp	r0, #0
 800743a:	f040 8296 	bne.w	800796a <_dtoa_r+0x992>
 800743e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007442:	4630      	mov	r0, r6
 8007444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007448:	4639      	mov	r1, r7
 800744a:	f7f9 fb47 	bl	8000adc <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	f040 8288 	bne.w	8007964 <_dtoa_r+0x98c>
 8007454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800745c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800745e:	2b00      	cmp	r3, #0
 8007460:	f2c0 8158 	blt.w	8007714 <_dtoa_r+0x73c>
 8007464:	f1ba 0f0e 	cmp.w	sl, #14
 8007468:	f300 8154 	bgt.w	8007714 <_dtoa_r+0x73c>
 800746c:	4b6b      	ldr	r3, [pc, #428]	; (800761c <_dtoa_r+0x644>)
 800746e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007472:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	f280 80e3 	bge.w	8007644 <_dtoa_r+0x66c>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f300 80df 	bgt.w	8007644 <_dtoa_r+0x66c>
 8007486:	f040 826d 	bne.w	8007964 <_dtoa_r+0x98c>
 800748a:	4b69      	ldr	r3, [pc, #420]	; (8007630 <_dtoa_r+0x658>)
 800748c:	2200      	movs	r2, #0
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f7f9 f8b1 	bl	80005f8 <__aeabi_dmul>
 8007496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800749a:	f7f9 fb33 	bl	8000b04 <__aeabi_dcmpge>
 800749e:	9e01      	ldr	r6, [sp, #4]
 80074a0:	4637      	mov	r7, r6
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f040 8243 	bne.w	800792e <_dtoa_r+0x956>
 80074a8:	9d00      	ldr	r5, [sp, #0]
 80074aa:	2331      	movs	r3, #49	; 0x31
 80074ac:	f805 3b01 	strb.w	r3, [r5], #1
 80074b0:	f10a 0a01 	add.w	sl, sl, #1
 80074b4:	e23f      	b.n	8007936 <_dtoa_r+0x95e>
 80074b6:	07f2      	lsls	r2, r6, #31
 80074b8:	d505      	bpl.n	80074c6 <_dtoa_r+0x4ee>
 80074ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	3501      	adds	r5, #1
 80074c4:	2301      	movs	r3, #1
 80074c6:	1076      	asrs	r6, r6, #1
 80074c8:	3708      	adds	r7, #8
 80074ca:	e76c      	b.n	80073a6 <_dtoa_r+0x3ce>
 80074cc:	2502      	movs	r5, #2
 80074ce:	e76f      	b.n	80073b0 <_dtoa_r+0x3d8>
 80074d0:	9b01      	ldr	r3, [sp, #4]
 80074d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80074d6:	930c      	str	r3, [sp, #48]	; 0x30
 80074d8:	e78d      	b.n	80073f6 <_dtoa_r+0x41e>
 80074da:	9900      	ldr	r1, [sp, #0]
 80074dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074e0:	4b4e      	ldr	r3, [pc, #312]	; (800761c <_dtoa_r+0x644>)
 80074e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074e6:	4401      	add	r1, r0
 80074e8:	9102      	str	r1, [sp, #8]
 80074ea:	9908      	ldr	r1, [sp, #32]
 80074ec:	eeb0 8a47 	vmov.f32	s16, s14
 80074f0:	eef0 8a67 	vmov.f32	s17, s15
 80074f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d045      	beq.n	800758c <_dtoa_r+0x5b4>
 8007500:	494c      	ldr	r1, [pc, #304]	; (8007634 <_dtoa_r+0x65c>)
 8007502:	2000      	movs	r0, #0
 8007504:	f7f9 f9a2 	bl	800084c <__aeabi_ddiv>
 8007508:	ec53 2b18 	vmov	r2, r3, d8
 800750c:	f7f8 febc 	bl	8000288 <__aeabi_dsub>
 8007510:	9d00      	ldr	r5, [sp, #0]
 8007512:	ec41 0b18 	vmov	d8, r0, r1
 8007516:	4639      	mov	r1, r7
 8007518:	4630      	mov	r0, r6
 800751a:	f7f9 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800751e:	900c      	str	r0, [sp, #48]	; 0x30
 8007520:	f7f9 f800 	bl	8000524 <__aeabi_i2d>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007532:	3330      	adds	r3, #48	; 0x30
 8007534:	f805 3b01 	strb.w	r3, [r5], #1
 8007538:	ec53 2b18 	vmov	r2, r3, d8
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	f7f9 facc 	bl	8000adc <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	d165      	bne.n	8007614 <_dtoa_r+0x63c>
 8007548:	4632      	mov	r2, r6
 800754a:	463b      	mov	r3, r7
 800754c:	4935      	ldr	r1, [pc, #212]	; (8007624 <_dtoa_r+0x64c>)
 800754e:	2000      	movs	r0, #0
 8007550:	f7f8 fe9a 	bl	8000288 <__aeabi_dsub>
 8007554:	ec53 2b18 	vmov	r2, r3, d8
 8007558:	f7f9 fac0 	bl	8000adc <__aeabi_dcmplt>
 800755c:	2800      	cmp	r0, #0
 800755e:	f040 80b9 	bne.w	80076d4 <_dtoa_r+0x6fc>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	429d      	cmp	r5, r3
 8007566:	f43f af75 	beq.w	8007454 <_dtoa_r+0x47c>
 800756a:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <_dtoa_r+0x650>)
 800756c:	ec51 0b18 	vmov	r0, r1, d8
 8007570:	2200      	movs	r2, #0
 8007572:	f7f9 f841 	bl	80005f8 <__aeabi_dmul>
 8007576:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <_dtoa_r+0x650>)
 8007578:	ec41 0b18 	vmov	d8, r0, r1
 800757c:	2200      	movs	r2, #0
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	e7c4      	b.n	8007516 <_dtoa_r+0x53e>
 800758c:	ec51 0b17 	vmov	r0, r1, d7
 8007590:	f7f9 f832 	bl	80005f8 <__aeabi_dmul>
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	9d00      	ldr	r5, [sp, #0]
 8007598:	930c      	str	r3, [sp, #48]	; 0x30
 800759a:	ec41 0b18 	vmov	d8, r0, r1
 800759e:	4639      	mov	r1, r7
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7f9 fad9 	bl	8000b58 <__aeabi_d2iz>
 80075a6:	9011      	str	r0, [sp, #68]	; 0x44
 80075a8:	f7f8 ffbc 	bl	8000524 <__aeabi_i2d>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f8 fe68 	bl	8000288 <__aeabi_dsub>
 80075b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ba:	3330      	adds	r3, #48	; 0x30
 80075bc:	f805 3b01 	strb.w	r3, [r5], #1
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	429d      	cmp	r5, r3
 80075c4:	4606      	mov	r6, r0
 80075c6:	460f      	mov	r7, r1
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	d134      	bne.n	8007638 <_dtoa_r+0x660>
 80075ce:	4b19      	ldr	r3, [pc, #100]	; (8007634 <_dtoa_r+0x65c>)
 80075d0:	ec51 0b18 	vmov	r0, r1, d8
 80075d4:	f7f8 fe5a 	bl	800028c <__adddf3>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d175      	bne.n	80076d4 <_dtoa_r+0x6fc>
 80075e8:	ec53 2b18 	vmov	r2, r3, d8
 80075ec:	4911      	ldr	r1, [pc, #68]	; (8007634 <_dtoa_r+0x65c>)
 80075ee:	2000      	movs	r0, #0
 80075f0:	f7f8 fe4a 	bl	8000288 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8007600:	2800      	cmp	r0, #0
 8007602:	f43f af27 	beq.w	8007454 <_dtoa_r+0x47c>
 8007606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007608:	1e6b      	subs	r3, r5, #1
 800760a:	930c      	str	r3, [sp, #48]	; 0x30
 800760c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d0f8      	beq.n	8007606 <_dtoa_r+0x62e>
 8007614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007618:	e04a      	b.n	80076b0 <_dtoa_r+0x6d8>
 800761a:	bf00      	nop
 800761c:	08009078 	.word	0x08009078
 8007620:	08009050 	.word	0x08009050
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	40240000 	.word	0x40240000
 800762c:	401c0000 	.word	0x401c0000
 8007630:	40140000 	.word	0x40140000
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	4baf      	ldr	r3, [pc, #700]	; (80078f8 <_dtoa_r+0x920>)
 800763a:	f7f8 ffdd 	bl	80005f8 <__aeabi_dmul>
 800763e:	4606      	mov	r6, r0
 8007640:	460f      	mov	r7, r1
 8007642:	e7ac      	b.n	800759e <_dtoa_r+0x5c6>
 8007644:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007648:	9d00      	ldr	r5, [sp, #0]
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f9 f8fb 	bl	800084c <__aeabi_ddiv>
 8007656:	f7f9 fa7f 	bl	8000b58 <__aeabi_d2iz>
 800765a:	9002      	str	r0, [sp, #8]
 800765c:	f7f8 ff62 	bl	8000524 <__aeabi_i2d>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	f7f8 ffc8 	bl	80005f8 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f8 fe0a 	bl	8000288 <__aeabi_dsub>
 8007674:	9e02      	ldr	r6, [sp, #8]
 8007676:	9f01      	ldr	r7, [sp, #4]
 8007678:	3630      	adds	r6, #48	; 0x30
 800767a:	f805 6b01 	strb.w	r6, [r5], #1
 800767e:	9e00      	ldr	r6, [sp, #0]
 8007680:	1bae      	subs	r6, r5, r6
 8007682:	42b7      	cmp	r7, r6
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	d137      	bne.n	80076fa <_dtoa_r+0x722>
 800768a:	f7f8 fdff 	bl	800028c <__adddf3>
 800768e:	4642      	mov	r2, r8
 8007690:	464b      	mov	r3, r9
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	f7f9 fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800769a:	b9c8      	cbnz	r0, 80076d0 <_dtoa_r+0x6f8>
 800769c:	4642      	mov	r2, r8
 800769e:	464b      	mov	r3, r9
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f7f9 fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a8:	b110      	cbz	r0, 80076b0 <_dtoa_r+0x6d8>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	07d9      	lsls	r1, r3, #31
 80076ae:	d40f      	bmi.n	80076d0 <_dtoa_r+0x6f8>
 80076b0:	4620      	mov	r0, r4
 80076b2:	4659      	mov	r1, fp
 80076b4:	f000 fcf6 	bl	80080a4 <_Bfree>
 80076b8:	2300      	movs	r3, #0
 80076ba:	702b      	strb	r3, [r5, #0]
 80076bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076be:	f10a 0001 	add.w	r0, sl, #1
 80076c2:	6018      	str	r0, [r3, #0]
 80076c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f43f acd8 	beq.w	800707c <_dtoa_r+0xa4>
 80076cc:	601d      	str	r5, [r3, #0]
 80076ce:	e4d5      	b.n	800707c <_dtoa_r+0xa4>
 80076d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80076d4:	462b      	mov	r3, r5
 80076d6:	461d      	mov	r5, r3
 80076d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076dc:	2a39      	cmp	r2, #57	; 0x39
 80076de:	d108      	bne.n	80076f2 <_dtoa_r+0x71a>
 80076e0:	9a00      	ldr	r2, [sp, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d1f7      	bne.n	80076d6 <_dtoa_r+0x6fe>
 80076e6:	9a07      	ldr	r2, [sp, #28]
 80076e8:	9900      	ldr	r1, [sp, #0]
 80076ea:	3201      	adds	r2, #1
 80076ec:	9207      	str	r2, [sp, #28]
 80076ee:	2230      	movs	r2, #48	; 0x30
 80076f0:	700a      	strb	r2, [r1, #0]
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	3201      	adds	r2, #1
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	e78c      	b.n	8007614 <_dtoa_r+0x63c>
 80076fa:	4b7f      	ldr	r3, [pc, #508]	; (80078f8 <_dtoa_r+0x920>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	f7f8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4606      	mov	r6, r0
 8007708:	460f      	mov	r7, r1
 800770a:	f7f9 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800770e:	2800      	cmp	r0, #0
 8007710:	d09b      	beq.n	800764a <_dtoa_r+0x672>
 8007712:	e7cd      	b.n	80076b0 <_dtoa_r+0x6d8>
 8007714:	9a08      	ldr	r2, [sp, #32]
 8007716:	2a00      	cmp	r2, #0
 8007718:	f000 80c4 	beq.w	80078a4 <_dtoa_r+0x8cc>
 800771c:	9a05      	ldr	r2, [sp, #20]
 800771e:	2a01      	cmp	r2, #1
 8007720:	f300 80a8 	bgt.w	8007874 <_dtoa_r+0x89c>
 8007724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007726:	2a00      	cmp	r2, #0
 8007728:	f000 80a0 	beq.w	800786c <_dtoa_r+0x894>
 800772c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007730:	9e06      	ldr	r6, [sp, #24]
 8007732:	4645      	mov	r5, r8
 8007734:	9a04      	ldr	r2, [sp, #16]
 8007736:	2101      	movs	r1, #1
 8007738:	441a      	add	r2, r3
 800773a:	4620      	mov	r0, r4
 800773c:	4498      	add	r8, r3
 800773e:	9204      	str	r2, [sp, #16]
 8007740:	f000 fd6c 	bl	800821c <__i2b>
 8007744:	4607      	mov	r7, r0
 8007746:	2d00      	cmp	r5, #0
 8007748:	dd0b      	ble.n	8007762 <_dtoa_r+0x78a>
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd08      	ble.n	8007762 <_dtoa_r+0x78a>
 8007750:	42ab      	cmp	r3, r5
 8007752:	9a04      	ldr	r2, [sp, #16]
 8007754:	bfa8      	it	ge
 8007756:	462b      	movge	r3, r5
 8007758:	eba8 0803 	sub.w	r8, r8, r3
 800775c:	1aed      	subs	r5, r5, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	9b06      	ldr	r3, [sp, #24]
 8007764:	b1fb      	cbz	r3, 80077a6 <_dtoa_r+0x7ce>
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 809f 	beq.w	80078ac <_dtoa_r+0x8d4>
 800776e:	2e00      	cmp	r6, #0
 8007770:	dd11      	ble.n	8007796 <_dtoa_r+0x7be>
 8007772:	4639      	mov	r1, r7
 8007774:	4632      	mov	r2, r6
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fe0c 	bl	8008394 <__pow5mult>
 800777c:	465a      	mov	r2, fp
 800777e:	4601      	mov	r1, r0
 8007780:	4607      	mov	r7, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fd60 	bl	8008248 <__multiply>
 8007788:	4659      	mov	r1, fp
 800778a:	9007      	str	r0, [sp, #28]
 800778c:	4620      	mov	r0, r4
 800778e:	f000 fc89 	bl	80080a4 <_Bfree>
 8007792:	9b07      	ldr	r3, [sp, #28]
 8007794:	469b      	mov	fp, r3
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	1b9a      	subs	r2, r3, r6
 800779a:	d004      	beq.n	80077a6 <_dtoa_r+0x7ce>
 800779c:	4659      	mov	r1, fp
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 fdf8 	bl	8008394 <__pow5mult>
 80077a4:	4683      	mov	fp, r0
 80077a6:	2101      	movs	r1, #1
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fd37 	bl	800821c <__i2b>
 80077ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	4606      	mov	r6, r0
 80077b4:	dd7c      	ble.n	80078b0 <_dtoa_r+0x8d8>
 80077b6:	461a      	mov	r2, r3
 80077b8:	4601      	mov	r1, r0
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fdea 	bl	8008394 <__pow5mult>
 80077c0:	9b05      	ldr	r3, [sp, #20]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	4606      	mov	r6, r0
 80077c6:	dd76      	ble.n	80078b6 <_dtoa_r+0x8de>
 80077c8:	2300      	movs	r3, #0
 80077ca:	9306      	str	r3, [sp, #24]
 80077cc:	6933      	ldr	r3, [r6, #16]
 80077ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077d2:	6918      	ldr	r0, [r3, #16]
 80077d4:	f000 fcd2 	bl	800817c <__hi0bits>
 80077d8:	f1c0 0020 	rsb	r0, r0, #32
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	4418      	add	r0, r3
 80077e0:	f010 001f 	ands.w	r0, r0, #31
 80077e4:	f000 8086 	beq.w	80078f4 <_dtoa_r+0x91c>
 80077e8:	f1c0 0320 	rsb	r3, r0, #32
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	dd7f      	ble.n	80078f0 <_dtoa_r+0x918>
 80077f0:	f1c0 001c 	rsb	r0, r0, #28
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4403      	add	r3, r0
 80077f8:	4480      	add	r8, r0
 80077fa:	4405      	add	r5, r0
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	f1b8 0f00 	cmp.w	r8, #0
 8007802:	dd05      	ble.n	8007810 <_dtoa_r+0x838>
 8007804:	4659      	mov	r1, fp
 8007806:	4642      	mov	r2, r8
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fe1d 	bl	8008448 <__lshift>
 800780e:	4683      	mov	fp, r0
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd05      	ble.n	8007822 <_dtoa_r+0x84a>
 8007816:	4631      	mov	r1, r6
 8007818:	461a      	mov	r2, r3
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fe14 	bl	8008448 <__lshift>
 8007820:	4606      	mov	r6, r0
 8007822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	d069      	beq.n	80078fc <_dtoa_r+0x924>
 8007828:	4631      	mov	r1, r6
 800782a:	4658      	mov	r0, fp
 800782c:	f000 fe78 	bl	8008520 <__mcmp>
 8007830:	2800      	cmp	r0, #0
 8007832:	da63      	bge.n	80078fc <_dtoa_r+0x924>
 8007834:	2300      	movs	r3, #0
 8007836:	4659      	mov	r1, fp
 8007838:	220a      	movs	r2, #10
 800783a:	4620      	mov	r0, r4
 800783c:	f000 fc54 	bl	80080e8 <__multadd>
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007846:	4683      	mov	fp, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 818f 	beq.w	8007b6c <_dtoa_r+0xb94>
 800784e:	4639      	mov	r1, r7
 8007850:	2300      	movs	r3, #0
 8007852:	220a      	movs	r2, #10
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fc47 	bl	80080e8 <__multadd>
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	4607      	mov	r7, r0
 8007860:	f300 808e 	bgt.w	8007980 <_dtoa_r+0x9a8>
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	2b02      	cmp	r3, #2
 8007868:	dc50      	bgt.n	800790c <_dtoa_r+0x934>
 800786a:	e089      	b.n	8007980 <_dtoa_r+0x9a8>
 800786c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800786e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007872:	e75d      	b.n	8007730 <_dtoa_r+0x758>
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	1e5e      	subs	r6, r3, #1
 8007878:	9b06      	ldr	r3, [sp, #24]
 800787a:	42b3      	cmp	r3, r6
 800787c:	bfbf      	itttt	lt
 800787e:	9b06      	ldrlt	r3, [sp, #24]
 8007880:	9606      	strlt	r6, [sp, #24]
 8007882:	1af2      	sublt	r2, r6, r3
 8007884:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007886:	bfb6      	itet	lt
 8007888:	189b      	addlt	r3, r3, r2
 800788a:	1b9e      	subge	r6, r3, r6
 800788c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	bfb8      	it	lt
 8007892:	2600      	movlt	r6, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfb5      	itete	lt
 8007898:	eba8 0503 	sublt.w	r5, r8, r3
 800789c:	9b01      	ldrge	r3, [sp, #4]
 800789e:	2300      	movlt	r3, #0
 80078a0:	4645      	movge	r5, r8
 80078a2:	e747      	b.n	8007734 <_dtoa_r+0x75c>
 80078a4:	9e06      	ldr	r6, [sp, #24]
 80078a6:	9f08      	ldr	r7, [sp, #32]
 80078a8:	4645      	mov	r5, r8
 80078aa:	e74c      	b.n	8007746 <_dtoa_r+0x76e>
 80078ac:	9a06      	ldr	r2, [sp, #24]
 80078ae:	e775      	b.n	800779c <_dtoa_r+0x7c4>
 80078b0:	9b05      	ldr	r3, [sp, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	dc18      	bgt.n	80078e8 <_dtoa_r+0x910>
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	b9b3      	cbnz	r3, 80078e8 <_dtoa_r+0x910>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c0:	b9a3      	cbnz	r3, 80078ec <_dtoa_r+0x914>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078c8:	0d1b      	lsrs	r3, r3, #20
 80078ca:	051b      	lsls	r3, r3, #20
 80078cc:	b12b      	cbz	r3, 80078da <_dtoa_r+0x902>
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	f108 0801 	add.w	r8, r8, #1
 80078d8:	2301      	movs	r3, #1
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f47f af74 	bne.w	80077cc <_dtoa_r+0x7f4>
 80078e4:	2001      	movs	r0, #1
 80078e6:	e779      	b.n	80077dc <_dtoa_r+0x804>
 80078e8:	2300      	movs	r3, #0
 80078ea:	e7f6      	b.n	80078da <_dtoa_r+0x902>
 80078ec:	9b02      	ldr	r3, [sp, #8]
 80078ee:	e7f4      	b.n	80078da <_dtoa_r+0x902>
 80078f0:	d085      	beq.n	80077fe <_dtoa_r+0x826>
 80078f2:	4618      	mov	r0, r3
 80078f4:	301c      	adds	r0, #28
 80078f6:	e77d      	b.n	80077f4 <_dtoa_r+0x81c>
 80078f8:	40240000 	.word	0x40240000
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dc38      	bgt.n	8007974 <_dtoa_r+0x99c>
 8007902:	9b05      	ldr	r3, [sp, #20]
 8007904:	2b02      	cmp	r3, #2
 8007906:	dd35      	ble.n	8007974 <_dtoa_r+0x99c>
 8007908:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	d10d      	bne.n	800792e <_dtoa_r+0x956>
 8007912:	4631      	mov	r1, r6
 8007914:	464b      	mov	r3, r9
 8007916:	2205      	movs	r2, #5
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fbe5 	bl	80080e8 <__multadd>
 800791e:	4601      	mov	r1, r0
 8007920:	4606      	mov	r6, r0
 8007922:	4658      	mov	r0, fp
 8007924:	f000 fdfc 	bl	8008520 <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	f73f adbd 	bgt.w	80074a8 <_dtoa_r+0x4d0>
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	9d00      	ldr	r5, [sp, #0]
 8007932:	ea6f 0a03 	mvn.w	sl, r3
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	4631      	mov	r1, r6
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fbb1 	bl	80080a4 <_Bfree>
 8007942:	2f00      	cmp	r7, #0
 8007944:	f43f aeb4 	beq.w	80076b0 <_dtoa_r+0x6d8>
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	d005      	beq.n	800795a <_dtoa_r+0x982>
 800794e:	45b8      	cmp	r8, r7
 8007950:	d003      	beq.n	800795a <_dtoa_r+0x982>
 8007952:	4641      	mov	r1, r8
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fba5 	bl	80080a4 <_Bfree>
 800795a:	4639      	mov	r1, r7
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fba1 	bl	80080a4 <_Bfree>
 8007962:	e6a5      	b.n	80076b0 <_dtoa_r+0x6d8>
 8007964:	2600      	movs	r6, #0
 8007966:	4637      	mov	r7, r6
 8007968:	e7e1      	b.n	800792e <_dtoa_r+0x956>
 800796a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800796c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007970:	4637      	mov	r7, r6
 8007972:	e599      	b.n	80074a8 <_dtoa_r+0x4d0>
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80fd 	beq.w	8007b7a <_dtoa_r+0xba2>
 8007980:	2d00      	cmp	r5, #0
 8007982:	dd05      	ble.n	8007990 <_dtoa_r+0x9b8>
 8007984:	4639      	mov	r1, r7
 8007986:	462a      	mov	r2, r5
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fd5d 	bl	8008448 <__lshift>
 800798e:	4607      	mov	r7, r0
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d05c      	beq.n	8007a50 <_dtoa_r+0xa78>
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fb43 	bl	8008024 <_Balloc>
 800799e:	4605      	mov	r5, r0
 80079a0:	b928      	cbnz	r0, 80079ae <_dtoa_r+0x9d6>
 80079a2:	4b80      	ldr	r3, [pc, #512]	; (8007ba4 <_dtoa_r+0xbcc>)
 80079a4:	4602      	mov	r2, r0
 80079a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079aa:	f7ff bb2e 	b.w	800700a <_dtoa_r+0x32>
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	f107 010c 	add.w	r1, r7, #12
 80079b8:	300c      	adds	r0, #12
 80079ba:	f000 fb25 	bl	8008008 <memcpy>
 80079be:	2201      	movs	r2, #1
 80079c0:	4629      	mov	r1, r5
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fd40 	bl	8008448 <__lshift>
 80079c8:	9b00      	ldr	r3, [sp, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	9b00      	ldr	r3, [sp, #0]
 80079d0:	444b      	add	r3, r9
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	46b8      	mov	r8, r7
 80079dc:	9306      	str	r3, [sp, #24]
 80079de:	4607      	mov	r7, r0
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	4631      	mov	r1, r6
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4658      	mov	r0, fp
 80079e8:	9302      	str	r3, [sp, #8]
 80079ea:	f7ff fa67 	bl	8006ebc <quorem>
 80079ee:	4603      	mov	r3, r0
 80079f0:	3330      	adds	r3, #48	; 0x30
 80079f2:	9004      	str	r0, [sp, #16]
 80079f4:	4641      	mov	r1, r8
 80079f6:	4658      	mov	r0, fp
 80079f8:	9308      	str	r3, [sp, #32]
 80079fa:	f000 fd91 	bl	8008520 <__mcmp>
 80079fe:	463a      	mov	r2, r7
 8007a00:	4681      	mov	r9, r0
 8007a02:	4631      	mov	r1, r6
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fda7 	bl	8008558 <__mdiff>
 8007a0a:	68c2      	ldr	r2, [r0, #12]
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	4605      	mov	r5, r0
 8007a10:	bb02      	cbnz	r2, 8007a54 <_dtoa_r+0xa7c>
 8007a12:	4601      	mov	r1, r0
 8007a14:	4658      	mov	r0, fp
 8007a16:	f000 fd83 	bl	8008520 <__mcmp>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4620      	mov	r0, r4
 8007a22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007a26:	f000 fb3d 	bl	80080a4 <_Bfree>
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2e:	9d01      	ldr	r5, [sp, #4]
 8007a30:	ea43 0102 	orr.w	r1, r3, r2
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	430b      	orrs	r3, r1
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	d10d      	bne.n	8007a58 <_dtoa_r+0xa80>
 8007a3c:	2b39      	cmp	r3, #57	; 0x39
 8007a3e:	d029      	beq.n	8007a94 <_dtoa_r+0xabc>
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	dd01      	ble.n	8007a4a <_dtoa_r+0xa72>
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	3331      	adds	r3, #49	; 0x31
 8007a4a:	9a02      	ldr	r2, [sp, #8]
 8007a4c:	7013      	strb	r3, [r2, #0]
 8007a4e:	e774      	b.n	800793a <_dtoa_r+0x962>
 8007a50:	4638      	mov	r0, r7
 8007a52:	e7b9      	b.n	80079c8 <_dtoa_r+0x9f0>
 8007a54:	2201      	movs	r2, #1
 8007a56:	e7e2      	b.n	8007a1e <_dtoa_r+0xa46>
 8007a58:	f1b9 0f00 	cmp.w	r9, #0
 8007a5c:	db06      	blt.n	8007a6c <_dtoa_r+0xa94>
 8007a5e:	9905      	ldr	r1, [sp, #20]
 8007a60:	ea41 0909 	orr.w	r9, r1, r9
 8007a64:	9906      	ldr	r1, [sp, #24]
 8007a66:	ea59 0101 	orrs.w	r1, r9, r1
 8007a6a:	d120      	bne.n	8007aae <_dtoa_r+0xad6>
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	ddec      	ble.n	8007a4a <_dtoa_r+0xa72>
 8007a70:	4659      	mov	r1, fp
 8007a72:	2201      	movs	r2, #1
 8007a74:	4620      	mov	r0, r4
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	f000 fce6 	bl	8008448 <__lshift>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4683      	mov	fp, r0
 8007a80:	f000 fd4e 	bl	8008520 <__mcmp>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	dc02      	bgt.n	8007a90 <_dtoa_r+0xab8>
 8007a8a:	d1de      	bne.n	8007a4a <_dtoa_r+0xa72>
 8007a8c:	07da      	lsls	r2, r3, #31
 8007a8e:	d5dc      	bpl.n	8007a4a <_dtoa_r+0xa72>
 8007a90:	2b39      	cmp	r3, #57	; 0x39
 8007a92:	d1d8      	bne.n	8007a46 <_dtoa_r+0xa6e>
 8007a94:	9a02      	ldr	r2, [sp, #8]
 8007a96:	2339      	movs	r3, #57	; 0x39
 8007a98:	7013      	strb	r3, [r2, #0]
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	461d      	mov	r5, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aa4:	2a39      	cmp	r2, #57	; 0x39
 8007aa6:	d050      	beq.n	8007b4a <_dtoa_r+0xb72>
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e745      	b.n	800793a <_dtoa_r+0x962>
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	dd03      	ble.n	8007aba <_dtoa_r+0xae2>
 8007ab2:	2b39      	cmp	r3, #57	; 0x39
 8007ab4:	d0ee      	beq.n	8007a94 <_dtoa_r+0xabc>
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	e7c7      	b.n	8007a4a <_dtoa_r+0xa72>
 8007aba:	9a01      	ldr	r2, [sp, #4]
 8007abc:	9907      	ldr	r1, [sp, #28]
 8007abe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ac2:	428a      	cmp	r2, r1
 8007ac4:	d02a      	beq.n	8007b1c <_dtoa_r+0xb44>
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fb0b 	bl	80080e8 <__multadd>
 8007ad2:	45b8      	cmp	r8, r7
 8007ad4:	4683      	mov	fp, r0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	f04f 020a 	mov.w	r2, #10
 8007ade:	4641      	mov	r1, r8
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	d107      	bne.n	8007af4 <_dtoa_r+0xb1c>
 8007ae4:	f000 fb00 	bl	80080e8 <__multadd>
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4607      	mov	r7, r0
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	3301      	adds	r3, #1
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	e775      	b.n	80079e0 <_dtoa_r+0xa08>
 8007af4:	f000 faf8 	bl	80080e8 <__multadd>
 8007af8:	4639      	mov	r1, r7
 8007afa:	4680      	mov	r8, r0
 8007afc:	2300      	movs	r3, #0
 8007afe:	220a      	movs	r2, #10
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 faf1 	bl	80080e8 <__multadd>
 8007b06:	4607      	mov	r7, r0
 8007b08:	e7f0      	b.n	8007aec <_dtoa_r+0xb14>
 8007b0a:	f1b9 0f00 	cmp.w	r9, #0
 8007b0e:	9a00      	ldr	r2, [sp, #0]
 8007b10:	bfcc      	ite	gt
 8007b12:	464d      	movgt	r5, r9
 8007b14:	2501      	movle	r5, #1
 8007b16:	4415      	add	r5, r2
 8007b18:	f04f 0800 	mov.w	r8, #0
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4620      	mov	r0, r4
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	f000 fc90 	bl	8008448 <__lshift>
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4683      	mov	fp, r0
 8007b2c:	f000 fcf8 	bl	8008520 <__mcmp>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	dcb2      	bgt.n	8007a9a <_dtoa_r+0xac2>
 8007b34:	d102      	bne.n	8007b3c <_dtoa_r+0xb64>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d4ae      	bmi.n	8007a9a <_dtoa_r+0xac2>
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	461d      	mov	r5, r3
 8007b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b44:	2a30      	cmp	r2, #48	; 0x30
 8007b46:	d0fa      	beq.n	8007b3e <_dtoa_r+0xb66>
 8007b48:	e6f7      	b.n	800793a <_dtoa_r+0x962>
 8007b4a:	9a00      	ldr	r2, [sp, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d1a5      	bne.n	8007a9c <_dtoa_r+0xac4>
 8007b50:	f10a 0a01 	add.w	sl, sl, #1
 8007b54:	2331      	movs	r3, #49	; 0x31
 8007b56:	e779      	b.n	8007a4c <_dtoa_r+0xa74>
 8007b58:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <_dtoa_r+0xbd0>)
 8007b5a:	f7ff baaf 	b.w	80070bc <_dtoa_r+0xe4>
 8007b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f47f aa86 	bne.w	8007072 <_dtoa_r+0x9a>
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <_dtoa_r+0xbd4>)
 8007b68:	f7ff baa8 	b.w	80070bc <_dtoa_r+0xe4>
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	dc03      	bgt.n	8007b7a <_dtoa_r+0xba2>
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	f73f aec9 	bgt.w	800790c <_dtoa_r+0x934>
 8007b7a:	9d00      	ldr	r5, [sp, #0]
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f7ff f99c 	bl	8006ebc <quorem>
 8007b84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b88:	f805 3b01 	strb.w	r3, [r5], #1
 8007b8c:	9a00      	ldr	r2, [sp, #0]
 8007b8e:	1aaa      	subs	r2, r5, r2
 8007b90:	4591      	cmp	r9, r2
 8007b92:	ddba      	ble.n	8007b0a <_dtoa_r+0xb32>
 8007b94:	4659      	mov	r1, fp
 8007b96:	2300      	movs	r3, #0
 8007b98:	220a      	movs	r2, #10
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 faa4 	bl	80080e8 <__multadd>
 8007ba0:	4683      	mov	fp, r0
 8007ba2:	e7eb      	b.n	8007b7c <_dtoa_r+0xba4>
 8007ba4:	08008f7f 	.word	0x08008f7f
 8007ba8:	08008ed8 	.word	0x08008ed8
 8007bac:	08008efc 	.word	0x08008efc

08007bb0 <__sflush_r>:
 8007bb0:	898a      	ldrh	r2, [r1, #12]
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	0710      	lsls	r0, r2, #28
 8007bba:	460c      	mov	r4, r1
 8007bbc:	d458      	bmi.n	8007c70 <__sflush_r+0xc0>
 8007bbe:	684b      	ldr	r3, [r1, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc05      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dc02      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d0f9      	beq.n	8007bca <__sflush_r+0x1a>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bdc:	682f      	ldr	r7, [r5, #0]
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	d032      	beq.n	8007c48 <__sflush_r+0x98>
 8007be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	075a      	lsls	r2, r3, #29
 8007be8:	d505      	bpl.n	8007bf6 <__sflush_r+0x46>
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	1ac0      	subs	r0, r0, r3
 8007bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bf0:	b10b      	cbz	r3, 8007bf6 <__sflush_r+0x46>
 8007bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf4:	1ac0      	subs	r0, r0, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b0      	blx	r6
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	d106      	bne.n	8007c16 <__sflush_r+0x66>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	291d      	cmp	r1, #29
 8007c0c:	d82c      	bhi.n	8007c68 <__sflush_r+0xb8>
 8007c0e:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <__sflush_r+0x108>)
 8007c10:	40ca      	lsrs	r2, r1
 8007c12:	07d6      	lsls	r6, r2, #31
 8007c14:	d528      	bpl.n	8007c68 <__sflush_r+0xb8>
 8007c16:	2200      	movs	r2, #0
 8007c18:	6062      	str	r2, [r4, #4]
 8007c1a:	04d9      	lsls	r1, r3, #19
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	d504      	bpl.n	8007c2c <__sflush_r+0x7c>
 8007c22:	1c42      	adds	r2, r0, #1
 8007c24:	d101      	bne.n	8007c2a <__sflush_r+0x7a>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b903      	cbnz	r3, 8007c2c <__sflush_r+0x7c>
 8007c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	2900      	cmp	r1, #0
 8007c32:	d0ca      	beq.n	8007bca <__sflush_r+0x1a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__sflush_r+0x92>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fd7f 	bl	8008740 <_free_r>
 8007c42:	2000      	movs	r0, #0
 8007c44:	6360      	str	r0, [r4, #52]	; 0x34
 8007c46:	e7c1      	b.n	8007bcc <__sflush_r+0x1c>
 8007c48:	6a21      	ldr	r1, [r4, #32]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b0      	blx	r6
 8007c50:	1c41      	adds	r1, r0, #1
 8007c52:	d1c7      	bne.n	8007be4 <__sflush_r+0x34>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c4      	beq.n	8007be4 <__sflush_r+0x34>
 8007c5a:	2b1d      	cmp	r3, #29
 8007c5c:	d001      	beq.n	8007c62 <__sflush_r+0xb2>
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d101      	bne.n	8007c66 <__sflush_r+0xb6>
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	e7b1      	b.n	8007bca <__sflush_r+0x1a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	e7ad      	b.n	8007bcc <__sflush_r+0x1c>
 8007c70:	690f      	ldr	r7, [r1, #16]
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d0a9      	beq.n	8007bca <__sflush_r+0x1a>
 8007c76:	0793      	lsls	r3, r2, #30
 8007c78:	680e      	ldr	r6, [r1, #0]
 8007c7a:	bf08      	it	eq
 8007c7c:	694b      	ldreq	r3, [r1, #20]
 8007c7e:	600f      	str	r7, [r1, #0]
 8007c80:	bf18      	it	ne
 8007c82:	2300      	movne	r3, #0
 8007c84:	eba6 0807 	sub.w	r8, r6, r7
 8007c88:	608b      	str	r3, [r1, #8]
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	dd9c      	ble.n	8007bca <__sflush_r+0x1a>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c94:	4643      	mov	r3, r8
 8007c96:	463a      	mov	r2, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b0      	blx	r6
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dc06      	bgt.n	8007cae <__sflush_r+0xfe>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	e78e      	b.n	8007bcc <__sflush_r+0x1c>
 8007cae:	4407      	add	r7, r0
 8007cb0:	eba8 0800 	sub.w	r8, r8, r0
 8007cb4:	e7e9      	b.n	8007c8a <__sflush_r+0xda>
 8007cb6:	bf00      	nop
 8007cb8:	20400001 	.word	0x20400001

08007cbc <_fflush_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b913      	cbnz	r3, 8007ccc <_fflush_r+0x10>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	b118      	cbz	r0, 8007cd6 <_fflush_r+0x1a>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <_fflush_r+0x1a>
 8007cd2:	f000 f887 	bl	8007de4 <__sinit>
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <_fflush_r+0x6c>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d11b      	bne.n	8007d14 <_fflush_r+0x58>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0ef      	beq.n	8007cc6 <_fflush_r+0xa>
 8007ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d404      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cec:	0599      	lsls	r1, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f000 f91a 	bl	8007f2a <__retarget_lock_acquire_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7ff ff59 	bl	8007bb0 <__sflush_r>
 8007cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	4605      	mov	r5, r0
 8007d04:	d4e0      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d4dd      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0e:	f000 f90d 	bl	8007f2c <__retarget_lock_release_recursive>
 8007d12:	e7d9      	b.n	8007cc8 <_fflush_r+0xc>
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <_fflush_r+0x70>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <_fflush_r+0x62>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7df      	b.n	8007cde <_fflush_r+0x22>
 8007d1e:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <_fflush_r+0x74>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7da      	b.n	8007cde <_fflush_r+0x22>
 8007d28:	08008fb0 	.word	0x08008fb0
 8007d2c:	08008fd0 	.word	0x08008fd0
 8007d30:	08008f90 	.word	0x08008f90

08007d34 <std>:
 8007d34:	2300      	movs	r3, #0
 8007d36:	b510      	push	{r4, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d42:	6083      	str	r3, [r0, #8]
 8007d44:	8181      	strh	r1, [r0, #12]
 8007d46:	6643      	str	r3, [r0, #100]	; 0x64
 8007d48:	81c2      	strh	r2, [r0, #14]
 8007d4a:	6183      	str	r3, [r0, #24]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	2208      	movs	r2, #8
 8007d50:	305c      	adds	r0, #92	; 0x5c
 8007d52:	f7fe fa25 	bl	80061a0 <memset>
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std+0x38>)
 8007d58:	6263      	str	r3, [r4, #36]	; 0x24
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <std+0x3c>)
 8007d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std+0x40>)
 8007d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x44>)
 8007d64:	6224      	str	r4, [r4, #32]
 8007d66:	6323      	str	r3, [r4, #48]	; 0x30
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	08008b69 	.word	0x08008b69
 8007d70:	08008b8b 	.word	0x08008b8b
 8007d74:	08008bc3 	.word	0x08008bc3
 8007d78:	08008be7 	.word	0x08008be7

08007d7c <_cleanup_r>:
 8007d7c:	4901      	ldr	r1, [pc, #4]	; (8007d84 <_cleanup_r+0x8>)
 8007d7e:	f000 b8af 	b.w	8007ee0 <_fwalk_reent>
 8007d82:	bf00      	nop
 8007d84:	08007cbd 	.word	0x08007cbd

08007d88 <__sfmoreglue>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	1e4a      	subs	r2, r1, #1
 8007d8c:	2568      	movs	r5, #104	; 0x68
 8007d8e:	4355      	muls	r5, r2
 8007d90:	460e      	mov	r6, r1
 8007d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d96:	f000 fd23 	bl	80087e0 <_malloc_r>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	b140      	cbz	r0, 8007db0 <__sfmoreglue+0x28>
 8007d9e:	2100      	movs	r1, #0
 8007da0:	e9c0 1600 	strd	r1, r6, [r0]
 8007da4:	300c      	adds	r0, #12
 8007da6:	60a0      	str	r0, [r4, #8]
 8007da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dac:	f7fe f9f8 	bl	80061a0 <memset>
 8007db0:	4620      	mov	r0, r4
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__sfp_lock_acquire>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_acquire+0x8>)
 8007db6:	f000 b8b8 	b.w	8007f2a <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000458 	.word	0x20000458

08007dc0 <__sfp_lock_release>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__sfp_lock_release+0x8>)
 8007dc2:	f000 b8b3 	b.w	8007f2c <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000458 	.word	0x20000458

08007dcc <__sinit_lock_acquire>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sinit_lock_acquire+0x8>)
 8007dce:	f000 b8ac 	b.w	8007f2a <__retarget_lock_acquire_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	20000453 	.word	0x20000453

08007dd8 <__sinit_lock_release>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__sinit_lock_release+0x8>)
 8007dda:	f000 b8a7 	b.w	8007f2c <__retarget_lock_release_recursive>
 8007dde:	bf00      	nop
 8007de0:	20000453 	.word	0x20000453

08007de4 <__sinit>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	f7ff fff0 	bl	8007dcc <__sinit_lock_acquire>
 8007dec:	69a3      	ldr	r3, [r4, #24]
 8007dee:	b11b      	cbz	r3, 8007df8 <__sinit+0x14>
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f7ff bff0 	b.w	8007dd8 <__sinit_lock_release>
 8007df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <__sinit+0x68>)
 8007e00:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <__sinit+0x6c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	bf04      	itt	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	61a3      	streq	r3, [r4, #24]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f820 	bl	8007e54 <__sfp>
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f81c 	bl	8007e54 <__sfp>
 8007e1c:	60a0      	str	r0, [r4, #8]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f818 	bl	8007e54 <__sfp>
 8007e24:	2200      	movs	r2, #0
 8007e26:	60e0      	str	r0, [r4, #12]
 8007e28:	2104      	movs	r1, #4
 8007e2a:	6860      	ldr	r0, [r4, #4]
 8007e2c:	f7ff ff82 	bl	8007d34 <std>
 8007e30:	68a0      	ldr	r0, [r4, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	2109      	movs	r1, #9
 8007e36:	f7ff ff7d 	bl	8007d34 <std>
 8007e3a:	68e0      	ldr	r0, [r4, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	2112      	movs	r1, #18
 8007e40:	f7ff ff78 	bl	8007d34 <std>
 8007e44:	2301      	movs	r3, #1
 8007e46:	61a3      	str	r3, [r4, #24]
 8007e48:	e7d2      	b.n	8007df0 <__sinit+0xc>
 8007e4a:	bf00      	nop
 8007e4c:	08008ec4 	.word	0x08008ec4
 8007e50:	08007d7d 	.word	0x08007d7d

08007e54 <__sfp>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4607      	mov	r7, r0
 8007e58:	f7ff ffac 	bl	8007db4 <__sfp_lock_acquire>
 8007e5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <__sfp+0x84>)
 8007e5e:	681e      	ldr	r6, [r3, #0]
 8007e60:	69b3      	ldr	r3, [r6, #24]
 8007e62:	b913      	cbnz	r3, 8007e6a <__sfp+0x16>
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ffbd 	bl	8007de4 <__sinit>
 8007e6a:	3648      	adds	r6, #72	; 0x48
 8007e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	d503      	bpl.n	8007e7c <__sfp+0x28>
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	b30b      	cbz	r3, 8007ebc <__sfp+0x68>
 8007e78:	6836      	ldr	r6, [r6, #0]
 8007e7a:	e7f7      	b.n	8007e6c <__sfp+0x18>
 8007e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e80:	b9d5      	cbnz	r5, 8007eb8 <__sfp+0x64>
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <__sfp+0x88>)
 8007e84:	60e3      	str	r3, [r4, #12]
 8007e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e8c:	f000 f84c 	bl	8007f28 <__retarget_lock_init_recursive>
 8007e90:	f7ff ff96 	bl	8007dc0 <__sfp_lock_release>
 8007e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e9c:	6025      	str	r5, [r4, #0]
 8007e9e:	61a5      	str	r5, [r4, #24]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ea8:	f7fe f97a 	bl	80061a0 <memset>
 8007eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb8:	3468      	adds	r4, #104	; 0x68
 8007eba:	e7d9      	b.n	8007e70 <__sfp+0x1c>
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7ff ff62 	bl	8007d88 <__sfmoreglue>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	6030      	str	r0, [r6, #0]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1d5      	bne.n	8007e78 <__sfp+0x24>
 8007ecc:	f7ff ff78 	bl	8007dc0 <__sfp_lock_release>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	e7ee      	b.n	8007eb4 <__sfp+0x60>
 8007ed6:	bf00      	nop
 8007ed8:	08008ec4 	.word	0x08008ec4
 8007edc:	ffff0001 	.word	0xffff0001

08007ee0 <_fwalk_reent>:
 8007ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eec:	2700      	movs	r7, #0
 8007eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef6:	d505      	bpl.n	8007f04 <_fwalk_reent+0x24>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d1f7      	bne.n	8007eee <_fwalk_reent+0xe>
 8007efe:	4638      	mov	r0, r7
 8007f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d907      	bls.n	8007f1a <_fwalk_reent+0x3a>
 8007f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	d003      	beq.n	8007f1a <_fwalk_reent+0x3a>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	47c0      	blx	r8
 8007f18:	4307      	orrs	r7, r0
 8007f1a:	3568      	adds	r5, #104	; 0x68
 8007f1c:	e7e9      	b.n	8007ef2 <_fwalk_reent+0x12>
	...

08007f20 <_localeconv_r>:
 8007f20:	4800      	ldr	r0, [pc, #0]	; (8007f24 <_localeconv_r+0x4>)
 8007f22:	4770      	bx	lr
 8007f24:	20000160 	.word	0x20000160

08007f28 <__retarget_lock_init_recursive>:
 8007f28:	4770      	bx	lr

08007f2a <__retarget_lock_acquire_recursive>:
 8007f2a:	4770      	bx	lr

08007f2c <__retarget_lock_release_recursive>:
 8007f2c:	4770      	bx	lr

08007f2e <__swhatbuf_r>:
 8007f2e:	b570      	push	{r4, r5, r6, lr}
 8007f30:	460e      	mov	r6, r1
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	2900      	cmp	r1, #0
 8007f38:	b096      	sub	sp, #88	; 0x58
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	461d      	mov	r5, r3
 8007f3e:	da07      	bge.n	8007f50 <__swhatbuf_r+0x22>
 8007f40:	2300      	movs	r3, #0
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	89b3      	ldrh	r3, [r6, #12]
 8007f46:	061a      	lsls	r2, r3, #24
 8007f48:	d410      	bmi.n	8007f6c <__swhatbuf_r+0x3e>
 8007f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f4e:	e00e      	b.n	8007f6e <__swhatbuf_r+0x40>
 8007f50:	466a      	mov	r2, sp
 8007f52:	f000 fe9f 	bl	8008c94 <_fstat_r>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	dbf2      	blt.n	8007f40 <__swhatbuf_r+0x12>
 8007f5a:	9a01      	ldr	r2, [sp, #4]
 8007f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f64:	425a      	negs	r2, r3
 8007f66:	415a      	adcs	r2, r3
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	e7ee      	b.n	8007f4a <__swhatbuf_r+0x1c>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	2000      	movs	r0, #0
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	b016      	add	sp, #88	; 0x58
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f78 <__smakebuf_r>:
 8007f78:	898b      	ldrh	r3, [r1, #12]
 8007f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f7c:	079d      	lsls	r5, r3, #30
 8007f7e:	4606      	mov	r6, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	d507      	bpl.n	8007f94 <__smakebuf_r+0x1c>
 8007f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	6163      	str	r3, [r4, #20]
 8007f90:	b002      	add	sp, #8
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	ab01      	add	r3, sp, #4
 8007f96:	466a      	mov	r2, sp
 8007f98:	f7ff ffc9 	bl	8007f2e <__swhatbuf_r>
 8007f9c:	9900      	ldr	r1, [sp, #0]
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 fc1d 	bl	80087e0 <_malloc_r>
 8007fa6:	b948      	cbnz	r0, 8007fbc <__smakebuf_r+0x44>
 8007fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fac:	059a      	lsls	r2, r3, #22
 8007fae:	d4ef      	bmi.n	8007f90 <__smakebuf_r+0x18>
 8007fb0:	f023 0303 	bic.w	r3, r3, #3
 8007fb4:	f043 0302 	orr.w	r3, r3, #2
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	e7e3      	b.n	8007f84 <__smakebuf_r+0xc>
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <__smakebuf_r+0x7c>)
 8007fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	6163      	str	r3, [r4, #20]
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	6120      	str	r0, [r4, #16]
 8007fd2:	b15b      	cbz	r3, 8007fec <__smakebuf_r+0x74>
 8007fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 fe6d 	bl	8008cb8 <_isatty_r>
 8007fde:	b128      	cbz	r0, 8007fec <__smakebuf_r+0x74>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	89a0      	ldrh	r0, [r4, #12]
 8007fee:	4305      	orrs	r5, r0
 8007ff0:	81a5      	strh	r5, [r4, #12]
 8007ff2:	e7cd      	b.n	8007f90 <__smakebuf_r+0x18>
 8007ff4:	08007d7d 	.word	0x08007d7d

08007ff8 <malloc>:
 8007ff8:	4b02      	ldr	r3, [pc, #8]	; (8008004 <malloc+0xc>)
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	f000 bbef 	b.w	80087e0 <_malloc_r>
 8008002:	bf00      	nop
 8008004:	2000000c 	.word	0x2000000c

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <_Balloc>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008028:	4604      	mov	r4, r0
 800802a:	460d      	mov	r5, r1
 800802c:	b976      	cbnz	r6, 800804c <_Balloc+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7ff ffe2 	bl	8007ff8 <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	6260      	str	r0, [r4, #36]	; 0x24
 8008038:	b920      	cbnz	r0, 8008044 <_Balloc+0x20>
 800803a:	4b18      	ldr	r3, [pc, #96]	; (800809c <_Balloc+0x78>)
 800803c:	4818      	ldr	r0, [pc, #96]	; (80080a0 <_Balloc+0x7c>)
 800803e:	2166      	movs	r1, #102	; 0x66
 8008040:	f000 fde8 	bl	8008c14 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800804e:	68f3      	ldr	r3, [r6, #12]
 8008050:	b183      	cbz	r3, 8008074 <_Balloc+0x50>
 8008052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800805a:	b9b8      	cbnz	r0, 800808c <_Balloc+0x68>
 800805c:	2101      	movs	r1, #1
 800805e:	fa01 f605 	lsl.w	r6, r1, r5
 8008062:	1d72      	adds	r2, r6, #5
 8008064:	0092      	lsls	r2, r2, #2
 8008066:	4620      	mov	r0, r4
 8008068:	f000 fb5a 	bl	8008720 <_calloc_r>
 800806c:	b160      	cbz	r0, 8008088 <_Balloc+0x64>
 800806e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008072:	e00e      	b.n	8008092 <_Balloc+0x6e>
 8008074:	2221      	movs	r2, #33	; 0x21
 8008076:	2104      	movs	r1, #4
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fb51 	bl	8008720 <_calloc_r>
 800807e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008080:	60f0      	str	r0, [r6, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e4      	bne.n	8008052 <_Balloc+0x2e>
 8008088:	2000      	movs	r0, #0
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	6802      	ldr	r2, [r0, #0]
 800808e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008092:	2300      	movs	r3, #0
 8008094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008098:	e7f7      	b.n	800808a <_Balloc+0x66>
 800809a:	bf00      	nop
 800809c:	08008f09 	.word	0x08008f09
 80080a0:	08008ff0 	.word	0x08008ff0

080080a4 <_Bfree>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080a8:	4605      	mov	r5, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	b976      	cbnz	r6, 80080cc <_Bfree+0x28>
 80080ae:	2010      	movs	r0, #16
 80080b0:	f7ff ffa2 	bl	8007ff8 <malloc>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6268      	str	r0, [r5, #36]	; 0x24
 80080b8:	b920      	cbnz	r0, 80080c4 <_Bfree+0x20>
 80080ba:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <_Bfree+0x3c>)
 80080bc:	4809      	ldr	r0, [pc, #36]	; (80080e4 <_Bfree+0x40>)
 80080be:	218a      	movs	r1, #138	; 0x8a
 80080c0:	f000 fda8 	bl	8008c14 <__assert_func>
 80080c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c8:	6006      	str	r6, [r0, #0]
 80080ca:	60c6      	str	r6, [r0, #12]
 80080cc:	b13c      	cbz	r4, 80080de <_Bfree+0x3a>
 80080ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080d0:	6862      	ldr	r2, [r4, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080d8:	6021      	str	r1, [r4, #0]
 80080da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	08008f09 	.word	0x08008f09
 80080e4:	08008ff0 	.word	0x08008ff0

080080e8 <__multadd>:
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	690e      	ldr	r6, [r1, #16]
 80080ee:	4607      	mov	r7, r0
 80080f0:	4698      	mov	r8, r3
 80080f2:	460c      	mov	r4, r1
 80080f4:	f101 0014 	add.w	r0, r1, #20
 80080f8:	2300      	movs	r3, #0
 80080fa:	6805      	ldr	r5, [r0, #0]
 80080fc:	b2a9      	uxth	r1, r5
 80080fe:	fb02 8101 	mla	r1, r2, r1, r8
 8008102:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008106:	0c2d      	lsrs	r5, r5, #16
 8008108:	fb02 c505 	mla	r5, r2, r5, ip
 800810c:	b289      	uxth	r1, r1
 800810e:	3301      	adds	r3, #1
 8008110:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008114:	429e      	cmp	r6, r3
 8008116:	f840 1b04 	str.w	r1, [r0], #4
 800811a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800811e:	dcec      	bgt.n	80080fa <__multadd+0x12>
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d022      	beq.n	800816c <__multadd+0x84>
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	42b3      	cmp	r3, r6
 800812a:	dc19      	bgt.n	8008160 <__multadd+0x78>
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	4638      	mov	r0, r7
 8008130:	3101      	adds	r1, #1
 8008132:	f7ff ff77 	bl	8008024 <_Balloc>
 8008136:	4605      	mov	r5, r0
 8008138:	b928      	cbnz	r0, 8008146 <__multadd+0x5e>
 800813a:	4602      	mov	r2, r0
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <__multadd+0x8c>)
 800813e:	480e      	ldr	r0, [pc, #56]	; (8008178 <__multadd+0x90>)
 8008140:	21b5      	movs	r1, #181	; 0xb5
 8008142:	f000 fd67 	bl	8008c14 <__assert_func>
 8008146:	6922      	ldr	r2, [r4, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	f104 010c 	add.w	r1, r4, #12
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	300c      	adds	r0, #12
 8008152:	f7ff ff59 	bl	8008008 <memcpy>
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ffa3 	bl	80080a4 <_Bfree>
 800815e:	462c      	mov	r4, r5
 8008160:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008164:	3601      	adds	r6, #1
 8008166:	f8c3 8014 	str.w	r8, [r3, #20]
 800816a:	6126      	str	r6, [r4, #16]
 800816c:	4620      	mov	r0, r4
 800816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008172:	bf00      	nop
 8008174:	08008f7f 	.word	0x08008f7f
 8008178:	08008ff0 	.word	0x08008ff0

0800817c <__hi0bits>:
 800817c:	0c03      	lsrs	r3, r0, #16
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	b9d3      	cbnz	r3, 80081b8 <__hi0bits+0x3c>
 8008182:	0400      	lsls	r0, r0, #16
 8008184:	2310      	movs	r3, #16
 8008186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800818a:	bf04      	itt	eq
 800818c:	0200      	lsleq	r0, r0, #8
 800818e:	3308      	addeq	r3, #8
 8008190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008194:	bf04      	itt	eq
 8008196:	0100      	lsleq	r0, r0, #4
 8008198:	3304      	addeq	r3, #4
 800819a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800819e:	bf04      	itt	eq
 80081a0:	0080      	lsleq	r0, r0, #2
 80081a2:	3302      	addeq	r3, #2
 80081a4:	2800      	cmp	r0, #0
 80081a6:	db05      	blt.n	80081b4 <__hi0bits+0x38>
 80081a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081ac:	f103 0301 	add.w	r3, r3, #1
 80081b0:	bf08      	it	eq
 80081b2:	2320      	moveq	r3, #32
 80081b4:	4618      	mov	r0, r3
 80081b6:	4770      	bx	lr
 80081b8:	2300      	movs	r3, #0
 80081ba:	e7e4      	b.n	8008186 <__hi0bits+0xa>

080081bc <__lo0bits>:
 80081bc:	6803      	ldr	r3, [r0, #0]
 80081be:	f013 0207 	ands.w	r2, r3, #7
 80081c2:	4601      	mov	r1, r0
 80081c4:	d00b      	beq.n	80081de <__lo0bits+0x22>
 80081c6:	07da      	lsls	r2, r3, #31
 80081c8:	d424      	bmi.n	8008214 <__lo0bits+0x58>
 80081ca:	0798      	lsls	r0, r3, #30
 80081cc:	bf49      	itett	mi
 80081ce:	085b      	lsrmi	r3, r3, #1
 80081d0:	089b      	lsrpl	r3, r3, #2
 80081d2:	2001      	movmi	r0, #1
 80081d4:	600b      	strmi	r3, [r1, #0]
 80081d6:	bf5c      	itt	pl
 80081d8:	600b      	strpl	r3, [r1, #0]
 80081da:	2002      	movpl	r0, #2
 80081dc:	4770      	bx	lr
 80081de:	b298      	uxth	r0, r3
 80081e0:	b9b0      	cbnz	r0, 8008210 <__lo0bits+0x54>
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	2010      	movs	r0, #16
 80081e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081ea:	bf04      	itt	eq
 80081ec:	0a1b      	lsreq	r3, r3, #8
 80081ee:	3008      	addeq	r0, #8
 80081f0:	071a      	lsls	r2, r3, #28
 80081f2:	bf04      	itt	eq
 80081f4:	091b      	lsreq	r3, r3, #4
 80081f6:	3004      	addeq	r0, #4
 80081f8:	079a      	lsls	r2, r3, #30
 80081fa:	bf04      	itt	eq
 80081fc:	089b      	lsreq	r3, r3, #2
 80081fe:	3002      	addeq	r0, #2
 8008200:	07da      	lsls	r2, r3, #31
 8008202:	d403      	bmi.n	800820c <__lo0bits+0x50>
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	f100 0001 	add.w	r0, r0, #1
 800820a:	d005      	beq.n	8008218 <__lo0bits+0x5c>
 800820c:	600b      	str	r3, [r1, #0]
 800820e:	4770      	bx	lr
 8008210:	4610      	mov	r0, r2
 8008212:	e7e8      	b.n	80081e6 <__lo0bits+0x2a>
 8008214:	2000      	movs	r0, #0
 8008216:	4770      	bx	lr
 8008218:	2020      	movs	r0, #32
 800821a:	4770      	bx	lr

0800821c <__i2b>:
 800821c:	b510      	push	{r4, lr}
 800821e:	460c      	mov	r4, r1
 8008220:	2101      	movs	r1, #1
 8008222:	f7ff feff 	bl	8008024 <_Balloc>
 8008226:	4602      	mov	r2, r0
 8008228:	b928      	cbnz	r0, 8008236 <__i2b+0x1a>
 800822a:	4b05      	ldr	r3, [pc, #20]	; (8008240 <__i2b+0x24>)
 800822c:	4805      	ldr	r0, [pc, #20]	; (8008244 <__i2b+0x28>)
 800822e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008232:	f000 fcef 	bl	8008c14 <__assert_func>
 8008236:	2301      	movs	r3, #1
 8008238:	6144      	str	r4, [r0, #20]
 800823a:	6103      	str	r3, [r0, #16]
 800823c:	bd10      	pop	{r4, pc}
 800823e:	bf00      	nop
 8008240:	08008f7f 	.word	0x08008f7f
 8008244:	08008ff0 	.word	0x08008ff0

08008248 <__multiply>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	4614      	mov	r4, r2
 800824e:	690a      	ldr	r2, [r1, #16]
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	429a      	cmp	r2, r3
 8008254:	bfb8      	it	lt
 8008256:	460b      	movlt	r3, r1
 8008258:	460d      	mov	r5, r1
 800825a:	bfbc      	itt	lt
 800825c:	4625      	movlt	r5, r4
 800825e:	461c      	movlt	r4, r3
 8008260:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008264:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008268:	68ab      	ldr	r3, [r5, #8]
 800826a:	6869      	ldr	r1, [r5, #4]
 800826c:	eb0a 0709 	add.w	r7, sl, r9
 8008270:	42bb      	cmp	r3, r7
 8008272:	b085      	sub	sp, #20
 8008274:	bfb8      	it	lt
 8008276:	3101      	addlt	r1, #1
 8008278:	f7ff fed4 	bl	8008024 <_Balloc>
 800827c:	b930      	cbnz	r0, 800828c <__multiply+0x44>
 800827e:	4602      	mov	r2, r0
 8008280:	4b42      	ldr	r3, [pc, #264]	; (800838c <__multiply+0x144>)
 8008282:	4843      	ldr	r0, [pc, #268]	; (8008390 <__multiply+0x148>)
 8008284:	f240 115d 	movw	r1, #349	; 0x15d
 8008288:	f000 fcc4 	bl	8008c14 <__assert_func>
 800828c:	f100 0614 	add.w	r6, r0, #20
 8008290:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008294:	4633      	mov	r3, r6
 8008296:	2200      	movs	r2, #0
 8008298:	4543      	cmp	r3, r8
 800829a:	d31e      	bcc.n	80082da <__multiply+0x92>
 800829c:	f105 0c14 	add.w	ip, r5, #20
 80082a0:	f104 0314 	add.w	r3, r4, #20
 80082a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80082a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80082ac:	9202      	str	r2, [sp, #8]
 80082ae:	ebac 0205 	sub.w	r2, ip, r5
 80082b2:	3a15      	subs	r2, #21
 80082b4:	f022 0203 	bic.w	r2, r2, #3
 80082b8:	3204      	adds	r2, #4
 80082ba:	f105 0115 	add.w	r1, r5, #21
 80082be:	458c      	cmp	ip, r1
 80082c0:	bf38      	it	cc
 80082c2:	2204      	movcc	r2, #4
 80082c4:	9201      	str	r2, [sp, #4]
 80082c6:	9a02      	ldr	r2, [sp, #8]
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d808      	bhi.n	80082e0 <__multiply+0x98>
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	dc55      	bgt.n	800837e <__multiply+0x136>
 80082d2:	6107      	str	r7, [r0, #16]
 80082d4:	b005      	add	sp, #20
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	f843 2b04 	str.w	r2, [r3], #4
 80082de:	e7db      	b.n	8008298 <__multiply+0x50>
 80082e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80082e4:	f1ba 0f00 	cmp.w	sl, #0
 80082e8:	d020      	beq.n	800832c <__multiply+0xe4>
 80082ea:	f105 0e14 	add.w	lr, r5, #20
 80082ee:	46b1      	mov	r9, r6
 80082f0:	2200      	movs	r2, #0
 80082f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80082f6:	f8d9 b000 	ldr.w	fp, [r9]
 80082fa:	b2a1      	uxth	r1, r4
 80082fc:	fa1f fb8b 	uxth.w	fp, fp
 8008300:	fb0a b101 	mla	r1, sl, r1, fp
 8008304:	4411      	add	r1, r2
 8008306:	f8d9 2000 	ldr.w	r2, [r9]
 800830a:	0c24      	lsrs	r4, r4, #16
 800830c:	0c12      	lsrs	r2, r2, #16
 800830e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008312:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008316:	b289      	uxth	r1, r1
 8008318:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800831c:	45f4      	cmp	ip, lr
 800831e:	f849 1b04 	str.w	r1, [r9], #4
 8008322:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008326:	d8e4      	bhi.n	80082f2 <__multiply+0xaa>
 8008328:	9901      	ldr	r1, [sp, #4]
 800832a:	5072      	str	r2, [r6, r1]
 800832c:	9a03      	ldr	r2, [sp, #12]
 800832e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008332:	3304      	adds	r3, #4
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	d01f      	beq.n	800837a <__multiply+0x132>
 800833a:	6834      	ldr	r4, [r6, #0]
 800833c:	f105 0114 	add.w	r1, r5, #20
 8008340:	46b6      	mov	lr, r6
 8008342:	f04f 0a00 	mov.w	sl, #0
 8008346:	880a      	ldrh	r2, [r1, #0]
 8008348:	f8be b002 	ldrh.w	fp, [lr, #2]
 800834c:	fb09 b202 	mla	r2, r9, r2, fp
 8008350:	4492      	add	sl, r2
 8008352:	b2a4      	uxth	r4, r4
 8008354:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008358:	f84e 4b04 	str.w	r4, [lr], #4
 800835c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008360:	f8be 2000 	ldrh.w	r2, [lr]
 8008364:	0c24      	lsrs	r4, r4, #16
 8008366:	fb09 2404 	mla	r4, r9, r4, r2
 800836a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800836e:	458c      	cmp	ip, r1
 8008370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008374:	d8e7      	bhi.n	8008346 <__multiply+0xfe>
 8008376:	9a01      	ldr	r2, [sp, #4]
 8008378:	50b4      	str	r4, [r6, r2]
 800837a:	3604      	adds	r6, #4
 800837c:	e7a3      	b.n	80082c6 <__multiply+0x7e>
 800837e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1a5      	bne.n	80082d2 <__multiply+0x8a>
 8008386:	3f01      	subs	r7, #1
 8008388:	e7a1      	b.n	80082ce <__multiply+0x86>
 800838a:	bf00      	nop
 800838c:	08008f7f 	.word	0x08008f7f
 8008390:	08008ff0 	.word	0x08008ff0

08008394 <__pow5mult>:
 8008394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008398:	4615      	mov	r5, r2
 800839a:	f012 0203 	ands.w	r2, r2, #3
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	d007      	beq.n	80083b4 <__pow5mult+0x20>
 80083a4:	4c25      	ldr	r4, [pc, #148]	; (800843c <__pow5mult+0xa8>)
 80083a6:	3a01      	subs	r2, #1
 80083a8:	2300      	movs	r3, #0
 80083aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ae:	f7ff fe9b 	bl	80080e8 <__multadd>
 80083b2:	4607      	mov	r7, r0
 80083b4:	10ad      	asrs	r5, r5, #2
 80083b6:	d03d      	beq.n	8008434 <__pow5mult+0xa0>
 80083b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083ba:	b97c      	cbnz	r4, 80083dc <__pow5mult+0x48>
 80083bc:	2010      	movs	r0, #16
 80083be:	f7ff fe1b 	bl	8007ff8 <malloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6270      	str	r0, [r6, #36]	; 0x24
 80083c6:	b928      	cbnz	r0, 80083d4 <__pow5mult+0x40>
 80083c8:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <__pow5mult+0xac>)
 80083ca:	481e      	ldr	r0, [pc, #120]	; (8008444 <__pow5mult+0xb0>)
 80083cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083d0:	f000 fc20 	bl	8008c14 <__assert_func>
 80083d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d8:	6004      	str	r4, [r0, #0]
 80083da:	60c4      	str	r4, [r0, #12]
 80083dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e4:	b94c      	cbnz	r4, 80083fa <__pow5mult+0x66>
 80083e6:	f240 2171 	movw	r1, #625	; 0x271
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff16 	bl	800821c <__i2b>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f6:	4604      	mov	r4, r0
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	f04f 0900 	mov.w	r9, #0
 80083fe:	07eb      	lsls	r3, r5, #31
 8008400:	d50a      	bpl.n	8008418 <__pow5mult+0x84>
 8008402:	4639      	mov	r1, r7
 8008404:	4622      	mov	r2, r4
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff1e 	bl	8008248 <__multiply>
 800840c:	4639      	mov	r1, r7
 800840e:	4680      	mov	r8, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fe47 	bl	80080a4 <_Bfree>
 8008416:	4647      	mov	r7, r8
 8008418:	106d      	asrs	r5, r5, #1
 800841a:	d00b      	beq.n	8008434 <__pow5mult+0xa0>
 800841c:	6820      	ldr	r0, [r4, #0]
 800841e:	b938      	cbnz	r0, 8008430 <__pow5mult+0x9c>
 8008420:	4622      	mov	r2, r4
 8008422:	4621      	mov	r1, r4
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ff0f 	bl	8008248 <__multiply>
 800842a:	6020      	str	r0, [r4, #0]
 800842c:	f8c0 9000 	str.w	r9, [r0]
 8008430:	4604      	mov	r4, r0
 8008432:	e7e4      	b.n	80083fe <__pow5mult+0x6a>
 8008434:	4638      	mov	r0, r7
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	bf00      	nop
 800843c:	08009140 	.word	0x08009140
 8008440:	08008f09 	.word	0x08008f09
 8008444:	08008ff0 	.word	0x08008ff0

08008448 <__lshift>:
 8008448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800844c:	460c      	mov	r4, r1
 800844e:	6849      	ldr	r1, [r1, #4]
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	4607      	mov	r7, r0
 800845a:	4691      	mov	r9, r2
 800845c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008460:	f108 0601 	add.w	r6, r8, #1
 8008464:	42b3      	cmp	r3, r6
 8008466:	db0b      	blt.n	8008480 <__lshift+0x38>
 8008468:	4638      	mov	r0, r7
 800846a:	f7ff fddb 	bl	8008024 <_Balloc>
 800846e:	4605      	mov	r5, r0
 8008470:	b948      	cbnz	r0, 8008486 <__lshift+0x3e>
 8008472:	4602      	mov	r2, r0
 8008474:	4b28      	ldr	r3, [pc, #160]	; (8008518 <__lshift+0xd0>)
 8008476:	4829      	ldr	r0, [pc, #164]	; (800851c <__lshift+0xd4>)
 8008478:	f240 11d9 	movw	r1, #473	; 0x1d9
 800847c:	f000 fbca 	bl	8008c14 <__assert_func>
 8008480:	3101      	adds	r1, #1
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	e7ee      	b.n	8008464 <__lshift+0x1c>
 8008486:	2300      	movs	r3, #0
 8008488:	f100 0114 	add.w	r1, r0, #20
 800848c:	f100 0210 	add.w	r2, r0, #16
 8008490:	4618      	mov	r0, r3
 8008492:	4553      	cmp	r3, sl
 8008494:	db33      	blt.n	80084fe <__lshift+0xb6>
 8008496:	6920      	ldr	r0, [r4, #16]
 8008498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800849c:	f104 0314 	add.w	r3, r4, #20
 80084a0:	f019 091f 	ands.w	r9, r9, #31
 80084a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084ac:	d02b      	beq.n	8008506 <__lshift+0xbe>
 80084ae:	f1c9 0e20 	rsb	lr, r9, #32
 80084b2:	468a      	mov	sl, r1
 80084b4:	2200      	movs	r2, #0
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	fa00 f009 	lsl.w	r0, r0, r9
 80084bc:	4302      	orrs	r2, r0
 80084be:	f84a 2b04 	str.w	r2, [sl], #4
 80084c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c6:	459c      	cmp	ip, r3
 80084c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80084cc:	d8f3      	bhi.n	80084b6 <__lshift+0x6e>
 80084ce:	ebac 0304 	sub.w	r3, ip, r4
 80084d2:	3b15      	subs	r3, #21
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	3304      	adds	r3, #4
 80084da:	f104 0015 	add.w	r0, r4, #21
 80084de:	4584      	cmp	ip, r0
 80084e0:	bf38      	it	cc
 80084e2:	2304      	movcc	r3, #4
 80084e4:	50ca      	str	r2, [r1, r3]
 80084e6:	b10a      	cbz	r2, 80084ec <__lshift+0xa4>
 80084e8:	f108 0602 	add.w	r6, r8, #2
 80084ec:	3e01      	subs	r6, #1
 80084ee:	4638      	mov	r0, r7
 80084f0:	612e      	str	r6, [r5, #16]
 80084f2:	4621      	mov	r1, r4
 80084f4:	f7ff fdd6 	bl	80080a4 <_Bfree>
 80084f8:	4628      	mov	r0, r5
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008502:	3301      	adds	r3, #1
 8008504:	e7c5      	b.n	8008492 <__lshift+0x4a>
 8008506:	3904      	subs	r1, #4
 8008508:	f853 2b04 	ldr.w	r2, [r3], #4
 800850c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008510:	459c      	cmp	ip, r3
 8008512:	d8f9      	bhi.n	8008508 <__lshift+0xc0>
 8008514:	e7ea      	b.n	80084ec <__lshift+0xa4>
 8008516:	bf00      	nop
 8008518:	08008f7f 	.word	0x08008f7f
 800851c:	08008ff0 	.word	0x08008ff0

08008520 <__mcmp>:
 8008520:	b530      	push	{r4, r5, lr}
 8008522:	6902      	ldr	r2, [r0, #16]
 8008524:	690c      	ldr	r4, [r1, #16]
 8008526:	1b12      	subs	r2, r2, r4
 8008528:	d10e      	bne.n	8008548 <__mcmp+0x28>
 800852a:	f100 0314 	add.w	r3, r0, #20
 800852e:	3114      	adds	r1, #20
 8008530:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008534:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008538:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800853c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008540:	42a5      	cmp	r5, r4
 8008542:	d003      	beq.n	800854c <__mcmp+0x2c>
 8008544:	d305      	bcc.n	8008552 <__mcmp+0x32>
 8008546:	2201      	movs	r2, #1
 8008548:	4610      	mov	r0, r2
 800854a:	bd30      	pop	{r4, r5, pc}
 800854c:	4283      	cmp	r3, r0
 800854e:	d3f3      	bcc.n	8008538 <__mcmp+0x18>
 8008550:	e7fa      	b.n	8008548 <__mcmp+0x28>
 8008552:	f04f 32ff 	mov.w	r2, #4294967295
 8008556:	e7f7      	b.n	8008548 <__mcmp+0x28>

08008558 <__mdiff>:
 8008558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	4606      	mov	r6, r0
 8008560:	4611      	mov	r1, r2
 8008562:	4620      	mov	r0, r4
 8008564:	4617      	mov	r7, r2
 8008566:	f7ff ffdb 	bl	8008520 <__mcmp>
 800856a:	1e05      	subs	r5, r0, #0
 800856c:	d110      	bne.n	8008590 <__mdiff+0x38>
 800856e:	4629      	mov	r1, r5
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff fd57 	bl	8008024 <_Balloc>
 8008576:	b930      	cbnz	r0, 8008586 <__mdiff+0x2e>
 8008578:	4b39      	ldr	r3, [pc, #228]	; (8008660 <__mdiff+0x108>)
 800857a:	4602      	mov	r2, r0
 800857c:	f240 2132 	movw	r1, #562	; 0x232
 8008580:	4838      	ldr	r0, [pc, #224]	; (8008664 <__mdiff+0x10c>)
 8008582:	f000 fb47 	bl	8008c14 <__assert_func>
 8008586:	2301      	movs	r3, #1
 8008588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800858c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	bfa4      	itt	ge
 8008592:	463b      	movge	r3, r7
 8008594:	4627      	movge	r7, r4
 8008596:	4630      	mov	r0, r6
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	bfa6      	itte	ge
 800859c:	461c      	movge	r4, r3
 800859e:	2500      	movge	r5, #0
 80085a0:	2501      	movlt	r5, #1
 80085a2:	f7ff fd3f 	bl	8008024 <_Balloc>
 80085a6:	b920      	cbnz	r0, 80085b2 <__mdiff+0x5a>
 80085a8:	4b2d      	ldr	r3, [pc, #180]	; (8008660 <__mdiff+0x108>)
 80085aa:	4602      	mov	r2, r0
 80085ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085b0:	e7e6      	b.n	8008580 <__mdiff+0x28>
 80085b2:	693e      	ldr	r6, [r7, #16]
 80085b4:	60c5      	str	r5, [r0, #12]
 80085b6:	6925      	ldr	r5, [r4, #16]
 80085b8:	f107 0114 	add.w	r1, r7, #20
 80085bc:	f104 0914 	add.w	r9, r4, #20
 80085c0:	f100 0e14 	add.w	lr, r0, #20
 80085c4:	f107 0210 	add.w	r2, r7, #16
 80085c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80085cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80085d0:	46f2      	mov	sl, lr
 80085d2:	2700      	movs	r7, #0
 80085d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80085d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085dc:	fa1f f883 	uxth.w	r8, r3
 80085e0:	fa17 f78b 	uxtah	r7, r7, fp
 80085e4:	0c1b      	lsrs	r3, r3, #16
 80085e6:	eba7 0808 	sub.w	r8, r7, r8
 80085ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085f2:	fa1f f888 	uxth.w	r8, r8
 80085f6:	141f      	asrs	r7, r3, #16
 80085f8:	454d      	cmp	r5, r9
 80085fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085fe:	f84a 3b04 	str.w	r3, [sl], #4
 8008602:	d8e7      	bhi.n	80085d4 <__mdiff+0x7c>
 8008604:	1b2b      	subs	r3, r5, r4
 8008606:	3b15      	subs	r3, #21
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	3304      	adds	r3, #4
 800860e:	3415      	adds	r4, #21
 8008610:	42a5      	cmp	r5, r4
 8008612:	bf38      	it	cc
 8008614:	2304      	movcc	r3, #4
 8008616:	4419      	add	r1, r3
 8008618:	4473      	add	r3, lr
 800861a:	469e      	mov	lr, r3
 800861c:	460d      	mov	r5, r1
 800861e:	4565      	cmp	r5, ip
 8008620:	d30e      	bcc.n	8008640 <__mdiff+0xe8>
 8008622:	f10c 0203 	add.w	r2, ip, #3
 8008626:	1a52      	subs	r2, r2, r1
 8008628:	f022 0203 	bic.w	r2, r2, #3
 800862c:	3903      	subs	r1, #3
 800862e:	458c      	cmp	ip, r1
 8008630:	bf38      	it	cc
 8008632:	2200      	movcc	r2, #0
 8008634:	441a      	add	r2, r3
 8008636:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800863a:	b17b      	cbz	r3, 800865c <__mdiff+0x104>
 800863c:	6106      	str	r6, [r0, #16]
 800863e:	e7a5      	b.n	800858c <__mdiff+0x34>
 8008640:	f855 8b04 	ldr.w	r8, [r5], #4
 8008644:	fa17 f488 	uxtah	r4, r7, r8
 8008648:	1422      	asrs	r2, r4, #16
 800864a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800864e:	b2a4      	uxth	r4, r4
 8008650:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008654:	f84e 4b04 	str.w	r4, [lr], #4
 8008658:	1417      	asrs	r7, r2, #16
 800865a:	e7e0      	b.n	800861e <__mdiff+0xc6>
 800865c:	3e01      	subs	r6, #1
 800865e:	e7ea      	b.n	8008636 <__mdiff+0xde>
 8008660:	08008f7f 	.word	0x08008f7f
 8008664:	08008ff0 	.word	0x08008ff0

08008668 <__d2b>:
 8008668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800866c:	4689      	mov	r9, r1
 800866e:	2101      	movs	r1, #1
 8008670:	ec57 6b10 	vmov	r6, r7, d0
 8008674:	4690      	mov	r8, r2
 8008676:	f7ff fcd5 	bl	8008024 <_Balloc>
 800867a:	4604      	mov	r4, r0
 800867c:	b930      	cbnz	r0, 800868c <__d2b+0x24>
 800867e:	4602      	mov	r2, r0
 8008680:	4b25      	ldr	r3, [pc, #148]	; (8008718 <__d2b+0xb0>)
 8008682:	4826      	ldr	r0, [pc, #152]	; (800871c <__d2b+0xb4>)
 8008684:	f240 310a 	movw	r1, #778	; 0x30a
 8008688:	f000 fac4 	bl	8008c14 <__assert_func>
 800868c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008694:	bb35      	cbnz	r5, 80086e4 <__d2b+0x7c>
 8008696:	2e00      	cmp	r6, #0
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	d028      	beq.n	80086ee <__d2b+0x86>
 800869c:	4668      	mov	r0, sp
 800869e:	9600      	str	r6, [sp, #0]
 80086a0:	f7ff fd8c 	bl	80081bc <__lo0bits>
 80086a4:	9900      	ldr	r1, [sp, #0]
 80086a6:	b300      	cbz	r0, 80086ea <__d2b+0x82>
 80086a8:	9a01      	ldr	r2, [sp, #4]
 80086aa:	f1c0 0320 	rsb	r3, r0, #32
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	430b      	orrs	r3, r1
 80086b4:	40c2      	lsrs	r2, r0
 80086b6:	6163      	str	r3, [r4, #20]
 80086b8:	9201      	str	r2, [sp, #4]
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	61a3      	str	r3, [r4, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bf14      	ite	ne
 80086c2:	2202      	movne	r2, #2
 80086c4:	2201      	moveq	r2, #1
 80086c6:	6122      	str	r2, [r4, #16]
 80086c8:	b1d5      	cbz	r5, 8008700 <__d2b+0x98>
 80086ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086ce:	4405      	add	r5, r0
 80086d0:	f8c9 5000 	str.w	r5, [r9]
 80086d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086d8:	f8c8 0000 	str.w	r0, [r8]
 80086dc:	4620      	mov	r0, r4
 80086de:	b003      	add	sp, #12
 80086e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e8:	e7d5      	b.n	8008696 <__d2b+0x2e>
 80086ea:	6161      	str	r1, [r4, #20]
 80086ec:	e7e5      	b.n	80086ba <__d2b+0x52>
 80086ee:	a801      	add	r0, sp, #4
 80086f0:	f7ff fd64 	bl	80081bc <__lo0bits>
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	6163      	str	r3, [r4, #20]
 80086f8:	2201      	movs	r2, #1
 80086fa:	6122      	str	r2, [r4, #16]
 80086fc:	3020      	adds	r0, #32
 80086fe:	e7e3      	b.n	80086c8 <__d2b+0x60>
 8008700:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008708:	f8c9 0000 	str.w	r0, [r9]
 800870c:	6918      	ldr	r0, [r3, #16]
 800870e:	f7ff fd35 	bl	800817c <__hi0bits>
 8008712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008716:	e7df      	b.n	80086d8 <__d2b+0x70>
 8008718:	08008f7f 	.word	0x08008f7f
 800871c:	08008ff0 	.word	0x08008ff0

08008720 <_calloc_r>:
 8008720:	b513      	push	{r0, r1, r4, lr}
 8008722:	434a      	muls	r2, r1
 8008724:	4611      	mov	r1, r2
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	f000 f85a 	bl	80087e0 <_malloc_r>
 800872c:	4604      	mov	r4, r0
 800872e:	b118      	cbz	r0, 8008738 <_calloc_r+0x18>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	2100      	movs	r1, #0
 8008734:	f7fd fd34 	bl	80061a0 <memset>
 8008738:	4620      	mov	r0, r4
 800873a:	b002      	add	sp, #8
 800873c:	bd10      	pop	{r4, pc}
	...

08008740 <_free_r>:
 8008740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008742:	2900      	cmp	r1, #0
 8008744:	d048      	beq.n	80087d8 <_free_r+0x98>
 8008746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874a:	9001      	str	r0, [sp, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f1a1 0404 	sub.w	r4, r1, #4
 8008752:	bfb8      	it	lt
 8008754:	18e4      	addlt	r4, r4, r3
 8008756:	f000 fae3 	bl	8008d20 <__malloc_lock>
 800875a:	4a20      	ldr	r2, [pc, #128]	; (80087dc <_free_r+0x9c>)
 800875c:	9801      	ldr	r0, [sp, #4]
 800875e:	6813      	ldr	r3, [r2, #0]
 8008760:	4615      	mov	r5, r2
 8008762:	b933      	cbnz	r3, 8008772 <_free_r+0x32>
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	6014      	str	r4, [r2, #0]
 8008768:	b003      	add	sp, #12
 800876a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800876e:	f000 badd 	b.w	8008d2c <__malloc_unlock>
 8008772:	42a3      	cmp	r3, r4
 8008774:	d90b      	bls.n	800878e <_free_r+0x4e>
 8008776:	6821      	ldr	r1, [r4, #0]
 8008778:	1862      	adds	r2, r4, r1
 800877a:	4293      	cmp	r3, r2
 800877c:	bf04      	itt	eq
 800877e:	681a      	ldreq	r2, [r3, #0]
 8008780:	685b      	ldreq	r3, [r3, #4]
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	bf04      	itt	eq
 8008786:	1852      	addeq	r2, r2, r1
 8008788:	6022      	streq	r2, [r4, #0]
 800878a:	602c      	str	r4, [r5, #0]
 800878c:	e7ec      	b.n	8008768 <_free_r+0x28>
 800878e:	461a      	mov	r2, r3
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b10b      	cbz	r3, 8008798 <_free_r+0x58>
 8008794:	42a3      	cmp	r3, r4
 8008796:	d9fa      	bls.n	800878e <_free_r+0x4e>
 8008798:	6811      	ldr	r1, [r2, #0]
 800879a:	1855      	adds	r5, r2, r1
 800879c:	42a5      	cmp	r5, r4
 800879e:	d10b      	bne.n	80087b8 <_free_r+0x78>
 80087a0:	6824      	ldr	r4, [r4, #0]
 80087a2:	4421      	add	r1, r4
 80087a4:	1854      	adds	r4, r2, r1
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	6011      	str	r1, [r2, #0]
 80087aa:	d1dd      	bne.n	8008768 <_free_r+0x28>
 80087ac:	681c      	ldr	r4, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	6053      	str	r3, [r2, #4]
 80087b2:	4421      	add	r1, r4
 80087b4:	6011      	str	r1, [r2, #0]
 80087b6:	e7d7      	b.n	8008768 <_free_r+0x28>
 80087b8:	d902      	bls.n	80087c0 <_free_r+0x80>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	e7d3      	b.n	8008768 <_free_r+0x28>
 80087c0:	6825      	ldr	r5, [r4, #0]
 80087c2:	1961      	adds	r1, r4, r5
 80087c4:	428b      	cmp	r3, r1
 80087c6:	bf04      	itt	eq
 80087c8:	6819      	ldreq	r1, [r3, #0]
 80087ca:	685b      	ldreq	r3, [r3, #4]
 80087cc:	6063      	str	r3, [r4, #4]
 80087ce:	bf04      	itt	eq
 80087d0:	1949      	addeq	r1, r1, r5
 80087d2:	6021      	streq	r1, [r4, #0]
 80087d4:	6054      	str	r4, [r2, #4]
 80087d6:	e7c7      	b.n	8008768 <_free_r+0x28>
 80087d8:	b003      	add	sp, #12
 80087da:	bd30      	pop	{r4, r5, pc}
 80087dc:	20000444 	.word	0x20000444

080087e0 <_malloc_r>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	1ccd      	adds	r5, r1, #3
 80087e4:	f025 0503 	bic.w	r5, r5, #3
 80087e8:	3508      	adds	r5, #8
 80087ea:	2d0c      	cmp	r5, #12
 80087ec:	bf38      	it	cc
 80087ee:	250c      	movcc	r5, #12
 80087f0:	2d00      	cmp	r5, #0
 80087f2:	4606      	mov	r6, r0
 80087f4:	db01      	blt.n	80087fa <_malloc_r+0x1a>
 80087f6:	42a9      	cmp	r1, r5
 80087f8:	d903      	bls.n	8008802 <_malloc_r+0x22>
 80087fa:	230c      	movs	r3, #12
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	2000      	movs	r0, #0
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	f000 fa8d 	bl	8008d20 <__malloc_lock>
 8008806:	4921      	ldr	r1, [pc, #132]	; (800888c <_malloc_r+0xac>)
 8008808:	680a      	ldr	r2, [r1, #0]
 800880a:	4614      	mov	r4, r2
 800880c:	b99c      	cbnz	r4, 8008836 <_malloc_r+0x56>
 800880e:	4f20      	ldr	r7, [pc, #128]	; (8008890 <_malloc_r+0xb0>)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	b923      	cbnz	r3, 800881e <_malloc_r+0x3e>
 8008814:	4621      	mov	r1, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f996 	bl	8008b48 <_sbrk_r>
 800881c:	6038      	str	r0, [r7, #0]
 800881e:	4629      	mov	r1, r5
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f991 	bl	8008b48 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d123      	bne.n	8008872 <_malloc_r+0x92>
 800882a:	230c      	movs	r3, #12
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	4630      	mov	r0, r6
 8008830:	f000 fa7c 	bl	8008d2c <__malloc_unlock>
 8008834:	e7e3      	b.n	80087fe <_malloc_r+0x1e>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	1b5b      	subs	r3, r3, r5
 800883a:	d417      	bmi.n	800886c <_malloc_r+0x8c>
 800883c:	2b0b      	cmp	r3, #11
 800883e:	d903      	bls.n	8008848 <_malloc_r+0x68>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	441c      	add	r4, r3
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	e004      	b.n	8008852 <_malloc_r+0x72>
 8008848:	6863      	ldr	r3, [r4, #4]
 800884a:	42a2      	cmp	r2, r4
 800884c:	bf0c      	ite	eq
 800884e:	600b      	streq	r3, [r1, #0]
 8008850:	6053      	strne	r3, [r2, #4]
 8008852:	4630      	mov	r0, r6
 8008854:	f000 fa6a 	bl	8008d2c <__malloc_unlock>
 8008858:	f104 000b 	add.w	r0, r4, #11
 800885c:	1d23      	adds	r3, r4, #4
 800885e:	f020 0007 	bic.w	r0, r0, #7
 8008862:	1ac2      	subs	r2, r0, r3
 8008864:	d0cc      	beq.n	8008800 <_malloc_r+0x20>
 8008866:	1a1b      	subs	r3, r3, r0
 8008868:	50a3      	str	r3, [r4, r2]
 800886a:	e7c9      	b.n	8008800 <_malloc_r+0x20>
 800886c:	4622      	mov	r2, r4
 800886e:	6864      	ldr	r4, [r4, #4]
 8008870:	e7cc      	b.n	800880c <_malloc_r+0x2c>
 8008872:	1cc4      	adds	r4, r0, #3
 8008874:	f024 0403 	bic.w	r4, r4, #3
 8008878:	42a0      	cmp	r0, r4
 800887a:	d0e3      	beq.n	8008844 <_malloc_r+0x64>
 800887c:	1a21      	subs	r1, r4, r0
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f962 	bl	8008b48 <_sbrk_r>
 8008884:	3001      	adds	r0, #1
 8008886:	d1dd      	bne.n	8008844 <_malloc_r+0x64>
 8008888:	e7cf      	b.n	800882a <_malloc_r+0x4a>
 800888a:	bf00      	nop
 800888c:	20000444 	.word	0x20000444
 8008890:	20000448 	.word	0x20000448

08008894 <__sfputc_r>:
 8008894:	6893      	ldr	r3, [r2, #8]
 8008896:	3b01      	subs	r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	b410      	push	{r4}
 800889c:	6093      	str	r3, [r2, #8]
 800889e:	da08      	bge.n	80088b2 <__sfputc_r+0x1e>
 80088a0:	6994      	ldr	r4, [r2, #24]
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	db01      	blt.n	80088aa <__sfputc_r+0x16>
 80088a6:	290a      	cmp	r1, #10
 80088a8:	d103      	bne.n	80088b2 <__sfputc_r+0x1e>
 80088aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ae:	f7fe ba45 	b.w	8006d3c <__swbuf_r>
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	1c58      	adds	r0, r3, #1
 80088b6:	6010      	str	r0, [r2, #0]
 80088b8:	7019      	strb	r1, [r3, #0]
 80088ba:	4608      	mov	r0, r1
 80088bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <__sfputs_r>:
 80088c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c4:	4606      	mov	r6, r0
 80088c6:	460f      	mov	r7, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	18d5      	adds	r5, r2, r3
 80088cc:	42ac      	cmp	r4, r5
 80088ce:	d101      	bne.n	80088d4 <__sfputs_r+0x12>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e007      	b.n	80088e4 <__sfputs_r+0x22>
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	463a      	mov	r2, r7
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ffda 	bl	8008894 <__sfputc_r>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d1f3      	bne.n	80088cc <__sfputs_r+0xa>
 80088e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088e8 <_vfiprintf_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	460d      	mov	r5, r1
 80088ee:	b09d      	sub	sp, #116	; 0x74
 80088f0:	4614      	mov	r4, r2
 80088f2:	4698      	mov	r8, r3
 80088f4:	4606      	mov	r6, r0
 80088f6:	b118      	cbz	r0, 8008900 <_vfiprintf_r+0x18>
 80088f8:	6983      	ldr	r3, [r0, #24]
 80088fa:	b90b      	cbnz	r3, 8008900 <_vfiprintf_r+0x18>
 80088fc:	f7ff fa72 	bl	8007de4 <__sinit>
 8008900:	4b89      	ldr	r3, [pc, #548]	; (8008b28 <_vfiprintf_r+0x240>)
 8008902:	429d      	cmp	r5, r3
 8008904:	d11b      	bne.n	800893e <_vfiprintf_r+0x56>
 8008906:	6875      	ldr	r5, [r6, #4]
 8008908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x32>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x32>
 8008914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008916:	f7ff fb08 	bl	8007f2a <__retarget_lock_acquire_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	071b      	lsls	r3, r3, #28
 800891e:	d501      	bpl.n	8008924 <_vfiprintf_r+0x3c>
 8008920:	692b      	ldr	r3, [r5, #16]
 8008922:	b9eb      	cbnz	r3, 8008960 <_vfiprintf_r+0x78>
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f7fe fa5a 	bl	8006de0 <__swsetup_r>
 800892c:	b1c0      	cbz	r0, 8008960 <_vfiprintf_r+0x78>
 800892e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008930:	07dc      	lsls	r4, r3, #31
 8008932:	d50e      	bpl.n	8008952 <_vfiprintf_r+0x6a>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b01d      	add	sp, #116	; 0x74
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	4b7b      	ldr	r3, [pc, #492]	; (8008b2c <_vfiprintf_r+0x244>)
 8008940:	429d      	cmp	r5, r3
 8008942:	d101      	bne.n	8008948 <_vfiprintf_r+0x60>
 8008944:	68b5      	ldr	r5, [r6, #8]
 8008946:	e7df      	b.n	8008908 <_vfiprintf_r+0x20>
 8008948:	4b79      	ldr	r3, [pc, #484]	; (8008b30 <_vfiprintf_r+0x248>)
 800894a:	429d      	cmp	r5, r3
 800894c:	bf08      	it	eq
 800894e:	68f5      	ldreq	r5, [r6, #12]
 8008950:	e7da      	b.n	8008908 <_vfiprintf_r+0x20>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	0598      	lsls	r0, r3, #22
 8008956:	d4ed      	bmi.n	8008934 <_vfiprintf_r+0x4c>
 8008958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800895a:	f7ff fae7 	bl	8007f2c <__retarget_lock_release_recursive>
 800895e:	e7e9      	b.n	8008934 <_vfiprintf_r+0x4c>
 8008960:	2300      	movs	r3, #0
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	2320      	movs	r3, #32
 8008966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800896a:	f8cd 800c 	str.w	r8, [sp, #12]
 800896e:	2330      	movs	r3, #48	; 0x30
 8008970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b34 <_vfiprintf_r+0x24c>
 8008974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008978:	f04f 0901 	mov.w	r9, #1
 800897c:	4623      	mov	r3, r4
 800897e:	469a      	mov	sl, r3
 8008980:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008984:	b10a      	cbz	r2, 800898a <_vfiprintf_r+0xa2>
 8008986:	2a25      	cmp	r2, #37	; 0x25
 8008988:	d1f9      	bne.n	800897e <_vfiprintf_r+0x96>
 800898a:	ebba 0b04 	subs.w	fp, sl, r4
 800898e:	d00b      	beq.n	80089a8 <_vfiprintf_r+0xc0>
 8008990:	465b      	mov	r3, fp
 8008992:	4622      	mov	r2, r4
 8008994:	4629      	mov	r1, r5
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ff93 	bl	80088c2 <__sfputs_r>
 800899c:	3001      	adds	r0, #1
 800899e:	f000 80aa 	beq.w	8008af6 <_vfiprintf_r+0x20e>
 80089a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a4:	445a      	add	r2, fp
 80089a6:	9209      	str	r2, [sp, #36]	; 0x24
 80089a8:	f89a 3000 	ldrb.w	r3, [sl]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 80a2 	beq.w	8008af6 <_vfiprintf_r+0x20e>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295
 80089b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089bc:	f10a 0a01 	add.w	sl, sl, #1
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	9307      	str	r3, [sp, #28]
 80089c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089c8:	931a      	str	r3, [sp, #104]	; 0x68
 80089ca:	4654      	mov	r4, sl
 80089cc:	2205      	movs	r2, #5
 80089ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d2:	4858      	ldr	r0, [pc, #352]	; (8008b34 <_vfiprintf_r+0x24c>)
 80089d4:	f7f7 fc04 	bl	80001e0 <memchr>
 80089d8:	9a04      	ldr	r2, [sp, #16]
 80089da:	b9d8      	cbnz	r0, 8008a14 <_vfiprintf_r+0x12c>
 80089dc:	06d1      	lsls	r1, r2, #27
 80089de:	bf44      	itt	mi
 80089e0:	2320      	movmi	r3, #32
 80089e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e6:	0713      	lsls	r3, r2, #28
 80089e8:	bf44      	itt	mi
 80089ea:	232b      	movmi	r3, #43	; 0x2b
 80089ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f0:	f89a 3000 	ldrb.w	r3, [sl]
 80089f4:	2b2a      	cmp	r3, #42	; 0x2a
 80089f6:	d015      	beq.n	8008a24 <_vfiprintf_r+0x13c>
 80089f8:	9a07      	ldr	r2, [sp, #28]
 80089fa:	4654      	mov	r4, sl
 80089fc:	2000      	movs	r0, #0
 80089fe:	f04f 0c0a 	mov.w	ip, #10
 8008a02:	4621      	mov	r1, r4
 8008a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a08:	3b30      	subs	r3, #48	; 0x30
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d94e      	bls.n	8008aac <_vfiprintf_r+0x1c4>
 8008a0e:	b1b0      	cbz	r0, 8008a3e <_vfiprintf_r+0x156>
 8008a10:	9207      	str	r2, [sp, #28]
 8008a12:	e014      	b.n	8008a3e <_vfiprintf_r+0x156>
 8008a14:	eba0 0308 	sub.w	r3, r0, r8
 8008a18:	fa09 f303 	lsl.w	r3, r9, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	46a2      	mov	sl, r4
 8008a22:	e7d2      	b.n	80089ca <_vfiprintf_r+0xe2>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	1d19      	adds	r1, r3, #4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	9103      	str	r1, [sp, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bfbb      	ittet	lt
 8008a30:	425b      	neglt	r3, r3
 8008a32:	f042 0202 	orrlt.w	r2, r2, #2
 8008a36:	9307      	strge	r3, [sp, #28]
 8008a38:	9307      	strlt	r3, [sp, #28]
 8008a3a:	bfb8      	it	lt
 8008a3c:	9204      	strlt	r2, [sp, #16]
 8008a3e:	7823      	ldrb	r3, [r4, #0]
 8008a40:	2b2e      	cmp	r3, #46	; 0x2e
 8008a42:	d10c      	bne.n	8008a5e <_vfiprintf_r+0x176>
 8008a44:	7863      	ldrb	r3, [r4, #1]
 8008a46:	2b2a      	cmp	r3, #42	; 0x2a
 8008a48:	d135      	bne.n	8008ab6 <_vfiprintf_r+0x1ce>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	1d1a      	adds	r2, r3, #4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	9203      	str	r2, [sp, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfb8      	it	lt
 8008a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a5a:	3402      	adds	r4, #2
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b44 <_vfiprintf_r+0x25c>
 8008a62:	7821      	ldrb	r1, [r4, #0]
 8008a64:	2203      	movs	r2, #3
 8008a66:	4650      	mov	r0, sl
 8008a68:	f7f7 fbba 	bl	80001e0 <memchr>
 8008a6c:	b140      	cbz	r0, 8008a80 <_vfiprintf_r+0x198>
 8008a6e:	2340      	movs	r3, #64	; 0x40
 8008a70:	eba0 000a 	sub.w	r0, r0, sl
 8008a74:	fa03 f000 	lsl.w	r0, r3, r0
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	4303      	orrs	r3, r0
 8008a7c:	3401      	adds	r4, #1
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	482c      	ldr	r0, [pc, #176]	; (8008b38 <_vfiprintf_r+0x250>)
 8008a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a8a:	2206      	movs	r2, #6
 8008a8c:	f7f7 fba8 	bl	80001e0 <memchr>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d03f      	beq.n	8008b14 <_vfiprintf_r+0x22c>
 8008a94:	4b29      	ldr	r3, [pc, #164]	; (8008b3c <_vfiprintf_r+0x254>)
 8008a96:	bb1b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x1f8>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	f023 0307 	bic.w	r3, r3, #7
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	9303      	str	r3, [sp, #12]
 8008aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa6:	443b      	add	r3, r7
 8008aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008aaa:	e767      	b.n	800897c <_vfiprintf_r+0x94>
 8008aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7a5      	b.n	8008a02 <_vfiprintf_r+0x11a>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	3401      	adds	r4, #1
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	4619      	mov	r1, r3
 8008abe:	f04f 0c0a 	mov.w	ip, #10
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac8:	3a30      	subs	r2, #48	; 0x30
 8008aca:	2a09      	cmp	r2, #9
 8008acc:	d903      	bls.n	8008ad6 <_vfiprintf_r+0x1ee>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0c5      	beq.n	8008a5e <_vfiprintf_r+0x176>
 8008ad2:	9105      	str	r1, [sp, #20]
 8008ad4:	e7c3      	b.n	8008a5e <_vfiprintf_r+0x176>
 8008ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ada:	4604      	mov	r4, r0
 8008adc:	2301      	movs	r3, #1
 8008ade:	e7f0      	b.n	8008ac2 <_vfiprintf_r+0x1da>
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <_vfiprintf_r+0x258>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7fd fc00 	bl	80062f0 <_printf_float>
 8008af0:	4607      	mov	r7, r0
 8008af2:	1c78      	adds	r0, r7, #1
 8008af4:	d1d6      	bne.n	8008aa4 <_vfiprintf_r+0x1bc>
 8008af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af8:	07d9      	lsls	r1, r3, #31
 8008afa:	d405      	bmi.n	8008b08 <_vfiprintf_r+0x220>
 8008afc:	89ab      	ldrh	r3, [r5, #12]
 8008afe:	059a      	lsls	r2, r3, #22
 8008b00:	d402      	bmi.n	8008b08 <_vfiprintf_r+0x220>
 8008b02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b04:	f7ff fa12 	bl	8007f2c <__retarget_lock_release_recursive>
 8008b08:	89ab      	ldrh	r3, [r5, #12]
 8008b0a:	065b      	lsls	r3, r3, #25
 8008b0c:	f53f af12 	bmi.w	8008934 <_vfiprintf_r+0x4c>
 8008b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b12:	e711      	b.n	8008938 <_vfiprintf_r+0x50>
 8008b14:	ab03      	add	r3, sp, #12
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <_vfiprintf_r+0x258>)
 8008b1c:	a904      	add	r1, sp, #16
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f7fd fe8a 	bl	8006838 <_printf_i>
 8008b24:	e7e4      	b.n	8008af0 <_vfiprintf_r+0x208>
 8008b26:	bf00      	nop
 8008b28:	08008fb0 	.word	0x08008fb0
 8008b2c:	08008fd0 	.word	0x08008fd0
 8008b30:	08008f90 	.word	0x08008f90
 8008b34:	0800914c 	.word	0x0800914c
 8008b38:	08009156 	.word	0x08009156
 8008b3c:	080062f1 	.word	0x080062f1
 8008b40:	080088c3 	.word	0x080088c3
 8008b44:	08009152 	.word	0x08009152

08008b48 <_sbrk_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d06      	ldr	r5, [pc, #24]	; (8008b64 <_sbrk_r+0x1c>)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	f7f9 fa5e 	bl	8002014 <_sbrk>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_sbrk_r+0x1a>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_sbrk_r+0x1a>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	2000045c 	.word	0x2000045c

08008b68 <__sread>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b70:	f000 f8e2 	bl	8008d38 <_read_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	bfab      	itete	ge
 8008b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b7c:	181b      	addge	r3, r3, r0
 8008b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b82:	bfac      	ite	ge
 8008b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b86:	81a3      	strhlt	r3, [r4, #12]
 8008b88:	bd10      	pop	{r4, pc}

08008b8a <__swrite>:
 8008b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8e:	461f      	mov	r7, r3
 8008b90:	898b      	ldrh	r3, [r1, #12]
 8008b92:	05db      	lsls	r3, r3, #23
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4616      	mov	r6, r2
 8008b9a:	d505      	bpl.n	8008ba8 <__swrite+0x1e>
 8008b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f000 f898 	bl	8008cd8 <_lseek_r>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	4628      	mov	r0, r5
 8008bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbe:	f000 b817 	b.w	8008bf0 <_write_r>

08008bc2 <__sseek>:
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bca:	f000 f885 	bl	8008cd8 <_lseek_r>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	bf15      	itete	ne
 8008bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bde:	81a3      	strheq	r3, [r4, #12]
 8008be0:	bf18      	it	ne
 8008be2:	81a3      	strhne	r3, [r4, #12]
 8008be4:	bd10      	pop	{r4, pc}

08008be6 <__sclose>:
 8008be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bea:	f000 b831 	b.w	8008c50 <_close_r>
	...

08008bf0 <_write_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	; (8008c10 <_write_r+0x20>)
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	602a      	str	r2, [r5, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f7f9 f9f4 	bl	8001fec <_write>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d102      	bne.n	8008c0e <_write_r+0x1e>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	b103      	cbz	r3, 8008c0e <_write_r+0x1e>
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	2000045c 	.word	0x2000045c

08008c14 <__assert_func>:
 8008c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c16:	4614      	mov	r4, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <__assert_func+0x2c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4605      	mov	r5, r0
 8008c20:	68d8      	ldr	r0, [r3, #12]
 8008c22:	b14c      	cbz	r4, 8008c38 <__assert_func+0x24>
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <__assert_func+0x30>)
 8008c26:	9100      	str	r1, [sp, #0]
 8008c28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c2c:	4906      	ldr	r1, [pc, #24]	; (8008c48 <__assert_func+0x34>)
 8008c2e:	462b      	mov	r3, r5
 8008c30:	f000 f81e 	bl	8008c70 <fiprintf>
 8008c34:	f000 f89f 	bl	8008d76 <abort>
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <__assert_func+0x38>)
 8008c3a:	461c      	mov	r4, r3
 8008c3c:	e7f3      	b.n	8008c26 <__assert_func+0x12>
 8008c3e:	bf00      	nop
 8008c40:	2000000c 	.word	0x2000000c
 8008c44:	0800915d 	.word	0x0800915d
 8008c48:	0800916a 	.word	0x0800916a
 8008c4c:	08009198 	.word	0x08009198

08008c50 <_close_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	; (8008c6c <_close_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f9 f991 	bl	8001f82 <_close>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_close_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_close_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	2000045c 	.word	0x2000045c

08008c70 <fiprintf>:
 8008c70:	b40e      	push	{r1, r2, r3}
 8008c72:	b503      	push	{r0, r1, lr}
 8008c74:	4601      	mov	r1, r0
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <fiprintf+0x20>)
 8008c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f7ff fe31 	bl	80088e8 <_vfiprintf_r>
 8008c86:	b002      	add	sp, #8
 8008c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c8c:	b003      	add	sp, #12
 8008c8e:	4770      	bx	lr
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <_fstat_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	; (8008cb4 <_fstat_r+0x20>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f7f9 f97a 	bl	8001f9a <_fstat>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_fstat_r+0x1c>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_fstat_r+0x1c>
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2000045c 	.word	0x2000045c

08008cb8 <_isatty_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_isatty_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f9 f979 	bl	8001fba <_isatty>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_isatty_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_isatty_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	2000045c 	.word	0x2000045c

08008cd8 <_lseek_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d07      	ldr	r5, [pc, #28]	; (8008cf8 <_lseek_r+0x20>)
 8008cdc:	4604      	mov	r4, r0
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	602a      	str	r2, [r5, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f7f9 f972 	bl	8001fd0 <_lseek>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_lseek_r+0x1e>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_lseek_r+0x1e>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	2000045c 	.word	0x2000045c

08008cfc <__ascii_mbtowc>:
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	b901      	cbnz	r1, 8008d02 <__ascii_mbtowc+0x6>
 8008d00:	a901      	add	r1, sp, #4
 8008d02:	b142      	cbz	r2, 8008d16 <__ascii_mbtowc+0x1a>
 8008d04:	b14b      	cbz	r3, 8008d1a <__ascii_mbtowc+0x1e>
 8008d06:	7813      	ldrb	r3, [r2, #0]
 8008d08:	600b      	str	r3, [r1, #0]
 8008d0a:	7812      	ldrb	r2, [r2, #0]
 8008d0c:	1e10      	subs	r0, r2, #0
 8008d0e:	bf18      	it	ne
 8008d10:	2001      	movne	r0, #1
 8008d12:	b002      	add	sp, #8
 8008d14:	4770      	bx	lr
 8008d16:	4610      	mov	r0, r2
 8008d18:	e7fb      	b.n	8008d12 <__ascii_mbtowc+0x16>
 8008d1a:	f06f 0001 	mvn.w	r0, #1
 8008d1e:	e7f8      	b.n	8008d12 <__ascii_mbtowc+0x16>

08008d20 <__malloc_lock>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__malloc_lock+0x8>)
 8008d22:	f7ff b902 	b.w	8007f2a <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	20000454 	.word	0x20000454

08008d2c <__malloc_unlock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_unlock+0x8>)
 8008d2e:	f7ff b8fd 	b.w	8007f2c <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000454 	.word	0x20000454

08008d38 <_read_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d07      	ldr	r5, [pc, #28]	; (8008d58 <_read_r+0x20>)
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	4608      	mov	r0, r1
 8008d40:	4611      	mov	r1, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	602a      	str	r2, [r5, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f7f9 f8fe 	bl	8001f48 <_read>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_read_r+0x1e>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_read_r+0x1e>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	2000045c 	.word	0x2000045c

08008d5c <__ascii_wctomb>:
 8008d5c:	b149      	cbz	r1, 8008d72 <__ascii_wctomb+0x16>
 8008d5e:	2aff      	cmp	r2, #255	; 0xff
 8008d60:	bf85      	ittet	hi
 8008d62:	238a      	movhi	r3, #138	; 0x8a
 8008d64:	6003      	strhi	r3, [r0, #0]
 8008d66:	700a      	strbls	r2, [r1, #0]
 8008d68:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d6c:	bf98      	it	ls
 8008d6e:	2001      	movls	r0, #1
 8008d70:	4770      	bx	lr
 8008d72:	4608      	mov	r0, r1
 8008d74:	4770      	bx	lr

08008d76 <abort>:
 8008d76:	b508      	push	{r3, lr}
 8008d78:	2006      	movs	r0, #6
 8008d7a:	f000 f82b 	bl	8008dd4 <raise>
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f7f9 f8d8 	bl	8001f34 <_exit>

08008d84 <_raise_r>:
 8008d84:	291f      	cmp	r1, #31
 8008d86:	b538      	push	{r3, r4, r5, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	d904      	bls.n	8008d98 <_raise_r+0x14>
 8008d8e:	2316      	movs	r3, #22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d9a:	b112      	cbz	r2, 8008da2 <_raise_r+0x1e>
 8008d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da0:	b94b      	cbnz	r3, 8008db6 <_raise_r+0x32>
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f830 	bl	8008e08 <_getpid_r>
 8008da8:	462a      	mov	r2, r5
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db2:	f000 b817 	b.w	8008de4 <_kill_r>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d00a      	beq.n	8008dd0 <_raise_r+0x4c>
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	d103      	bne.n	8008dc6 <_raise_r+0x42>
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7e7      	b.n	8008d96 <_raise_r+0x12>
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dcc:	4628      	mov	r0, r5
 8008dce:	4798      	blx	r3
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7e0      	b.n	8008d96 <_raise_r+0x12>

08008dd4 <raise>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <raise+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7ff bfd3 	b.w	8008d84 <_raise_r>
 8008dde:	bf00      	nop
 8008de0:	2000000c 	.word	0x2000000c

08008de4 <_kill_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_kill_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f9 f88f 	bl	8001f14 <_kill>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_kill_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_kill_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	2000045c 	.word	0x2000045c

08008e08 <_getpid_r>:
 8008e08:	f7f9 b87c 	b.w	8001f04 <_getpid>

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
