#include "mpu6500.hpp"

uint8_t MPU6500::read_byte(uint8_t reg) {
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
	tx_data[1] = 0x00;  // dummy

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);

	return rx_data[1];
}

void MPU6500::write_byte(uint8_t reg, uint8_t data) {
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg & 0x7F;
//   tx_data[0] = reg | 0x00;
	tx_data[1] = data;  // write data

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //CSピン立ち下げ
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //CSピン立ち上げ
}

void MPU6500::MPU6500_Init() {
	uint8_t who_am_i;

	HAL_Delay(100);             // wait start up
	who_am_i = read_byte(WHO_AM_I); // read who am i
	printf("who_am_i = 0x%x\r\n", who_am_i); // check who am i value
	HAL_Delay(10);
	who_am_i = read_byte(WHO_AM_I);
	printf("who_am_i = 0x%x\r\n", who_am_i);
	HAL_Delay(10);

	if (who_am_i != 0x70) {
		printf("mpu6500 error");
	}

	HAL_Delay(50);
	write_byte(PWR_MGMT_1, 0x00); // set pwr_might (20MHz)
	HAL_Delay(50);
	write_byte(CONFIG, 0x00); // set config (FSYNCはNC)
	HAL_Delay(50);
	write_byte(GYRO_CONFIG, 0x18); // set gyro config (2000dps)
	HAL_Delay(50);
}

void MPU6500::MPU6500_OffsetCalc() {
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;
	float ax, ay, az;
	float gx, gy, gz;
	float ax_sum = 0;
	float ay_sum = 0;
	float az_sum = 0;
	float gx_sum = 0;
	float gy_sum = 0;
	float gz_sum = 0;

	for (int i = 0; i < 1000; i++) {
		// H:8bit shift, Link h and l
		ax_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_XOUT_H) << 8)
						| (uint16_t) read_byte(ACCEL_XOUT_L));
		ay_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_YOUT_H) << 8)
						| (uint16_t) read_byte(ACCEL_YOUT_L));
		az_raw = (int16_t)(
				(uint16_t)(read_byte(ACCEL_ZOUT_H) << 8)
						| (uint16_t) read_byte(ACCEL_ZOUT_L));
		gx_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_XOUT_H) << 8)
						| (uint16_t) read_byte(GYRO_XOUT_L));
		gy_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_YOUT_H) << 8)
						| (uint16_t) read_byte(GYRO_YOUT_L));
		gz_raw = (int16_t)(
				(uint16_t)(read_byte(GYRO_ZOUT_H) << 8)
						| (uint16_t) read_byte(GYRO_ZOUT_L));

		ax = (float) (ax_raw / ACCEL_FACTOR);
		ay = (float) (ay_raw / ACCEL_FACTOR);
		az = (float) (az_raw / ACCEL_FACTOR);
		gx = (float) (gx_raw / GYRO_FACTOR); // dps to deg/sec
		gy = (float) (gy_raw / GYRO_FACTOR);
		gz = (float) (gz_raw / GYRO_FACTOR);

		ax_sum += ax;
		ay_sum += ay;
		az_sum += az;
		gx_sum += gx;
		gy_sum += gy;
		gz_sum += gz;
		HAL_Delay(1);
	}
	ax_offset = ax_sum / 1000.0;
	ay_offset = ay_sum / 1000.0;
	az_offset = az_sum / 1000.0;
	gx_offset = gx_sum / 1000.0;
	gy_offset = gy_sum / 1000.0;
	gz_offset = gz_sum / 1000.0;
}

void MPU6500::Get_MPU6500_Data() {
	int16_t ax_raw, ay_raw, az_raw;
	int16_t gx_raw, gy_raw, gz_raw;
	float ax, ay, az;
	float gx, gy, gz;

	// H:8bit shift, Link h and l
	gz_raw = (int16_t)(
			(uint16_t)(read_byte(GYRO_ZOUT_H) << 8)
					| (uint16_t) read_byte(GYRO_ZOUT_L));
	// printf("%d\r\n", gz_raw);
	gz = (float) (gz_raw / GYRO_FACTOR) - gyro->offset; // dps to deg/sec

	// Shift IIR filter state
	for (int i = 1; i > 0; i--) {
		gyro_x_pre[i] = gyro_x_pre[i - 1];
		gyro_y_pre[i] = gyro_y_pre[i - 1];
	}
	gyro_x_pre[0] = gz;
	gyro_y_pre[0] = filtered_gyro_z;

	gyro->gz = filtered_gyro_z; //filter
	// gyro->gz = gz;  // nonfilter
	yaw += gyro->gz * 0.001;
	gyro->yaw = yaw;
}
