#include "mpu6500.hpp"

uint8_t MPU6500::read_byte(uint8_t reg)
{
  uint8_t rx_data[2];
  uint8_t tx_data[2];

  tx_data[0] = reg | 0x80;
  tx_data[1] = 0x00;  // dummy

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);

  return rx_data[1];
}

void MPU6500::write_byte(uint8_t reg, uint8_t data)
{
  uint8_t rx_data[2];
  uint8_t tx_data[2];

  tx_data[0] = reg & 0x7F;
//   tx_data[0] = reg | 0x00;
  tx_data[1] = data;  // write data

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET); //CSピン立ち下げ
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET); //CSピン立ち上げ
}

void MPU6500::MPU6500_Init()
{
    uint8_t who_am_i;

    HAL_Delay(100);             // wait start up
    who_am_i = read_byte(WHO_AM_I); // read who am i
    printf("who_am_i = 0x%x\r\n",who_am_i); // check who am i value
    HAL_Delay(10);
    who_am_i = read_byte(WHO_AM_I);
    printf("who_am_i = 0x%x\r\n",who_am_i);
    HAL_Delay(10);

    if (who_am_i != 0x70)
    {
        printf("mpu6500 error");
    }

    HAL_Delay(50);
    write_byte(PWR_MGMT_1, 0x00); // set pwr_might (20MHz)
    HAL_Delay(50);
    write_byte(CONFIG, 0x00); // set config (FSYNCはNC)
    HAL_Delay(50);
    write_byte(GYRO_CONFIG, 0x18); // set gyro config (2000dps)
    HAL_Delay(50);

}
